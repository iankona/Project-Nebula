/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Internal/Collide/BvCompressedMesh/hkpBvCompressedMeshShape.h'
#include <Physics2012/Internal/hkpInternal.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Internal/Collide/BvCompressedMesh/hkpBvCompressedMeshShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkStringPtrClass;
extern const hkClassEnum* hkpWeldingUtilityWeldingTypeEnum;

//
// Enum hkpBvCompressedMeshShape::PerPrimitiveDataMode
//
static const hkInternalClassEnumItem hkpBvCompressedMeshShapePerPrimitiveDataModeEnumItems[] =
{
	{0, "PER_PRIMITIVE_DATA_NONE"},
	{1, "PER_PRIMITIVE_DATA_8_BIT"},
	{2, "PER_PRIMITIVE_DATA_PALETTE"},
	{3, "PER_PRIMITIVE_DATA_STRING_PALETTE"},
};

//
// Enum hkpBvCompressedMeshShape::PrimitiveType
//
static const hkInternalClassEnumItem hkpBvCompressedMeshShapePrimitiveTypeEnumItems[] =
{
	{0, "PRIMITIVE_TYPE_BOX"},
	{1, "PRIMITIVE_TYPE_HULL"},
	{2, "PRIMITIVE_TYPE_SPHERE"},
	{3, "PRIMITIVE_TYPE_CAPSULE"},
	{4, "PRIMITIVE_TYPE_CYLINDER"},
};

//
// Enum hkpBvCompressedMeshShape::Config
//
static const hkInternalClassEnumItem hkpBvCompressedMeshShapeConfigEnumItems[] =
{
	{144, "NUM_BYTES_FOR_TREE"},
	{255, "MAX_NUM_VERTICES_PER_HULL"},
	{8388608, "MAX_NUM_PRIMITIVES"},
};
static const hkInternalClassEnum hkpBvCompressedMeshShapeEnums[] = {
	{"PerPrimitiveDataMode", hkpBvCompressedMeshShapePerPrimitiveDataModeEnumItems, 4, HK_NULL, 0 },
	{"PrimitiveType", hkpBvCompressedMeshShapePrimitiveTypeEnumItems, 5, HK_NULL, 0 },
	{"Config", hkpBvCompressedMeshShapeConfigEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* hkpBvCompressedMeshShapePerPrimitiveDataModeEnum = reinterpret_cast<const hkClassEnum*>(&hkpBvCompressedMeshShapeEnums[0]);
const hkClassEnum* hkpBvCompressedMeshShapePrimitiveTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpBvCompressedMeshShapeEnums[1]);
const hkClassEnum* hkpBvCompressedMeshShapeConfigEnum = reinterpret_cast<const hkClassEnum*>(&hkpBvCompressedMeshShapeEnums[2]);

//
// Class hkpBvCompressedMeshShape
//
extern const hkClass hkpBvTreeShapeClass;

const hkInternalClassMember hkpBvCompressedMeshShape::Members[] =
{
	{ "convexRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_convexRadius), HK_NULL },
	{ "weldingType", HK_NULL, hkpWeldingUtilityWeldingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_weldingType), HK_NULL },
	{ "hasPerPrimitiveCollisionFilterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_hasPerPrimitiveCollisionFilterInfo), HK_NULL },
	{ "hasPerPrimitiveUserData", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_hasPerPrimitiveUserData), HK_NULL },
	{ "collisionFilterInfoPalette", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_collisionFilterInfoPalette), HK_NULL },
	{ "userDataPalette", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_userDataPalette), HK_NULL },
	{ "userStringPalette", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRINGPTR, 0, 0, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_userStringPalette), HK_NULL },
	{ "tree", &hkpBvCompressedMeshShapeTreeClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::ALIGN_REAL, HK_OFFSET_OF(hkpBvCompressedMeshShape,m_tree), HK_NULL }
};
namespace
{
	struct hkpBvCompressedMeshShape_DefaultStruct
	{
		int s_defaultOffsets[8];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpWeldingUtility::WeldingType, hkUint8 > */ m_weldingType;
	};
	const hkpBvCompressedMeshShape_DefaultStruct hkpBvCompressedMeshShape_Default =
	{
		{-1,HK_OFFSET_OF(hkpBvCompressedMeshShape_DefaultStruct,m_weldingType),-1,-1,-1,-1,-1,-1},
		hkpWeldingUtility::WELDING_TYPE_NONE
	};
}
extern const hkClass hkpBvCompressedMeshShapeClass;
const hkClass hkpBvCompressedMeshShapeClass(
	"hkpBvCompressedMeshShape",
	&hkpBvTreeShapeClass, // parent
	sizeof(::hkpBvCompressedMeshShape),
	HK_NULL,
	1, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpBvCompressedMeshShapeEnums),
	3, // enums
	reinterpret_cast<const hkClassMember*>(hkpBvCompressedMeshShape::Members),
	HK_COUNT_OF(hkpBvCompressedMeshShape::Members),
	&hkpBvCompressedMeshShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpBvCompressedMeshShape::staticClass()
{
	return hkpBvCompressedMeshShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpBvCompressedMeshShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpBvCompressedMeshShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpBvCompressedMeshShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpBvCompressedMeshShape(void* p)
{
	static_cast<hkpBvCompressedMeshShape*>(p)->~hkpBvCompressedMeshShape();
}
static const void* HK_CALL getVtablehkpBvCompressedMeshShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpBvCompressedMeshShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpBvCompressedMeshShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpBvCompressedMeshShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpBvCompressedMeshShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpBvCompressedMeshShapeTypeInfo;
const hkTypeInfo hkpBvCompressedMeshShapeTypeInfo(
	"hkpBvCompressedMeshShape",
	"!hkpBvCompressedMeshShape",
	finishLoadedObjecthkpBvCompressedMeshShape,
	cleanupLoadedObjecthkpBvCompressedMeshShape,
	getVtablehkpBvCompressedMeshShape(),
	sizeof(hkpBvCompressedMeshShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
