/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Internal/Collide/StaticCompound/hkpStaticCompoundShape.h'
#include <Physics2012/Internal/hkpInternal.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Internal/Collide/StaticCompound/hkpStaticCompoundShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpShapeClass;
extern const hkClass hkpShapeKeyTableClass;
extern const hkClass hkpStaticCompoundShapeInstanceClass;

//
// Enum hkpStaticCompoundShape::Config
//
static const hkInternalClassEnumItem hkpStaticCompoundShapeConfigEnumItems[] =
{
	{48, "NUM_BYTES_FOR_TREE"},
};
static const hkInternalClassEnum hkpStaticCompoundShapeEnums[] = {
	{"Config", hkpStaticCompoundShapeConfigEnumItems, 1, HK_NULL, 0 }
};
const hkClassEnum* hkpStaticCompoundShapeConfigEnum = reinterpret_cast<const hkClassEnum*>(&hkpStaticCompoundShapeEnums[0]);

//
// Class hkpStaticCompoundShape::Instance
//
const hkInternalClassMember hkpStaticCompoundShape::Instance::Members[] =
{
	{ "transform", HK_NULL, HK_NULL, hkClassMember::TYPE_QSTRANSFORM, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape::Instance,m_transform), HK_NULL },
	{ "shape", &hkpShapeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape::Instance,m_shape), HK_NULL },
	{ "filterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape::Instance,m_filterInfo), HK_NULL },
	{ "childFilterInfoMask", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape::Instance,m_childFilterInfoMask), HK_NULL },
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_ULONG, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape::Instance,m_userData), HK_NULL }
};
const hkClass hkpStaticCompoundShapeInstanceClass(
	"hkpStaticCompoundShapeInstance",
	HK_NULL, // parent
	sizeof(hkpStaticCompoundShape::Instance),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpStaticCompoundShape::Instance::Members),
	HK_COUNT_OF(hkpStaticCompoundShape::Instance::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpStaticCompoundShape::Instance::staticClass()
{
	return hkpStaticCompoundShapeInstanceClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpStaticCompoundShape::Instance*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpStaticCompoundShapeInstance(void* p)
{
	static_cast<hkpStaticCompoundShape::Instance*>(p)->~Instance();
}
extern const hkTypeInfo hkpStaticCompoundShapeInstanceTypeInfo;
const hkTypeInfo hkpStaticCompoundShapeInstanceTypeInfo(
	"hkpStaticCompoundShapeInstance",
	"!hkpStaticCompoundShape::Instance",
	HK_NULL,
	cleanupLoadedObjecthkpStaticCompoundShapeInstance,
	HK_NULL,
	sizeof(hkpStaticCompoundShape::Instance)
	);
#endif

//
// Class hkpStaticCompoundShape
//
extern const hkClass hkpBvTreeShapeClass;

const hkInternalClassMember hkpStaticCompoundShape::Members[] =
{
	{ "numBitsForChildShapeKey", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape,m_numBitsForChildShapeKey), HK_NULL },
	{ "referencePolicy", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpStaticCompoundShape,m_referencePolicy), HK_NULL },
	{ "childShapeKeyMask", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpStaticCompoundShape,m_childShapeKeyMask), HK_NULL },
	{ "instances", &hkpStaticCompoundShapeInstanceClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape,m_instances), HK_NULL },
	{ "instanceExtraInfos", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape,m_instanceExtraInfos), HK_NULL },
	{ "disabledLargeShapeKeyTable", &hkpShapeKeyTableClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpStaticCompoundShape,m_disabledLargeShapeKeyTable), HK_NULL },
	{ "tree", &hkcdStaticTreeDefaultTreeStorage6Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::ALIGN_REAL, HK_OFFSET_OF(hkpStaticCompoundShape,m_tree), HK_NULL }
};
extern const hkClass hkpStaticCompoundShapeClass;
const hkClass hkpStaticCompoundShapeClass(
	"hkpStaticCompoundShape",
	&hkpBvTreeShapeClass, // parent
	sizeof(::hkpStaticCompoundShape),
	HK_NULL,
	1, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpStaticCompoundShapeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpStaticCompoundShape::Members),
	HK_COUNT_OF(hkpStaticCompoundShape::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpStaticCompoundShape::staticClass()
{
	return hkpStaticCompoundShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpStaticCompoundShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpStaticCompoundShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpStaticCompoundShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpStaticCompoundShape(void* p)
{
	static_cast<hkpStaticCompoundShape*>(p)->~hkpStaticCompoundShape();
}
static const void* HK_CALL getVtablehkpStaticCompoundShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpStaticCompoundShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpStaticCompoundShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpStaticCompoundShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpStaticCompoundShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpStaticCompoundShapeTypeInfo;
const hkTypeInfo hkpStaticCompoundShapeTypeInfo(
	"hkpStaticCompoundShape",
	"!hkpStaticCompoundShape",
	finishLoadedObjecthkpStaticCompoundShape,
	cleanupLoadedObjecthkpStaticCompoundShape,
	getVtablehkpStaticCompoundShape(),
	sizeof(hkpStaticCompoundShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
