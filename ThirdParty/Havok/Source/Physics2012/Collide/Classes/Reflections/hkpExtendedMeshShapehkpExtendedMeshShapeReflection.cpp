/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/Compound/Collection/ExtendedMeshShape/hkpExtendedMeshShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/Compound/Collection/ExtendedMeshShape/hkpExtendedMeshShape.h>
#include <Physics2012/Collide/Shape/Compound/Collection/StorageExtendedMesh/hkpStorageExtendedMeshShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkClassClass;
extern const hkClass hkpConvexShapeClass;
extern const hkClass hkpExtendedMeshShapeShapesSubpartClass;
extern const hkClass hkpExtendedMeshShapeTrianglesSubpartClass;
extern const hkClass hkpMeshMaterialClass;
extern const hkClassEnum* hkpExtendedMeshShapeIndexStridingTypeEnum;
extern const hkClassEnum* hkpWeldingUtilityWeldingTypeEnum;

//
// Enum hkpExtendedMeshShape::IndexStridingType
//
static const hkInternalClassEnumItem hkpExtendedMeshShapeIndexStridingTypeEnumItems[] =
{
	{0, "INDICES_INVALID"},
	{1, "INDICES_INT8"},
	{2, "INDICES_INT16"},
	{3, "INDICES_INT32"},
	{4, "INDICES_MAX_ID"},
};

//
// Enum hkpExtendedMeshShape::MaterialIndexStridingType
//
static const hkInternalClassEnumItem hkpExtendedMeshShapeMaterialIndexStridingTypeEnumItems[] =
{
	{0, "MATERIAL_INDICES_INVALID"},
	{1, "MATERIAL_INDICES_INT8"},
	{2, "MATERIAL_INDICES_INT16"},
	{3, "MATERIAL_INDICES_MAX_ID"},
};

//
// Enum hkpExtendedMeshShape::SubpartType
//
static const hkInternalClassEnumItem hkpExtendedMeshShapeSubpartTypeEnumItems[] =
{
	{0, "SUBPART_TRIANGLES"},
	{1, "SUBPART_SHAPE"},
	{2, "SUBPART_TYPE_MAX"},
};

//
// Enum hkpExtendedMeshShape::SubpartTypesAndFlags
//
static const hkInternalClassEnumItem hkpExtendedMeshShapeSubpartTypesAndFlagsEnumItems[] =
{
	{1, "SUBPART_TYPE_MASK"},
	{6, "SUBPART_MATERIAL_INDICES_MASK"},
	{1, "SUBPART_MATERIAL_INDICES_SHIFT"},
	{65528, "SUBPART_NUM_MATERIALS_MASK"},
	{3, "SUBPART_NUM_MATERIALS_SHIFT"},
};
static const hkInternalClassEnum hkpExtendedMeshShapeEnums[] = {
	{"IndexStridingType", hkpExtendedMeshShapeIndexStridingTypeEnumItems, 5, HK_NULL, 0 },
	{"MaterialIndexStridingType", hkpExtendedMeshShapeMaterialIndexStridingTypeEnumItems, 4, HK_NULL, 0 },
	{"SubpartType", hkpExtendedMeshShapeSubpartTypeEnumItems, 3, HK_NULL, 0 },
	{"SubpartTypesAndFlags", hkpExtendedMeshShapeSubpartTypesAndFlagsEnumItems, 5, HK_NULL, 0 }
};
const hkClassEnum* hkpExtendedMeshShapeIndexStridingTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpExtendedMeshShapeEnums[0]);
const hkClassEnum* hkpExtendedMeshShapeMaterialIndexStridingTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpExtendedMeshShapeEnums[1]);
const hkClassEnum* hkpExtendedMeshShapeSubpartTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpExtendedMeshShapeEnums[2]);
const hkClassEnum* hkpExtendedMeshShapeSubpartTypesAndFlagsEnum = reinterpret_cast<const hkClassEnum*>(&hkpExtendedMeshShapeEnums[3]);

//
// Class hkpExtendedMeshShape::Subpart
//
const hkInternalClassMember hkpExtendedMeshShape::Subpart::Members[] =
{
	{ "typeAndFlags", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_typeAndFlags), HK_NULL },
	{ "shapeInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_shapeInfo), HK_NULL },
	{ "materialStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_materialStriding), HK_NULL },
	{ "materialIndexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_materialIndexStriding), HK_NULL },
	{ "materialIndexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_materialIndexBase), HK_NULL },
	{ "materialBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_materialBase), HK_NULL },
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_ULONG, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::Subpart,m_userData), HK_NULL }
};
namespace
{
	struct hkpExtendedMeshShapeSubpart_DefaultStruct
	{
		int s_defaultOffsets[7];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpExtendedMeshShapeSubpart_DefaultStruct hkpExtendedMeshShapeSubpart_Default =
	{
		{-1,-1,-1,-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT},
		
	};
}
extern const hkClass hkpExtendedMeshShapeSubpartClass;
const hkClass hkpExtendedMeshShapeSubpartClass(
	"hkpExtendedMeshShapeSubpart",
	HK_NULL, // parent
	sizeof(hkpExtendedMeshShape::Subpart),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpExtendedMeshShape::Subpart::Members),
	HK_COUNT_OF(hkpExtendedMeshShape::Subpart::Members),
	&hkpExtendedMeshShapeSubpart_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpExtendedMeshShape::Subpart::staticClass()
{
	return hkpExtendedMeshShapeSubpartClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpExtendedMeshShape::Subpart*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpExtendedMeshShapeSubpart(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpExtendedMeshShape::Subpart(f);
}
static void HK_CALL cleanupLoadedObjecthkpExtendedMeshShapeSubpart(void* p)
{
	static_cast<hkpExtendedMeshShape::Subpart*>(p)->~Subpart();
}
extern const hkTypeInfo hkpExtendedMeshShapeSubpartTypeInfo;
const hkTypeInfo hkpExtendedMeshShapeSubpartTypeInfo(
	"hkpExtendedMeshShapeSubpart",
	"!hkpExtendedMeshShape::Subpart",
	finishLoadedObjecthkpExtendedMeshShapeSubpart,
	cleanupLoadedObjecthkpExtendedMeshShapeSubpart,
	HK_NULL,
	sizeof(hkpExtendedMeshShape::Subpart)
	);
#endif

//
// Class hkpExtendedMeshShape::TrianglesSubpart
//

static const hkInternalClassMember hkpExtendedMeshShape_TrianglesSubpartClass_Members[] =
{
	{ "numTriangleShapes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_numTriangleShapes), HK_NULL },
	{ "vertexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_vertexBase), HK_NULL },
	{ "numVertices", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_numVertices), HK_NULL },
	{ "indexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_indexBase), HK_NULL },
	{ "vertexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_vertexStriding), HK_NULL },
	{ "triangleOffset", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_triangleOffset), HK_NULL },
	{ "indexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_indexStriding), HK_NULL },
	{ "stridingType", HK_NULL, hkpExtendedMeshShapeIndexStridingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_stridingType), HK_NULL },
	{ "flipAlternateTriangles", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_flipAlternateTriangles), HK_NULL },
	{ "extrusion", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_extrusion), HK_NULL },
	{ "transform", HK_NULL, HK_NULL, hkClassMember::TYPE_QSTRANSFORM, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::TrianglesSubpart,m_transform), HK_NULL }
};
namespace
{
	struct hkpExtendedMeshShapeTrianglesSubpart_DefaultStruct
	{
		int s_defaultOffsets[11];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkInt32 m_triangleOffset;
	};
	const hkpExtendedMeshShapeTrianglesSubpart_DefaultStruct hkpExtendedMeshShapeTrianglesSubpart_Default =
	{
		{-1,-1,-1,-1,-1,HK_OFFSET_OF(hkpExtendedMeshShapeTrianglesSubpart_DefaultStruct,m_triangleOffset),-1,-1,-1,-1,-1},
		-1
	};
}
const hkClass hkpExtendedMeshShapeTrianglesSubpartClass(
	"hkpExtendedMeshShapeTrianglesSubpart",
	&hkpExtendedMeshShapeSubpartClass, // parent
	sizeof(hkpExtendedMeshShape::TrianglesSubpart),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpExtendedMeshShape_TrianglesSubpartClass_Members),
	HK_COUNT_OF(hkpExtendedMeshShape_TrianglesSubpartClass_Members),
	&hkpExtendedMeshShapeTrianglesSubpart_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpExtendedMeshShape::TrianglesSubpart::staticClass()
{
	return hkpExtendedMeshShapeTrianglesSubpartClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpExtendedMeshShape::TrianglesSubpart*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpExtendedMeshShapeTrianglesSubpart(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpExtendedMeshShape::TrianglesSubpart(f);
}
static void HK_CALL cleanupLoadedObjecthkpExtendedMeshShapeTrianglesSubpart(void* p)
{
	static_cast<hkpExtendedMeshShape::TrianglesSubpart*>(p)->~TrianglesSubpart();
}
extern const hkTypeInfo hkpExtendedMeshShapeTrianglesSubpartTypeInfo;
const hkTypeInfo hkpExtendedMeshShapeTrianglesSubpartTypeInfo(
	"hkpExtendedMeshShapeTrianglesSubpart",
	"!hkpExtendedMeshShape::TrianglesSubpart",
	finishLoadedObjecthkpExtendedMeshShapeTrianglesSubpart,
	cleanupLoadedObjecthkpExtendedMeshShapeTrianglesSubpart,
	HK_NULL,
	sizeof(hkpExtendedMeshShape::TrianglesSubpart)
	);
#endif

//
// Class hkpExtendedMeshShape::ShapesSubpart
//

const hkInternalClassMember hkpExtendedMeshShape::ShapesSubpart::Members[] =
{
	{ "childShapes", &hkpConvexShapeClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::ShapesSubpart,m_childShapes), HK_NULL },
	{ "rotation", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::ShapesSubpart,m_rotation), HK_NULL },
	{ "translation", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape::ShapesSubpart,m_translation), HK_NULL }
};
const hkClass hkpExtendedMeshShapeShapesSubpartClass(
	"hkpExtendedMeshShapeShapesSubpart",
	&hkpExtendedMeshShapeSubpartClass, // parent
	sizeof(hkpExtendedMeshShape::ShapesSubpart),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpExtendedMeshShape::ShapesSubpart::Members),
	HK_COUNT_OF(hkpExtendedMeshShape::ShapesSubpart::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpExtendedMeshShape::ShapesSubpart::staticClass()
{
	return hkpExtendedMeshShapeShapesSubpartClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpExtendedMeshShape::ShapesSubpart*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpExtendedMeshShapeShapesSubpart(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpExtendedMeshShape::ShapesSubpart(f);
}
static void HK_CALL cleanupLoadedObjecthkpExtendedMeshShapeShapesSubpart(void* p)
{
	static_cast<hkpExtendedMeshShape::ShapesSubpart*>(p)->~ShapesSubpart();
}
extern const hkTypeInfo hkpExtendedMeshShapeShapesSubpartTypeInfo;
const hkTypeInfo hkpExtendedMeshShapeShapesSubpartTypeInfo(
	"hkpExtendedMeshShapeShapesSubpart",
	"!hkpExtendedMeshShape::ShapesSubpart",
	finishLoadedObjecthkpExtendedMeshShapeShapesSubpart,
	cleanupLoadedObjecthkpExtendedMeshShapeShapesSubpart,
	HK_NULL,
	sizeof(hkpExtendedMeshShape::ShapesSubpart)
	);
#endif

//
// Class hkpExtendedMeshShape
//
extern const hkClass hkpShapeCollectionClass;

// hkpExtendedMeshShape attributes
const hkInternalClassMember hkpExtendedMeshShape::Members[] =
{
	{ "embeddedTrianglesSubpart", &hkpExtendedMeshShapeTrianglesSubpartClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_embeddedTrianglesSubpart), HK_NULL },
	{ "aabbHalfExtents", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_aabbHalfExtents), HK_NULL },
	{ "aabbCenter", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_aabbCenter), HK_NULL },
	{ "materialClass", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape,m_materialClass), HK_NULL },
	{ "numBitsForSubpartIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_numBitsForSubpartIndex), HK_NULL },
	{ "trianglesSubparts", &hkpExtendedMeshShapeTrianglesSubpartClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_trianglesSubparts), HK_NULL },
	{ "shapesSubparts", &hkpExtendedMeshShapeShapesSubpartClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_shapesSubparts), HK_NULL },
	{ "weldingInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_weldingInfo), HK_NULL },
	{ "weldingType", HK_NULL, hkpWeldingUtilityWeldingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_weldingType), HK_NULL },
	{ "defaultCollisionFilterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_defaultCollisionFilterInfo), HK_NULL },
	{ "cachedNumChildShapes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_cachedNumChildShapes), HK_NULL },
	{ "triangleRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpExtendedMeshShape,m_triangleRadius), HK_NULL },
	{ "padding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpExtendedMeshShape,m_padding), HK_NULL }
};
namespace
{
	struct hkpExtendedMeshShape_DefaultStruct
	{
		int s_defaultOffsets[13];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpWeldingUtility::WeldingType, hkUint8 > */ m_weldingType;
		hkInt32 m_cachedNumChildShapes;
	};
	const hkpExtendedMeshShape_DefaultStruct hkpExtendedMeshShape_Default =
	{
		{-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1,-1,-1,HK_OFFSET_OF(hkpExtendedMeshShape_DefaultStruct,m_weldingType),-1,HK_OFFSET_OF(hkpExtendedMeshShape_DefaultStruct,m_cachedNumChildShapes),-1,-1},
		hkpWeldingUtility::WELDING_TYPE_NONE,-1
	};
}
extern const hkClass hkpExtendedMeshShapeClass;
const hkClass hkpExtendedMeshShapeClass(
	"hkpExtendedMeshShape",
	&hkpShapeCollectionClass, // parent
	sizeof(::hkpExtendedMeshShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpExtendedMeshShapeEnums),
	4, // enums
	reinterpret_cast<const hkClassMember*>(hkpExtendedMeshShape::Members),
	HK_COUNT_OF(hkpExtendedMeshShape::Members),
	&hkpExtendedMeshShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(4) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpExtendedMeshShape::staticClass()
{
	return hkpExtendedMeshShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpExtendedMeshShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpExtendedMeshShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpExtendedMeshShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpExtendedMeshShape(void* p)
{
	static_cast<hkpExtendedMeshShape*>(p)->~hkpExtendedMeshShape();
}
static const void* HK_CALL getVtablehkpExtendedMeshShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpExtendedMeshShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpExtendedMeshShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpExtendedMeshShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpExtendedMeshShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpExtendedMeshShapeTypeInfo;
const hkTypeInfo hkpExtendedMeshShapeTypeInfo(
	"hkpExtendedMeshShape",
	"!hkpExtendedMeshShape",
	finishLoadedObjecthkpExtendedMeshShape,
	cleanupLoadedObjecthkpExtendedMeshShape,
	getVtablehkpExtendedMeshShape(),
	sizeof(hkpExtendedMeshShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
