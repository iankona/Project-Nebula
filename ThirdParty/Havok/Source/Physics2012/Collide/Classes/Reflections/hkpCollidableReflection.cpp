/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Agent/Collidable/hkpCollidable.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Agent/Collidable/hkpCollidable.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkAabbUint32Class;
extern const hkClass hkpCollidableBoundingVolumeDataClass;
extern const hkClass hkpTypedBroadPhaseHandleClass;

//
// Enum hkpCollidable::ForceCollideOntoPpuReasons
//
static const hkInternalClassEnumItem hkpCollidableForceCollideOntoPpuReasonsEnumItems[] =
{
	{1, "FORCE_PPU_USER_REQUEST"},
	{2, "FORCE_PPU_SHAPE_REQUEST"},
	{4, "FORCE_PPU_MODIFIER_REQUEST"},
	{8, "FORCE_PPU_SHAPE_UNCHECKED"},
};
static const hkInternalClassEnum hkpCollidableEnums[] = {
	{"ForceCollideOntoPpuReasons", hkpCollidableForceCollideOntoPpuReasonsEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkpCollidableForceCollideOntoPpuReasonsEnum = reinterpret_cast<const hkClassEnum*>(&hkpCollidableEnums[0]);

//
// Class hkpCollidable::BoundingVolumeData
//
static const hkInternalClassMember hkpCollidable_BoundingVolumeDataClass_Members[] =
{
	{ "min", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_min), HK_NULL },
	{ "expansionMin", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_expansionMin), HK_NULL },
	{ "expansionShift", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_expansionShift), HK_NULL },
	{ "max", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_max), HK_NULL },
	{ "expansionMax", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_expansionMax), HK_NULL },
	{ "padding", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_padding), HK_NULL },
	{ "numChildShapeAabbs", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_numChildShapeAabbs), HK_NULL },
	{ "capacityChildShapeAabbs", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_capacityChildShapeAabbs), HK_NULL },
	{ "childShapeAabbs", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_childShapeAabbs), HK_NULL },
	{ "childShapeKeys", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable::BoundingVolumeData,m_childShapeKeys), HK_NULL }
};
const hkClass hkpCollidableBoundingVolumeDataClass(
	"hkpCollidableBoundingVolumeData",
	HK_NULL, // parent
	sizeof(hkpCollidable::BoundingVolumeData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpCollidable_BoundingVolumeDataClass_Members),
	HK_COUNT_OF(hkpCollidable_BoundingVolumeDataClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpCollidable::BoundingVolumeData::staticClass()
{
	return hkpCollidableBoundingVolumeDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpCollidable::BoundingVolumeData*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpCollidableBoundingVolumeData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpCollidable::BoundingVolumeData(f);
}
static void HK_CALL cleanupLoadedObjecthkpCollidableBoundingVolumeData(void* p)
{
	static_cast<hkpCollidable::BoundingVolumeData*>(p)->~BoundingVolumeData();
}
extern const hkTypeInfo hkpCollidableBoundingVolumeDataTypeInfo;
const hkTypeInfo hkpCollidableBoundingVolumeDataTypeInfo(
	"hkpCollidableBoundingVolumeData",
	"!hkpCollidable::BoundingVolumeData",
	finishLoadedObjecthkpCollidableBoundingVolumeData,
	cleanupLoadedObjecthkpCollidableBoundingVolumeData,
	HK_NULL,
	sizeof(hkpCollidable::BoundingVolumeData)
	);
#endif

//
// Class hkpCollidable
//
extern const hkClass hkpCdBodyClass;

const hkInternalClassMember hkpCollidable::Members[] =
{
	{ "ownerOffset", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable,m_ownerOffset), HK_NULL },
	{ "forceCollideOntoPpu", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpCollidable,m_forceCollideOntoPpu), HK_NULL },
	{ "shapeSizeOnSpu", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable,m_shapeSizeOnSpu), HK_NULL },
	{ "broadPhaseHandle", &hkpTypedBroadPhaseHandleClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpCollidable,m_broadPhaseHandle), HK_NULL },
	{ "boundingVolumeData", &hkpCollidableBoundingVolumeDataClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpCollidable,m_boundingVolumeData), HK_NULL },
	{ "allowedPenetrationDepth", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpCollidable,m_allowedPenetrationDepth), HK_NULL }
};
extern const hkClass hkpCollidableClass;
const hkClass hkpCollidableClass(
	"hkpCollidable",
	&hkpCdBodyClass, // parent
	sizeof(::hkpCollidable),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpCollidableEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpCollidable::Members),
	HK_COUNT_OF(hkpCollidable::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpCollidable::staticClass()
{
	return hkpCollidableClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpCollidable*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpCollidable(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpCollidable(f);
}
static void HK_CALL cleanupLoadedObjecthkpCollidable(void* p)
{
	static_cast<hkpCollidable*>(p)->~hkpCollidable();
}
extern const hkTypeInfo hkpCollidableTypeInfo;
const hkTypeInfo hkpCollidableTypeInfo(
	"hkpCollidable",
	"!hkpCollidable",
	finishLoadedObjecthkpCollidable,
	cleanupLoadedObjecthkpCollidable,
	HK_NULL,
	sizeof(hkpCollidable)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
