/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/Deprecated/Mesh/hkpMeshShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/Deprecated/FastMesh/hkpFastMeshShape.h>
#include <Physics2012/Collide/Shape/Deprecated/Mesh/hkpMeshShape.h>
#include <Physics2012/Collide/Shape/Deprecated/StorageMesh/hkpStorageMeshShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpMeshMaterialClass;
extern const hkClass hkpMeshShapeSubpartClass;
extern const hkClassEnum* hkpMeshShapeMeshShapeIndexStridingTypeEnum;
extern const hkClassEnum* hkpMeshShapeMeshShapeMaterialIndexStridingTypeEnum;
extern const hkClassEnum* hkpWeldingUtilityWeldingTypeEnum;

//
// Enum hkpMeshShape::MeshShapeIndexStridingType
//
static const hkInternalClassEnumItem hkpMeshShapeMeshShapeIndexStridingTypeEnumItems[] =
{
	{0, "INDICES_INVALID"},
	{1, "INDICES_INT16"},
	{2, "INDICES_INT32"},
	{3, "INDICES_MAX_ID"},
};

//
// Enum hkpMeshShape::MeshShapeMaterialIndexStridingType
//
static const hkInternalClassEnumItem hkpMeshShapeMeshShapeMaterialIndexStridingTypeEnumItems[] =
{
	{0, "MATERIAL_INDICES_INVALID"},
	{1, "MATERIAL_INDICES_INT8"},
	{2, "MATERIAL_INDICES_INT16"},
	{3, "MATERIAL_INDICES_MAX_ID"},
};
static const hkInternalClassEnum hkpMeshShapeEnums[] = {
	{"MeshShapeIndexStridingType", hkpMeshShapeMeshShapeIndexStridingTypeEnumItems, 4, HK_NULL, 0 },
	{"MeshShapeMaterialIndexStridingType", hkpMeshShapeMeshShapeMaterialIndexStridingTypeEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkpMeshShapeMeshShapeIndexStridingTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpMeshShapeEnums[0]);
const hkClassEnum* hkpMeshShapeMeshShapeMaterialIndexStridingTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpMeshShapeEnums[1]);

//
// Class hkpMeshShape::Subpart
//
static const hkInternalClassMember hkpMeshShape_SubpartClass_Members[] =
{
	{ "vertexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpMeshShape::Subpart,m_vertexBase), HK_NULL },
	{ "vertexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_vertexStriding), HK_NULL },
	{ "numVertices", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_numVertices), HK_NULL },
	{ "indexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpMeshShape::Subpart,m_indexBase), HK_NULL },
	{ "stridingType", HK_NULL, hkpMeshShapeMeshShapeIndexStridingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_stridingType), HK_NULL },
	{ "materialIndexStridingType", HK_NULL, hkpMeshShapeMeshShapeMaterialIndexStridingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_materialIndexStridingType), HK_NULL },
	{ "indexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_indexStriding), HK_NULL },
	{ "flipAlternateTriangles", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_flipAlternateTriangles), HK_NULL },
	{ "numTriangles", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_numTriangles), HK_NULL },
	{ "materialIndexBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpMeshShape::Subpart,m_materialIndexBase), HK_NULL },
	{ "materialIndexStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_materialIndexStriding), HK_NULL },
	{ "materialBase", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpMeshShape::Subpart,m_materialBase), HK_NULL },
	{ "materialStriding", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_materialStriding), HK_NULL },
	{ "numMaterials", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_numMaterials), HK_NULL },
	{ "triangleOffset", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape::Subpart,m_triangleOffset), HK_NULL }
};
namespace
{
	struct hkpMeshShapeSubpart_DefaultStruct
	{
		int s_defaultOffsets[15];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkInt32 m_triangleOffset;
	};
	const hkpMeshShapeSubpart_DefaultStruct hkpMeshShapeSubpart_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,HK_OFFSET_OF(hkpMeshShapeSubpart_DefaultStruct,m_triangleOffset)},
		-1
	};
}
const hkClass hkpMeshShapeSubpartClass(
	"hkpMeshShapeSubpart",
	HK_NULL, // parent
	sizeof(hkpMeshShape::Subpart),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpMeshShape_SubpartClass_Members),
	HK_COUNT_OF(hkpMeshShape_SubpartClass_Members),
	&hkpMeshShapeSubpart_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMeshShape::Subpart::staticClass()
{
	return hkpMeshShapeSubpartClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpMeshShape::Subpart*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpMeshShapeSubpart(void* p)
{
	static_cast<hkpMeshShape::Subpart*>(p)->~Subpart();
}
extern const hkTypeInfo hkpMeshShapeSubpartTypeInfo;
const hkTypeInfo hkpMeshShapeSubpartTypeInfo(
	"hkpMeshShapeSubpart",
	"!hkpMeshShape::Subpart",
	HK_NULL,
	cleanupLoadedObjecthkpMeshShapeSubpart,
	HK_NULL,
	sizeof(hkpMeshShape::Subpart)
	);
#endif

//
// Class hkpMeshShape
//
extern const hkClass hkpShapeCollectionClass;

// hkpMeshShape attributes
const hkInternalClassMember hkpMeshShape::Members[] =
{
	{ "scaling", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_scaling), HK_NULL },
	{ "numBitsForSubpartIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_numBitsForSubpartIndex), HK_NULL },
	{ "subparts", &hkpMeshShapeSubpartClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_subparts), HK_NULL },
	{ "weldingInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_weldingInfo), HK_NULL },
	{ "weldingType", HK_NULL, hkpWeldingUtilityWeldingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_weldingType), HK_NULL },
	{ "radius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMeshShape,m_radius), HK_NULL },
	{ "pad", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkpMeshShape,m_pad), HK_NULL }
};
namespace
{
	struct hkpMeshShape_DefaultStruct
	{
		int s_defaultOffsets[7];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpWeldingUtility::WeldingType, hkUint8 > */ m_weldingType;
	};
	const hkpMeshShape_DefaultStruct hkpMeshShape_Default =
	{
		{-1,-1,-1,-1,HK_OFFSET_OF(hkpMeshShape_DefaultStruct,m_weldingType),-1,-1},
		hkpWeldingUtility::WELDING_TYPE_NONE
	};
}
extern const hkClass hkpMeshShapeClass;
const hkClass hkpMeshShapeClass(
	"hkpMeshShape",
	&hkpShapeCollectionClass, // parent
	sizeof(::hkpMeshShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpMeshShapeEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hkpMeshShape::Members),
	HK_COUNT_OF(hkpMeshShape::Members),
	&hkpMeshShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMeshShape::staticClass()
{
	return hkpMeshShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpMeshShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpMeshShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpMeshShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpMeshShape(void* p)
{
	static_cast<hkpMeshShape*>(p)->~hkpMeshShape();
}
static const void* HK_CALL getVtablehkpMeshShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpMeshShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpMeshShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpMeshShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpMeshShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpMeshShapeTypeInfo;
const hkTypeInfo hkpMeshShapeTypeInfo(
	"hkpMeshShape",
	"!hkpMeshShape",
	finishLoadedObjecthkpMeshShape,
	cleanupLoadedObjecthkpMeshShape,
	getVtablehkpMeshShape(),
	sizeof(hkpMeshShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
