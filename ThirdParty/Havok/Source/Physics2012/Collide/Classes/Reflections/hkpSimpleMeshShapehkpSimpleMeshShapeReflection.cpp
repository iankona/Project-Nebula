/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/Compound/Collection/SimpleMesh/hkpSimpleMeshShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/Compound/Collection/SimpleMesh/hkpSimpleMeshShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkVector4fClass;
extern const hkClass hkpSimpleMeshShapeTriangleClass;
extern const hkClassEnum* hkpWeldingUtilityWeldingTypeEnum;

//
// Class hkpSimpleMeshShape::Triangle
//
static const hkInternalClassMember hkpSimpleMeshShape_TriangleClass_Members[] =
{
	{ "a", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape::Triangle,m_a), HK_NULL },
	{ "b", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape::Triangle,m_b), HK_NULL },
	{ "c", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape::Triangle,m_c), HK_NULL },
	{ "weldingInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape::Triangle,m_weldingInfo), HK_NULL }
};
namespace
{
	struct hkpSimpleMeshShapeTriangle_DefaultStruct
	{
		int s_defaultOffsets[4];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpSimpleMeshShapeTriangle_DefaultStruct hkpSimpleMeshShapeTriangle_Default =
	{
		{-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT},
		
	};
}
const hkClass hkpSimpleMeshShapeTriangleClass(
	"hkpSimpleMeshShapeTriangle",
	HK_NULL, // parent
	sizeof(hkpSimpleMeshShape::Triangle),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpSimpleMeshShape_TriangleClass_Members),
	HK_COUNT_OF(hkpSimpleMeshShape_TriangleClass_Members),
	&hkpSimpleMeshShapeTriangle_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpSimpleMeshShape::Triangle::staticClass()
{
	return hkpSimpleMeshShapeTriangleClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpSimpleMeshShape::Triangle*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpSimpleMeshShapeTriangle(void* p)
{
	static_cast<hkpSimpleMeshShape::Triangle*>(p)->~Triangle();
}
extern const hkTypeInfo hkpSimpleMeshShapeTriangleTypeInfo;
const hkTypeInfo hkpSimpleMeshShapeTriangleTypeInfo(
	"hkpSimpleMeshShapeTriangle",
	"!hkpSimpleMeshShape::Triangle",
	HK_NULL,
	cleanupLoadedObjecthkpSimpleMeshShapeTriangle,
	HK_NULL,
	sizeof(hkpSimpleMeshShape::Triangle)
	);
#endif

//
// Class hkpSimpleMeshShape
//
extern const hkClass hkpShapeCollectionClass;

// hkpSimpleMeshShape attributes
static const hkInternalClassMember hkpSimpleMeshShapeClass_Members[] =
{
	{ "vertices", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_VECTOR4, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape,m_vertices), HK_NULL },
	{ "triangles", &hkpSimpleMeshShapeTriangleClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape,m_triangles), HK_NULL },
	{ "materialIndices", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape,m_materialIndices), HK_NULL },
	{ "radius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape,m_radius), HK_NULL },
	{ "weldingType", HK_NULL, hkpWeldingUtilityWeldingTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpSimpleMeshShape,m_weldingType), HK_NULL }
};
namespace
{
	struct hkpSimpleMeshShape_DefaultStruct
	{
		int s_defaultOffsets[5];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpWeldingUtility::WeldingType, hkUint8 > */ m_weldingType;
	};
	const hkpSimpleMeshShape_DefaultStruct hkpSimpleMeshShape_Default =
	{
		{-1,-1,-1,-1,HK_OFFSET_OF(hkpSimpleMeshShape_DefaultStruct,m_weldingType)},
		hkpWeldingUtility::WELDING_TYPE_NONE
	};
}
extern const hkClass hkpSimpleMeshShapeClass;
const hkClass hkpSimpleMeshShapeClass(
	"hkpSimpleMeshShape",
	&hkpShapeCollectionClass, // parent
	sizeof(::hkpSimpleMeshShape),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpSimpleMeshShapeClass_Members),
	HK_COUNT_OF(hkpSimpleMeshShapeClass_Members),
	&hkpSimpleMeshShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpSimpleMeshShape::staticClass()
{
	return hkpSimpleMeshShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpSimpleMeshShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpSimpleMeshShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpSimpleMeshShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpSimpleMeshShape(void* p)
{
	static_cast<hkpSimpleMeshShape*>(p)->~hkpSimpleMeshShape();
}
static const void* HK_CALL getVtablehkpSimpleMeshShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpSimpleMeshShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpSimpleMeshShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpSimpleMeshShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpSimpleMeshShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpSimpleMeshShapeTypeInfo;
const hkTypeInfo hkpSimpleMeshShapeTypeInfo(
	"hkpSimpleMeshShape",
	"!hkpSimpleMeshShape",
	finishLoadedObjecthkpSimpleMeshShape,
	cleanupLoadedObjecthkpSimpleMeshShape,
	getVtablehkpSimpleMeshShape(),
	sizeof(hkpSimpleMeshShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
