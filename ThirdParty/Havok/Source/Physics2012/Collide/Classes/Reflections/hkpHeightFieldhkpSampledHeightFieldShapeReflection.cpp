/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/HeightField/SampledHeightField/hkpSampledHeightFieldShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/HeightField/Plane/hkpPlaneShape.h>
#include <Physics2012/Collide/Shape/HeightField/TriSampledHeightField/hkpTriSampledHeightFieldCollection.h>
#include <Physics2012/Collide/Shape/HeightField/hkpHeightFieldShape.h>
#include <Physics2012/Collide/Shape/HeightField/CompressedSampledHeightField/hkpCompressedSampledHeightFieldShape.h>
#include <Physics2012/Collide/Shape/HeightField/SampledHeightField/hkpSampledHeightFieldShape.h>
#include <Physics2012/Collide/Shape/HeightField/TriSampledHeightField/hkpTriSampledHeightFieldBvTreeShape.h>
#include <Physics2012/Collide/Shape/HeightField/StorageSampledHeightField/hkpStorageSampledHeightFieldShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkAabbClass;
extern const hkClass hkVector4fClass;
extern const hkClass hkpSampledHeightFieldShapeCoarseMinMaxLevelClass;
extern const hkClassEnum* hkpSampledHeightFieldShapeHeightFieldTypeEnum;

//
// Enum hkpSampledHeightFieldShape::HeightFieldType
//
static const hkInternalClassEnumItem hkpSampledHeightFieldShapeHeightFieldTypeEnumItems[] =
{
	{0, "HEIGHTFIELD_STORAGE"},
	{1, "HEIGHTFIELD_COMPRESSED"},
	{2, "HEIGHTFIELD_USER"},
	{3, "HEIGHTFIELD_MAX_ID"},
};
static const hkInternalClassEnum hkpSampledHeightFieldShapeEnums[] = {
	{"HeightFieldType", hkpSampledHeightFieldShapeHeightFieldTypeEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkpSampledHeightFieldShapeHeightFieldTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpSampledHeightFieldShapeEnums[0]);

//
// Class hkpSampledHeightFieldShape::CoarseMinMaxLevel
//
static const hkInternalClassMember hkpSampledHeightFieldShape_CoarseMinMaxLevelClass_Members[] =
{
	{ "minMaxData", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_VECTOR4, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape::CoarseMinMaxLevel,m_minMaxData), HK_NULL },
	{ "xRes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape::CoarseMinMaxLevel,m_xRes), HK_NULL },
	{ "zRes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape::CoarseMinMaxLevel,m_zRes), HK_NULL }
};
const hkClass hkpSampledHeightFieldShapeCoarseMinMaxLevelClass(
	"hkpSampledHeightFieldShapeCoarseMinMaxLevel",
	HK_NULL, // parent
	sizeof(hkpSampledHeightFieldShape::CoarseMinMaxLevel),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpSampledHeightFieldShape_CoarseMinMaxLevelClass_Members),
	HK_COUNT_OF(hkpSampledHeightFieldShape_CoarseMinMaxLevelClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpSampledHeightFieldShape::CoarseMinMaxLevel::staticClass()
{
	return hkpSampledHeightFieldShapeCoarseMinMaxLevelClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpSampledHeightFieldShape::CoarseMinMaxLevel*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpSampledHeightFieldShapeCoarseMinMaxLevel(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpSampledHeightFieldShape::CoarseMinMaxLevel(f);
}
static void HK_CALL cleanupLoadedObjecthkpSampledHeightFieldShapeCoarseMinMaxLevel(void* p)
{
	static_cast<hkpSampledHeightFieldShape::CoarseMinMaxLevel*>(p)->~CoarseMinMaxLevel();
}
extern const hkTypeInfo hkpSampledHeightFieldShapeCoarseMinMaxLevelTypeInfo;
const hkTypeInfo hkpSampledHeightFieldShapeCoarseMinMaxLevelTypeInfo(
	"hkpSampledHeightFieldShapeCoarseMinMaxLevel",
	"!hkpSampledHeightFieldShape::CoarseMinMaxLevel",
	finishLoadedObjecthkpSampledHeightFieldShapeCoarseMinMaxLevel,
	cleanupLoadedObjecthkpSampledHeightFieldShapeCoarseMinMaxLevel,
	HK_NULL,
	sizeof(hkpSampledHeightFieldShape::CoarseMinMaxLevel)
	);
#endif

//
// Class hkpSampledHeightFieldShape
//
extern const hkClass hkpHeightFieldShapeClass;

// hkpSampledHeightFieldShape attributes
static const hkInternalClassMember hkpSampledHeightFieldShapeClass_Members[] =
{
	{ "coarseTreeData", &hkpSampledHeightFieldShapeCoarseMinMaxLevelClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_coarseTreeData), HK_NULL },
	{ "coarseness", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_coarseness), HK_NULL },
	{ "raycastMinY", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_raycastMinY), HK_NULL },
	{ "raycastMaxY", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_raycastMaxY), HK_NULL },
	{ "xRes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_xRes), HK_NULL },
	{ "zRes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_zRes), HK_NULL },
	{ "heightCenter", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_heightCenter), HK_NULL },
	{ "useProjectionBasedHeight", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_useProjectionBasedHeight), HK_NULL },
	{ "heightfieldType", HK_NULL, hkpSampledHeightFieldShapeHeightFieldTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_heightfieldType), HK_NULL },
	{ "intToFloatScale", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_intToFloatScale), HK_NULL },
	{ "floatToIntScale", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_floatToIntScale), HK_NULL },
	{ "floatToIntOffsetFloorCorrected", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_floatToIntOffsetFloorCorrected), HK_NULL },
	{ "extents", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSampledHeightFieldShape,m_extents), HK_NULL }
};
namespace
{
	struct hkpSampledHeightFieldShape_DefaultStruct
	{
		int s_defaultOffsets[13];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpSampledHeightFieldShape::HeightFieldType, hkUint8 > */ m_heightfieldType;
	};
	const hkpSampledHeightFieldShape_DefaultStruct hkpSampledHeightFieldShape_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,HK_OFFSET_OF(hkpSampledHeightFieldShape_DefaultStruct,m_heightfieldType),-1,-1,-1,-1},
		hkpSampledHeightFieldShape::HEIGHTFIELD_USER
	};
}
extern const hkClass hkpSampledHeightFieldShapeClass;
const hkClass hkpSampledHeightFieldShapeClass(
	"hkpSampledHeightFieldShape",
	&hkpHeightFieldShapeClass, // parent
	sizeof(::hkpSampledHeightFieldShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpSampledHeightFieldShapeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpSampledHeightFieldShapeClass_Members),
	HK_COUNT_OF(hkpSampledHeightFieldShapeClass_Members),
	&hkpSampledHeightFieldShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpSampledHeightFieldShape::staticClass()
{
	return hkpSampledHeightFieldShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpSampledHeightFieldShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpSampledHeightFieldShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpSampledHeightFieldShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpSampledHeightFieldShape(void* p)
{
	static_cast<hkpSampledHeightFieldShape*>(p)->~hkpSampledHeightFieldShape();
}
static const void* HK_CALL getVtablehkpSampledHeightFieldShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpSampledHeightFieldShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpSampledHeightFieldShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpSampledHeightFieldShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpSampledHeightFieldShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpSampledHeightFieldShapeTypeInfo;
const hkTypeInfo hkpSampledHeightFieldShapeTypeInfo(
	"hkpSampledHeightFieldShape",
	"!hkpSampledHeightFieldShape",
	finishLoadedObjecthkpSampledHeightFieldShape,
	cleanupLoadedObjecthkpSampledHeightFieldShape,
	getVtablehkpSampledHeightFieldShape(),
	sizeof(hkpSampledHeightFieldShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
