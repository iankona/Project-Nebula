/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/Compound/Tree/hkpBvTreeShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/Compound/Tree/hkpBvTreeShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* hkpBvTreeShapeBvTreeTypeEnum;

//
// Enum hkpBvTreeShape::BvTreeType
//
static const hkInternalClassEnumItem hkpBvTreeShapeBvTreeTypeEnumItems[] =
{
	{0, "BVTREE_MOPP"},
	{1, "BVTREE_TRISAMPLED_HEIGHTFIELD"},
	{2, "BVTREE_STATIC_COMPOUND"},
	{3, "BVTREE_COMPRESSED_MESH"},
	{4, "BVTREE_USER"},
	{5, "BVTREE_MAX"},
};
static const hkInternalClassEnum hkpBvTreeShapeEnums[] = {
	{"BvTreeType", hkpBvTreeShapeBvTreeTypeEnumItems, 6, HK_NULL, 0 }
};
const hkClassEnum* hkpBvTreeShapeBvTreeTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpBvTreeShapeEnums[0]);

//
// Class hkpBvTreeShape
//
extern const hkClass hkpShapeClass;

static const hkInternalClassMember hkpBvTreeShapeClass_Members[] =
{
	{ "bvTreeType", HK_NULL, hkpBvTreeShapeBvTreeTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpBvTreeShape,m_bvTreeType), HK_NULL }
};
namespace
{
	struct hkpBvTreeShape_DefaultStruct
	{
		int s_defaultOffsets[1];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkUint8 /* hkEnum< enum hkpBvTreeShape::BvTreeType, hkUint8 > */ m_bvTreeType;
	};
	const hkpBvTreeShape_DefaultStruct hkpBvTreeShape_Default =
	{
		{HK_OFFSET_OF(hkpBvTreeShape_DefaultStruct,m_bvTreeType)},
		hkpBvTreeShape::BVTREE_USER
	};
}
extern const hkClass hkpBvTreeShapeClass;
const hkClass hkpBvTreeShapeClass(
	"hkpBvTreeShape",
	&hkpShapeClass, // parent
	sizeof(::hkpBvTreeShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpBvTreeShapeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpBvTreeShapeClass_Members),
	HK_COUNT_OF(hkpBvTreeShapeClass_Members),
	&hkpBvTreeShape_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpBvTreeShape::staticClass()
{
	return hkpBvTreeShapeClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
