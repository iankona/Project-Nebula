/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Collide/Shape/Compound/Collection/List/hkpListShape.h'
#include <Physics2012/Collide/hkpCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Collide/Shape/Compound/Collection/List/hkpListShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpListShapeChildInfoClass;
extern const hkClass hkpShapeClass;

//
// Enum hkpListShape::ListShapeFlags
//
static const hkInternalClassEnumItem hkpListShapeListShapeFlagsEnumItems[] =
{
	{0, "ALL_FLAGS_CLEAR"},
	{1, "DISABLE_SPU_CACHE_FOR_LIST_CHILD_INFO"},
};
static const hkInternalClassEnum hkpListShapeEnums[] = {
	{"ListShapeFlags", hkpListShapeListShapeFlagsEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkpListShapeListShapeFlagsEnum = reinterpret_cast<const hkClassEnum*>(&hkpListShapeEnums[0]);

//
// Class hkpListShape::ChildInfo
//
static const hkInternalClassMember hkpListShape_ChildInfoClass_Members[] =
{
	{ "shape", &hkpShapeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0|hkClassMember::ALIGN_16, HK_OFFSET_OF(hkpListShape::ChildInfo,m_shape), HK_NULL },
	{ "collisionFilterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape::ChildInfo,m_collisionFilterInfo), HK_NULL },
	{ "shapeInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape::ChildInfo,m_shapeInfo), HK_NULL },
	{ "shapeSize", HK_NULL, HK_NULL, hkClassMember::TYPE_INT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpListShape::ChildInfo,m_shapeSize), HK_NULL },
	{ "numChildShapes", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpListShape::ChildInfo,m_numChildShapes), HK_NULL }
};
const hkClass hkpListShapeChildInfoClass(
	"hkpListShapeChildInfo",
	HK_NULL, // parent
	sizeof(hkpListShape::ChildInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpListShape_ChildInfoClass_Members),
	HK_COUNT_OF(hkpListShape_ChildInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpListShape::ChildInfo::staticClass()
{
	return hkpListShapeChildInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpListShape::ChildInfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpListShapeChildInfo(void* p)
{
	static_cast<hkpListShape::ChildInfo*>(p)->~ChildInfo();
}
extern const hkTypeInfo hkpListShapeChildInfoTypeInfo;
const hkTypeInfo hkpListShapeChildInfoTypeInfo(
	"hkpListShapeChildInfo",
	"!hkpListShape::ChildInfo",
	HK_NULL,
	cleanupLoadedObjecthkpListShapeChildInfo,
	HK_NULL,
	sizeof(hkpListShape::ChildInfo)
	);
#endif

//
// Class hkpListShape
//
extern const hkClass hkpShapeCollectionClass;

static const hkInternalClassMember hkpListShapeClass_Members[] =
{
	{ "childInfo", &hkpListShapeChildInfoClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpListShape,m_childInfo), HK_NULL },
	{ "flags", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape,m_flags), HK_NULL },
	{ "numDisabledChildren", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape,m_numDisabledChildren), HK_NULL },
	{ "aabbHalfExtents", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape,m_aabbHalfExtents), HK_NULL },
	{ "aabbCenter", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpListShape,m_aabbCenter), HK_NULL },
	{ "enabledChildren", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 8, 0, HK_OFFSET_OF(hkpListShape,m_enabledChildren), HK_NULL }
};
extern const hkClass hkpListShapeClass;
const hkClass hkpListShapeClass(
	"hkpListShape",
	&hkpShapeCollectionClass, // parent
	sizeof(::hkpListShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpListShapeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpListShapeClass_Members),
	HK_COUNT_OF(hkpListShapeClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpListShape::staticClass()
{
	return hkpListShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpListShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpListShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpListShape(f);
}
static void HK_CALL cleanupLoadedObjecthkpListShape(void* p)
{
	static_cast<hkpListShape*>(p)->~hkpListShape();
}
static const void* HK_CALL getVtablehkpListShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpListShape).hash_code()));
	#else
	return ((const void*)(typeid(hkpListShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpListShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpListShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpListShapeTypeInfo;
const hkTypeInfo hkpListShapeTypeInfo(
	"hkpListShape",
	"!hkpListShape",
	finishLoadedObjecthkpListShape,
	cleanupLoadedObjecthkpListShape,
	getVtablehkpListShape(),
	sizeof(hkpListShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
