/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Vehicle/hkpVehicleInstance.h'
#include <Physics2012/Vehicle/hkpVehicle.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Vehicle/hkpVehicleInstance.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkBoolClass;
extern const hkClass hkContactPointClass;
extern const hkClass hkpRigidBodyClass;
extern const hkClass hkpTyremarksInfoClass;
extern const hkClass hkpVehicleAerodynamicsClass;
extern const hkClass hkpVehicleBrakeClass;
extern const hkClass hkpVehicleDataClass;
extern const hkClass hkpVehicleDriverInputClass;
extern const hkClass hkpVehicleDriverInputStatusClass;
extern const hkClass hkpVehicleEngineClass;
extern const hkClass hkpVehicleInstanceWheelInfoClass;
extern const hkClass hkpVehicleSimulationClass;
extern const hkClass hkpVehicleSteeringClass;
extern const hkClass hkpVehicleSuspensionClass;
extern const hkClass hkpVehicleTransmissionClass;
extern const hkClass hkpVehicleVelocityDamperClass;
extern const hkClass hkpVehicleWheelCollideClass;

//
// Class hkpVehicleInstance::WheelInfo
//
static const hkInternalClassMember hkpVehicleInstance_WheelInfoClass_Members[] =
{
	{ "contactPoint", &hkContactPointClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_contactPoint), HK_NULL },
	{ "contactFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_contactFriction), HK_NULL },
	{ "contactBody", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_contactBody), HK_NULL },
	{ "contactShapeKey", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 8, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_contactShapeKey), HK_NULL },
	{ "hardPointWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_hardPointWs), HK_NULL },
	{ "rayEndPointWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_rayEndPointWs), HK_NULL },
	{ "currentSuspensionLength", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_currentSuspensionLength), HK_NULL },
	{ "suspensionDirectionWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_suspensionDirectionWs), HK_NULL },
	{ "spinAxisChassisSpace", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_spinAxisChassisSpace), HK_NULL },
	{ "spinAxisWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_spinAxisWs), HK_NULL },
	{ "steeringOrientationChassisSpace", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_steeringOrientationChassisSpace), HK_NULL },
	{ "spinVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_spinVelocity), HK_NULL },
	{ "noSlipIdealSpinVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_noSlipIdealSpinVelocity), HK_NULL },
	{ "spinAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_spinAngle), HK_NULL },
	{ "skidEnergyDensity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_skidEnergyDensity), HK_NULL },
	{ "sideForce", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_sideForce), HK_NULL },
	{ "forwardSlipVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_forwardSlipVelocity), HK_NULL },
	{ "sideSlipVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance::WheelInfo,m_sideSlipVelocity), HK_NULL }
};
const hkClass hkpVehicleInstanceWheelInfoClass(
	"hkpVehicleInstanceWheelInfo",
	HK_NULL, // parent
	sizeof(hkpVehicleInstance::WheelInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleInstance_WheelInfoClass_Members),
	HK_COUNT_OF(hkpVehicleInstance_WheelInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleInstance::WheelInfo::staticClass()
{
	return hkpVehicleInstanceWheelInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleInstance::WheelInfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpVehicleInstanceWheelInfo(void* p)
{
	static_cast<hkpVehicleInstance::WheelInfo*>(p)->~WheelInfo();
}
extern const hkTypeInfo hkpVehicleInstanceWheelInfoTypeInfo;
const hkTypeInfo hkpVehicleInstanceWheelInfoTypeInfo(
	"hkpVehicleInstanceWheelInfo",
	"!hkpVehicleInstance::WheelInfo",
	HK_NULL,
	cleanupLoadedObjecthkpVehicleInstanceWheelInfo,
	HK_NULL,
	sizeof(hkpVehicleInstance::WheelInfo)
	);
#endif

//
// Class hkpVehicleInstance
//
extern const hkClass hkpUnaryActionClass;

static const hkInternalClassMember hkpVehicleInstanceClass_Members[] =
{
	{ "data", &hkpVehicleDataClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_data), HK_NULL },
	{ "driverInput", &hkpVehicleDriverInputClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_driverInput), HK_NULL },
	{ "steering", &hkpVehicleSteeringClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_steering), HK_NULL },
	{ "engine", &hkpVehicleEngineClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_engine), HK_NULL },
	{ "transmission", &hkpVehicleTransmissionClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_transmission), HK_NULL },
	{ "brake", &hkpVehicleBrakeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_brake), HK_NULL },
	{ "suspension", &hkpVehicleSuspensionClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_suspension), HK_NULL },
	{ "aerodynamics", &hkpVehicleAerodynamicsClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_aerodynamics), HK_NULL },
	{ "wheelCollide", &hkpVehicleWheelCollideClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_wheelCollide), HK_NULL },
	{ "tyreMarks", &hkpTyremarksInfoClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_tyreMarks), HK_NULL },
	{ "velocityDamper", &hkpVehicleVelocityDamperClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_velocityDamper), HK_NULL },
	{ "vehicleSimulation", &hkpVehicleSimulationClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_vehicleSimulation), HK_NULL },
	{ "wheelsInfo", &hkpVehicleInstanceWheelInfoClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_wheelsInfo), HK_NULL },
	{ "deviceStatus", &hkpVehicleDriverInputStatusClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_deviceStatus), HK_NULL },
	{ "isFixed", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_BOOL, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_isFixed), HK_NULL },
	{ "wheelsTimeSinceMaxPedalInput", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_wheelsTimeSinceMaxPedalInput), HK_NULL },
	{ "tryingToReverse", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_tryingToReverse), HK_NULL },
	{ "torque", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_torque), HK_NULL },
	{ "rpm", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_rpm), HK_NULL },
	{ "mainSteeringAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_mainSteeringAngle), HK_NULL },
	{ "mainSteeringAngleAssumingNoReduction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_mainSteeringAngleAssumingNoReduction), HK_NULL },
	{ "wheelsSteeringAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_REAL, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_wheelsSteeringAngle), HK_NULL },
	{ "isReversing", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_isReversing), HK_NULL },
	{ "currentGear", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_currentGear), HK_NULL },
	{ "delayed", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_delayed), HK_NULL },
	{ "clutchDelayCountdown", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleInstance,m_clutchDelayCountdown), HK_NULL }
};
namespace
{
	struct hkpVehicleInstance_DefaultStruct
	{
		int s_defaultOffsets[26];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpVehicleInstance_DefaultStruct hkpVehicleInstance_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		
	};
}
extern const hkClass hkpVehicleInstanceClass;
const hkClass hkpVehicleInstanceClass(
	"hkpVehicleInstance",
	&hkpUnaryActionClass, // parent
	sizeof(::hkpVehicleInstance),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleInstanceClass_Members),
	HK_COUNT_OF(hkpVehicleInstanceClass_Members),
	&hkpVehicleInstance_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleInstance::staticClass()
{
	return hkpVehicleInstanceClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleInstance*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehicleInstance(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehicleInstance(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehicleInstance(void* p)
{
	static_cast<hkpVehicleInstance*>(p)->~hkpVehicleInstance();
}
static const void* HK_CALL getVtablehkpVehicleInstance()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpVehicleInstance).hash_code()));
	#else
	return ((const void*)(typeid(hkpVehicleInstance).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpVehicleInstance)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpVehicleInstance(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpVehicleInstanceTypeInfo;
const hkTypeInfo hkpVehicleInstanceTypeInfo(
	"hkpVehicleInstance",
	"!hkpVehicleInstance",
	finishLoadedObjecthkpVehicleInstance,
	cleanupLoadedObjecthkpVehicleInstance,
	getVtablehkpVehicleInstance(),
	sizeof(hkpVehicleInstance)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
