/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Vehicle/Simulation/PerWheel/hkpVehiclePerWheelSimulation.h'
#include <Physics2012/Vehicle/hkpVehicle.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Vehicle/Simulation/PerWheel/hkpVehiclePerWheelSimulation.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpConstraintInstanceClass;
extern const hkClass hkpVehicleInstanceClass;
extern const hkClass hkpVehiclePerWheelSimulationWheelDataClass;
extern const hkClass hkpWheelFrictionConstraintAtomAxleClass;
extern const hkClass hkpWheelFrictionConstraintDataClass;
extern const hkClass hkpWorldClass;

//
// Class hkpVehiclePerWheelSimulation::WheelData
//
static const hkInternalClassMember hkpVehiclePerWheelSimulation_WheelDataClass_Members[] =
{
	{ "axle", &hkpWheelFrictionConstraintAtomAxleClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_axle), HK_NULL },
	{ "frictionData", &hkpWheelFrictionConstraintDataClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_frictionData), HK_NULL },
	{ "frictionConstraint", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_frictionConstraint), HK_NULL },
	{ "forwardDirectionWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_forwardDirectionWs), HK_NULL },
	{ "sideDirectionWs", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_sideDirectionWs), HK_NULL },
	{ "contactLocal", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation::WheelData,m_contactLocal), HK_NULL }
};
const hkClass hkpVehiclePerWheelSimulationWheelDataClass(
	"hkpVehiclePerWheelSimulationWheelData",
	HK_NULL, // parent
	sizeof(hkpVehiclePerWheelSimulation::WheelData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehiclePerWheelSimulation_WheelDataClass_Members),
	HK_COUNT_OF(hkpVehiclePerWheelSimulation_WheelDataClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehiclePerWheelSimulation::WheelData::staticClass()
{
	return hkpVehiclePerWheelSimulationWheelDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehiclePerWheelSimulation::WheelData*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehiclePerWheelSimulationWheelData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehiclePerWheelSimulation::WheelData(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehiclePerWheelSimulationWheelData(void* p)
{
	static_cast<hkpVehiclePerWheelSimulation::WheelData*>(p)->~WheelData();
}
extern const hkTypeInfo hkpVehiclePerWheelSimulationWheelDataTypeInfo;
const hkTypeInfo hkpVehiclePerWheelSimulationWheelDataTypeInfo(
	"hkpVehiclePerWheelSimulationWheelData",
	"!hkpVehiclePerWheelSimulation::WheelData",
	finishLoadedObjecthkpVehiclePerWheelSimulationWheelData,
	cleanupLoadedObjecthkpVehiclePerWheelSimulationWheelData,
	HK_NULL,
	sizeof(hkpVehiclePerWheelSimulation::WheelData)
	);
#endif

//
// Class hkpVehiclePerWheelSimulation
//
extern const hkClass hkpVehicleSimulationClass;

static const hkInternalClassMember hkpVehiclePerWheelSimulationClass_Members[] =
{
	{ "instance", &hkpVehicleInstanceClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_instance), HK_NULL },
	{ "world", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_world), HK_NULL },
	{ "slipDamping", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_slipDamping), HK_NULL },
	{ "impulseScaling", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_impulseScaling), HK_NULL },
	{ "maxImpulse", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_maxImpulse), HK_NULL },
	{ "takeDynamicVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_takeDynamicVelocity), HK_NULL },
	{ "curbDamping", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_curbDamping), HK_NULL },
	{ "wheelData", &hkpVehiclePerWheelSimulationWheelDataClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpVehiclePerWheelSimulation,m_wheelData), HK_NULL }
};
extern const hkClass hkpVehiclePerWheelSimulationClass;
const hkClass hkpVehiclePerWheelSimulationClass(
	"hkpVehiclePerWheelSimulation",
	&hkpVehicleSimulationClass, // parent
	sizeof(::hkpVehiclePerWheelSimulation),
	HK_NULL,
	1, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehiclePerWheelSimulationClass_Members),
	HK_COUNT_OF(hkpVehiclePerWheelSimulationClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehiclePerWheelSimulation::staticClass()
{
	return hkpVehiclePerWheelSimulationClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehiclePerWheelSimulation*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehiclePerWheelSimulation(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehiclePerWheelSimulation(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehiclePerWheelSimulation(void* p)
{
	static_cast<hkpVehiclePerWheelSimulation*>(p)->~hkpVehiclePerWheelSimulation();
}
static const void* HK_CALL getVtablehkpVehiclePerWheelSimulation()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpVehiclePerWheelSimulation).hash_code()));
	#else
	return ((const void*)(typeid(hkpVehiclePerWheelSimulation).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpVehiclePerWheelSimulation)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpVehiclePerWheelSimulation(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpVehiclePerWheelSimulationTypeInfo;
const hkTypeInfo hkpVehiclePerWheelSimulationTypeInfo(
	"hkpVehiclePerWheelSimulation",
	"!hkpVehiclePerWheelSimulation",
	finishLoadedObjecthkpVehiclePerWheelSimulation,
	cleanupLoadedObjecthkpVehiclePerWheelSimulation,
	getVtablehkpVehiclePerWheelSimulation(),
	sizeof(hkpVehiclePerWheelSimulation)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
