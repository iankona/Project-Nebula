/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Vehicle/TyreMarks/hkpTyremarksInfo.h'
#include <Physics2012/Vehicle/hkpVehicle.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Vehicle/TyreMarks/hkpTyremarksInfo.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpTyremarkPointClass;
extern const hkClass hkpTyremarksWheelClass;

//
// Class hkpTyremarkPoint
//
static const hkInternalClassMember hkpTyremarkPointClass_Members[] =
{
	{ "pointLeft", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarkPoint,m_pointLeft), HK_NULL },
	{ "pointRight", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarkPoint,m_pointRight), HK_NULL }
};
const hkClass hkpTyremarkPointClass(
	"hkpTyremarkPoint",
	HK_NULL, // parent
	sizeof(::hkpTyremarkPoint),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpTyremarkPointClass_Members),
	HK_COUNT_OF(hkpTyremarkPointClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpTyremarkPoint::staticClass()
{
	return hkpTyremarkPointClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpTyremarkPoint*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpTyremarkPoint(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpTyremarkPoint(f);
}
static void HK_CALL cleanupLoadedObjecthkpTyremarkPoint(void* p)
{
	static_cast<hkpTyremarkPoint*>(p)->~hkpTyremarkPoint();
}
extern const hkTypeInfo hkpTyremarkPointTypeInfo;
const hkTypeInfo hkpTyremarkPointTypeInfo(
	"hkpTyremarkPoint",
	"!hkpTyremarkPoint",
	finishLoadedObjecthkpTyremarkPoint,
	cleanupLoadedObjecthkpTyremarkPoint,
	HK_NULL,
	sizeof(hkpTyremarkPoint)
	);
#endif

//
// Class hkpTyremarksWheel
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkpTyremarksWheelClass_Members[] =
{
	{ "currentPosition", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarksWheel,m_currentPosition), HK_NULL },
	{ "numPoints", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarksWheel,m_numPoints), HK_NULL },
	{ "tyremarkPoints", &hkpTyremarkPointClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpTyremarksWheel,m_tyremarkPoints), HK_NULL }
};
const hkClass hkpTyremarksWheelClass(
	"hkpTyremarksWheel",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpTyremarksWheel),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpTyremarksWheelClass_Members),
	HK_COUNT_OF(hkpTyremarksWheelClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpTyremarksWheel::staticClass()
{
	return hkpTyremarksWheelClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpTyremarksWheel*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpTyremarksWheel(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpTyremarksWheel(f);
}
static void HK_CALL cleanupLoadedObjecthkpTyremarksWheel(void* p)
{
	static_cast<hkpTyremarksWheel*>(p)->~hkpTyremarksWheel();
}
static const void* HK_CALL getVtablehkpTyremarksWheel()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpTyremarksWheel).hash_code()));
	#else
	return ((const void*)(typeid(hkpTyremarksWheel).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpTyremarksWheel)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpTyremarksWheel(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpTyremarksWheelTypeInfo;
const hkTypeInfo hkpTyremarksWheelTypeInfo(
	"hkpTyremarksWheel",
	"!hkpTyremarksWheel",
	finishLoadedObjecthkpTyremarksWheel,
	cleanupLoadedObjecthkpTyremarksWheel,
	getVtablehkpTyremarksWheel(),
	sizeof(hkpTyremarksWheel)
	);
#endif

//
// Class hkpTyremarksInfo
//

static const hkInternalClassMember hkpTyremarksInfoClass_Members[] =
{
	{ "minTyremarkEnergy", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarksInfo,m_minTyremarkEnergy), HK_NULL },
	{ "maxTyremarkEnergy", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTyremarksInfo,m_maxTyremarkEnergy), HK_NULL },
	{ "tyremarksWheel", &hkpTyremarksWheelClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpTyremarksInfo,m_tyremarksWheel), HK_NULL }
};
extern const hkClass hkpTyremarksInfoClass;
const hkClass hkpTyremarksInfoClass(
	"hkpTyremarksInfo",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpTyremarksInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpTyremarksInfoClass_Members),
	HK_COUNT_OF(hkpTyremarksInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpTyremarksInfo::staticClass()
{
	return hkpTyremarksInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpTyremarksInfo*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpTyremarksInfo(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpTyremarksInfo(f);
}
static void HK_CALL cleanupLoadedObjecthkpTyremarksInfo(void* p)
{
	static_cast<hkpTyremarksInfo*>(p)->~hkpTyremarksInfo();
}
static const void* HK_CALL getVtablehkpTyremarksInfo()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpTyremarksInfo).hash_code()));
	#else
	return ((const void*)(typeid(hkpTyremarksInfo).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpTyremarksInfo)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpTyremarksInfo(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpTyremarksInfoTypeInfo;
const hkTypeInfo hkpTyremarksInfoTypeInfo(
	"hkpTyremarksInfo",
	"!hkpTyremarksInfo",
	finishLoadedObjecthkpTyremarksInfo,
	cleanupLoadedObjecthkpTyremarksInfo,
	getVtablehkpTyremarksInfo(),
	sizeof(hkpTyremarksInfo)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
