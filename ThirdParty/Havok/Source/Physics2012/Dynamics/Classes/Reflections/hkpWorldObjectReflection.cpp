/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/World/hkpWorldObject.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/World/hkpWorldObject.h>
#define True true
#define False false

//
// Global
//

//
// Enum hkWorldOperation::Result
//
static const hkInternalClassEnumItem Physics2012_Dynamics_World_hkpWorldObjectResultEnumItems[] =
{
	{0, "POSTPONED"},
	{1, "DONE"},
};
static const hkInternalClassEnum Physics2012_Dynamics_World_hkpWorldObjectEnums[] = {
	{"Result", Physics2012_Dynamics_World_hkpWorldObjectResultEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkWorldOperationResultEnum = reinterpret_cast<const hkClassEnum*>(&Physics2012_Dynamics_World_hkpWorldObjectEnums[0]);

// External pointer and enum types
extern const hkClass hkMultiThreadCheckClass;
extern const hkClass hkSimplePropertyClass;
extern const hkClass hkpLinkedCollidableClass;
extern const hkClass hkpWorldClass;

//
// Enum hkpWorldObject::MtChecks
//
static const hkInternalClassEnumItem hkpWorldObjectMtChecksEnumItems[] =
{
	{0, "MULTI_THREADING_CHECKS_ENABLE"},
	{1, "MULTI_THREADING_CHECKS_IGNORE"},
};

//
// Enum hkpWorldObject::BroadPhaseType
//
static const hkInternalClassEnumItem hkpWorldObjectBroadPhaseTypeEnumItems[] =
{
	{0, "BROAD_PHASE_INVALID"},
	{1, "BROAD_PHASE_ENTITY"},
	{2, "BROAD_PHASE_PHANTOM"},
	{3, "BROAD_PHASE_BORDER"},
	{4, "BROAD_PHASE_MAX_ID"},
};
static const hkInternalClassEnum hkpWorldObjectEnums[] = {
	{"MtChecks", hkpWorldObjectMtChecksEnumItems, 2, HK_NULL, 0 },
	{"BroadPhaseType", hkpWorldObjectBroadPhaseTypeEnumItems, 5, HK_NULL, 0 }
};
const hkClassEnum* hkpWorldObjectMtChecksEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldObjectEnums[0]);
const hkClassEnum* hkpWorldObjectBroadPhaseTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldObjectEnums[1]);

//
// Class hkpWorldObject
//
extern const hkClass hkReferencedObjectClass;

const hkInternalClassMember hkpWorldObject::Members[] =
{
	{ "world", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpWorldObject,m_world), HK_NULL },
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_ULONG, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldObject,m_userData), HK_NULL },
	{ "collidable", &hkpLinkedCollidableClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldObject,m_collidable), HK_NULL },
	{ "multiThreadCheck", &hkMultiThreadCheckClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldObject,m_multiThreadCheck), HK_NULL },
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldObject,m_name), HK_NULL },
	{ "properties", &hkSimplePropertyClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpWorldObject,m_properties), HK_NULL }
};
namespace
{
	struct hkpWorldObject_DefaultStruct
	{
		int s_defaultOffsets[6];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpWorldObject_DefaultStruct hkpWorldObject_Default =
	{
		{-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1,-1,-1},
		
	};
}
extern const hkClass hkpWorldObjectClass;
const hkClass hkpWorldObjectClass(
	"hkpWorldObject",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpWorldObject),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpWorldObjectEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hkpWorldObject::Members),
	HK_COUNT_OF(hkpWorldObject::Members),
	&hkpWorldObject_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpWorldObject::staticClass()
{
	return hkpWorldObjectClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
