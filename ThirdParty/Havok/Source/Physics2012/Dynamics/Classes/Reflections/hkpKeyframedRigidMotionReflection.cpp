/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/Motion/Rigid/hkpKeyframedRigidMotion.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/Motion/Rigid/hkpKeyframedRigidMotion.h>
#define True true
#define False false


//
// Class hkpKeyframedRigidMotion
//
extern const hkClass hkpMotionClass;

extern const hkClass hkpKeyframedRigidMotionClass;
const hkClass hkpKeyframedRigidMotionClass(
	"hkpKeyframedRigidMotion",
	&hkpMotionClass, // parent
	sizeof(::hkpKeyframedRigidMotion),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpKeyframedRigidMotion::staticClass()
{
	return hkpKeyframedRigidMotionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpKeyframedRigidMotion*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpKeyframedRigidMotion(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpKeyframedRigidMotion(f);
}
static void HK_CALL cleanupLoadedObjecthkpKeyframedRigidMotion(void* p)
{
	static_cast<hkpKeyframedRigidMotion*>(p)->~hkpKeyframedRigidMotion();
}
static const void* HK_CALL getVtablehkpKeyframedRigidMotion()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpKeyframedRigidMotion).hash_code()));
	#else
	return ((const void*)(typeid(hkpKeyframedRigidMotion).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpKeyframedRigidMotion)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpKeyframedRigidMotion(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpKeyframedRigidMotionTypeInfo;
const hkTypeInfo hkpKeyframedRigidMotionTypeInfo(
	"hkpKeyframedRigidMotion",
	"!hkpKeyframedRigidMotion",
	finishLoadedObjecthkpKeyframedRigidMotion,
	cleanupLoadedObjecthkpKeyframedRigidMotion,
	getVtablehkpKeyframedRigidMotion(),
	sizeof(hkpKeyframedRigidMotion)
	);
#endif

//
// Class hkpMaxSizeMotion
//

extern const hkClass hkpMaxSizeMotionClass;
const hkClass hkpMaxSizeMotionClass(
	"hkpMaxSizeMotion",
	&hkpKeyframedRigidMotionClass, // parent
	sizeof(::hkpMaxSizeMotion),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMaxSizeMotion::staticClass()
{
	return hkpMaxSizeMotionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpMaxSizeMotion*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpMaxSizeMotion(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpMaxSizeMotion(f);
}
static void HK_CALL cleanupLoadedObjecthkpMaxSizeMotion(void* p)
{
	static_cast<hkpMaxSizeMotion*>(p)->~hkpMaxSizeMotion();
}
static const void* HK_CALL getVtablehkpMaxSizeMotion()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpMaxSizeMotion).hash_code()));
	#else
	return ((const void*)(typeid(hkpMaxSizeMotion).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpMaxSizeMotion)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpMaxSizeMotion(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpMaxSizeMotionTypeInfo;
const hkTypeInfo hkpMaxSizeMotionTypeInfo(
	"hkpMaxSizeMotion",
	"!hkpMaxSizeMotion",
	finishLoadedObjecthkpMaxSizeMotion,
	cleanupLoadedObjecthkpMaxSizeMotion,
	getVtablehkpMaxSizeMotion(),
	sizeof(hkpMaxSizeMotion)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
