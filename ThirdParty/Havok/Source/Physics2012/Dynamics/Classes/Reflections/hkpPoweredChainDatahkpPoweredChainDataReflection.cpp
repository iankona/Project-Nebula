/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/Constraint/Chain/Powered/hkpPoweredChainData.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/Constraint/Chain/Powered/hkpPoweredChainData.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpBridgeAtomsClass;
extern const hkClass hkpConstraintMotorClass;
extern const hkClass hkpPoweredChainDataConstraintInfoClass;

//
// Class hkpPoweredChainData::ConstraintInfo
//
static const hkInternalClassMember hkpPoweredChainData_ConstraintInfoClass_Members[] =
{
	{ "pivotInA", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_pivotInA), HK_NULL },
	{ "pivotInB", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_pivotInB), HK_NULL },
	{ "aTc", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_aTc), HK_NULL },
	{ "bTc", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_bTc), HK_NULL },
	{ "motors", &hkpConstraintMotorClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 3, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_motors), HK_NULL },
	{ "switchBodies", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData::ConstraintInfo,m_switchBodies), HK_NULL }
};
const hkClass hkpPoweredChainDataConstraintInfoClass(
	"hkpPoweredChainDataConstraintInfo",
	HK_NULL, // parent
	sizeof(hkpPoweredChainData::ConstraintInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpPoweredChainData_ConstraintInfoClass_Members),
	HK_COUNT_OF(hkpPoweredChainData_ConstraintInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpPoweredChainData::ConstraintInfo::staticClass()
{
	return hkpPoweredChainDataConstraintInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpPoweredChainData::ConstraintInfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpPoweredChainDataConstraintInfo(void* p)
{
	static_cast<hkpPoweredChainData::ConstraintInfo*>(p)->~ConstraintInfo();
}
extern const hkTypeInfo hkpPoweredChainDataConstraintInfoTypeInfo;
const hkTypeInfo hkpPoweredChainDataConstraintInfoTypeInfo(
	"hkpPoweredChainDataConstraintInfo",
	"!hkpPoweredChainData::ConstraintInfo",
	HK_NULL,
	cleanupLoadedObjecthkpPoweredChainDataConstraintInfo,
	HK_NULL,
	sizeof(hkpPoweredChainData::ConstraintInfo)
	);
#endif

//
// Class hkpPoweredChainData
//
extern const hkClass hkpConstraintChainDataClass;

// hkpPoweredChainData attributes
static const hkInternalClassMember hkpPoweredChainDataClass_Members[] =
{
	{ "atoms", &hkpBridgeAtomsClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_atoms), HK_NULL },
	{ "infos", &hkpPoweredChainDataConstraintInfoClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_infos), HK_NULL },
	{ "tau", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_tau), HK_NULL },
	{ "damping", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_damping), HK_NULL },
	{ "cfmLinAdd", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_cfmLinAdd), HK_NULL },
	{ "cfmLinMul", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_cfmLinMul), HK_NULL },
	{ "cfmAngAdd", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_cfmAngAdd), HK_NULL },
	{ "cfmAngMul", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_cfmAngMul), HK_NULL },
	{ "maxErrorDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpPoweredChainData,m_maxErrorDistance), HK_NULL }
};
namespace
{
	struct hkpPoweredChainData_DefaultStruct
	{
		int s_defaultOffsets[9];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		float m_cfmLinAdd;
		float m_cfmLinMul;
		float m_cfmAngAdd;
		float m_cfmAngMul;
	};
	const hkpPoweredChainData_DefaultStruct hkpPoweredChainData_Default =
	{
		{-1,-1,-1,-1,HK_OFFSET_OF(hkpPoweredChainData_DefaultStruct,m_cfmLinAdd),HK_OFFSET_OF(hkpPoweredChainData_DefaultStruct,m_cfmLinMul),HK_OFFSET_OF(hkpPoweredChainData_DefaultStruct,m_cfmAngAdd),HK_OFFSET_OF(hkpPoweredChainData_DefaultStruct,m_cfmAngMul),-1},
		0.1f*1.19209290e-07f,1.0,0.1f*1.19209290e-07F,1.0
	};
}
extern const hkClass hkpPoweredChainDataClass;
const hkClass hkpPoweredChainDataClass(
	"hkpPoweredChainData",
	&hkpConstraintChainDataClass, // parent
	sizeof(::hkpPoweredChainData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpPoweredChainDataClass_Members),
	HK_COUNT_OF(hkpPoweredChainDataClass_Members),
	&hkpPoweredChainData_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpPoweredChainData::staticClass()
{
	return hkpPoweredChainDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpPoweredChainData*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpPoweredChainData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpPoweredChainData(f);
}
static void HK_CALL cleanupLoadedObjecthkpPoweredChainData(void* p)
{
	static_cast<hkpPoweredChainData*>(p)->~hkpPoweredChainData();
}
static const void* HK_CALL getVtablehkpPoweredChainData()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpPoweredChainData).hash_code()));
	#else
	return ((const void*)(typeid(hkpPoweredChainData).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpPoweredChainData)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpPoweredChainData(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpPoweredChainDataTypeInfo;
const hkTypeInfo hkpPoweredChainDataTypeInfo(
	"hkpPoweredChainData",
	"!hkpPoweredChainData",
	finishLoadedObjecthkpPoweredChainData,
	cleanupLoadedObjecthkpPoweredChainData,
	getVtablehkpPoweredChainData(),
	sizeof(hkpPoweredChainData)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
