/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/Motion/hkpMotion.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/Motion/hkpMotion.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkMotionStateClass;
extern const hkClass hkpMaxSizeMotionClass;
extern const hkClassEnum* hkpMotionMotionTypeEnum;

//
// Enum hkpMotion::MotionType
//
static const hkInternalClassEnumItem hkpMotionMotionTypeEnumItems[] =
{
	{0, "MOTION_INVALID"},
	{1, "MOTION_DYNAMIC"},
	{2, "MOTION_SPHERE_INERTIA"},
	{3, "MOTION_BOX_INERTIA"},
	{4, "MOTION_KEYFRAMED"},
	{5, "MOTION_FIXED"},
	{6, "MOTION_THIN_BOX_INERTIA"},
	{7, "MOTION_CHARACTER"},
	{8, "MOTION_MAX_ID"},
};
static const hkInternalClassEnum hkpMotionEnums[] = {
	{"MotionType", hkpMotionMotionTypeEnumItems, 9, HK_NULL, 0 }
};
const hkClassEnum* hkpMotionMotionTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpMotionEnums[0]);

//
// Class hkpMotion
//
extern const hkClass hkReferencedObjectClass;

// hkpMotion_savedMotion attributes
static const hkDataObjectTypeAttribute hkpMotion_savedMotion_hkDataObjectType = { "hkpMotion" };
static const hkInternalCustomAttributes::Attribute hkpMotion_savedMotion_AttributesList[] =
{
	{ "hk.DataObjectType", &hkpMotion_savedMotion_hkDataObjectType, &hkDataObjectTypeAttributeClass }
};
static const hkInternalCustomAttributes hkpMotion_savedMotion_Attributes = { hkpMotion_savedMotion_AttributesList, HK_COUNT_OF(hkpMotion_savedMotion_AttributesList) };
static const hkInternalClassMember hkpMotionClass_Members[] =
{
	{ "type", HK_NULL, hkpMotionMotionTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkpMotion,m_type), HK_NULL },
	{ "deactivationIntegrateCounter", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_deactivationIntegrateCounter), HK_NULL },
	{ "deactivationNumInactiveFrames", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hkpMotion,m_deactivationNumInactiveFrames), HK_NULL },
	{ "motionState", &hkMotionStateClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_motionState), HK_NULL },
	{ "inertiaAndMassInv", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_inertiaAndMassInv), HK_NULL },
	{ "linearVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_linearVelocity), HK_NULL },
	{ "angularVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_angularVelocity), HK_NULL },
	{ "deactivationRefPosition", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hkpMotion,m_deactivationRefPosition), HK_NULL },
	{ "deactivationRefOrientation", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hkpMotion,m_deactivationRefOrientation), HK_NULL },
	{ "savedMotion", &hkpMaxSizeMotionClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpMotion,m_savedMotion), &hkpMotion_savedMotion_Attributes },
	{ "savedQualityTypeIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_savedQualityTypeIndex), HK_NULL },
	{ "gravityFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMotion,m_gravityFactor), HK_NULL }
};
extern const hkClass hkpMotionClass;
const hkClass hkpMotionClass(
	"hkpMotion",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpMotion),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpMotionEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpMotionClass_Members),
	HK_COUNT_OF(hkpMotionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMotion::staticClass()
{
	return hkpMotionClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
