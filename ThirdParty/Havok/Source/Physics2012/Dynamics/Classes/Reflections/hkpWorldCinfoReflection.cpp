/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/World/hkpWorldCinfo.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/World/hkpWorldCinfo.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkAabbClass;
extern const hkClass hkWorldMemoryAvailableWatchDogClass;
extern const hkClass hkpCollisionFilterClass;
extern const hkClass hkpConvexListFilterClass;
extern const hkClassEnum* hkpWorldCinfoBroadPhaseBorderBehaviourEnum;
extern const hkClassEnum* hkpWorldCinfoBroadPhaseTypeEnum;
extern const hkClassEnum* hkpWorldCinfoContactPointGenerationEnum;
extern const hkClassEnum* hkpWorldCinfoSimulationTypeEnum;

//
// Enum hkpWorldCinfo::SolverType
//
static const hkInternalClassEnumItem hkpWorldCinfoSolverTypeEnumItems[] =
{
	{0, "SOLVER_TYPE_INVALID"},
	{1, "SOLVER_TYPE_2ITERS_SOFT"},
	{2, "SOLVER_TYPE_2ITERS_MEDIUM"},
	{3, "SOLVER_TYPE_2ITERS_HARD"},
	{4, "SOLVER_TYPE_4ITERS_SOFT"},
	{5, "SOLVER_TYPE_4ITERS_MEDIUM"},
	{6, "SOLVER_TYPE_4ITERS_HARD"},
	{7, "SOLVER_TYPE_8ITERS_SOFT"},
	{8, "SOLVER_TYPE_8ITERS_MEDIUM"},
	{9, "SOLVER_TYPE_8ITERS_HARD"},
	{10, "SOLVER_TYPE_MAX_ID"},
};

//
// Enum hkpWorldCinfo::SimulationType
//
static const hkInternalClassEnumItem hkpWorldCinfoSimulationTypeEnumItems[] =
{
	{0, "SIMULATION_TYPE_INVALID"},
	{1, "SIMULATION_TYPE_DISCRETE"},
	{2, "SIMULATION_TYPE_CONTINUOUS"},
	{3, "SIMULATION_TYPE_MULTITHREADED"},
};

//
// Enum hkpWorldCinfo::ContactPointGeneration
//
static const hkInternalClassEnumItem hkpWorldCinfoContactPointGenerationEnumItems[] =
{
	{0, "CONTACT_POINT_ACCEPT_ALWAYS"},
	{1, "CONTACT_POINT_REJECT_DUBIOUS"},
	{2, "CONTACT_POINT_REJECT_MANY"},
};

//
// Enum hkpWorldCinfo::BroadPhaseType
//
static const hkInternalClassEnumItem hkpWorldCinfoBroadPhaseTypeEnumItems[] =
{
	{0, "BROADPHASE_TYPE_SAP"},
	{1, "BROADPHASE_TYPE_TREE"},
	{2, "BROADPHASE_TYPE_HYBRID"},
};

//
// Enum hkpWorldCinfo::BroadPhaseBorderBehaviour
//
static const hkInternalClassEnumItem hkpWorldCinfoBroadPhaseBorderBehaviourEnumItems[] =
{
	{0, "BROADPHASE_BORDER_ASSERT"},
	{1, "BROADPHASE_BORDER_FIX_ENTITY"},
	{2, "BROADPHASE_BORDER_REMOVE_ENTITY"},
	{3, "BROADPHASE_BORDER_DO_NOTHING"},
};
static const hkInternalClassEnum hkpWorldCinfoEnums[] = {
	{"SolverType", hkpWorldCinfoSolverTypeEnumItems, 11, HK_NULL, 0 },
	{"SimulationType", hkpWorldCinfoSimulationTypeEnumItems, 4, HK_NULL, 0 },
	{"ContactPointGeneration", hkpWorldCinfoContactPointGenerationEnumItems, 3, HK_NULL, 0 },
	{"BroadPhaseType", hkpWorldCinfoBroadPhaseTypeEnumItems, 3, HK_NULL, 0 },
	{"BroadPhaseBorderBehaviour", hkpWorldCinfoBroadPhaseBorderBehaviourEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkpWorldCinfoSolverTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldCinfoEnums[0]);
const hkClassEnum* hkpWorldCinfoSimulationTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldCinfoEnums[1]);
const hkClassEnum* hkpWorldCinfoContactPointGenerationEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldCinfoEnums[2]);
const hkClassEnum* hkpWorldCinfoBroadPhaseTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldCinfoEnums[3]);
const hkClassEnum* hkpWorldCinfoBroadPhaseBorderBehaviourEnum = reinterpret_cast<const hkClassEnum*>(&hkpWorldCinfoEnums[4]);

//
// Class hkpWorldCinfo
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkpWorldCinfoClass_Members[] =
{
	{ "gravity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_gravity), HK_NULL },
	{ "broadPhaseQuerySize", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_broadPhaseQuerySize), HK_NULL },
	{ "contactRestingVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_contactRestingVelocity), HK_NULL },
	{ "broadPhaseType", HK_NULL, hkpWorldCinfoBroadPhaseTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_broadPhaseType), HK_NULL },
	{ "broadPhaseBorderBehaviour", HK_NULL, hkpWorldCinfoBroadPhaseBorderBehaviourEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_broadPhaseBorderBehaviour), HK_NULL },
	{ "mtPostponeAndSortBroadPhaseBorderCallbacks", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_mtPostponeAndSortBroadPhaseBorderCallbacks), HK_NULL },
	{ "broadPhaseWorldAabb", &hkAabbClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_broadPhaseWorldAabb), HK_NULL },
	{ "collisionTolerance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_collisionTolerance), HK_NULL },
	{ "collisionFilter", &hkpCollisionFilterClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_collisionFilter), HK_NULL },
	{ "convexListFilter", &hkpConvexListFilterClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_convexListFilter), HK_NULL },
	{ "expectedMaxLinearVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_expectedMaxLinearVelocity), HK_NULL },
	{ "sizeOfToiEventQueue", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_sizeOfToiEventQueue), HK_NULL },
	{ "expectedMinPsiDeltaTime", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_expectedMinPsiDeltaTime), HK_NULL },
	{ "memoryWatchDog", &hkWorldMemoryAvailableWatchDogClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_memoryWatchDog), HK_NULL },
	{ "broadPhaseNumMarkers", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_broadPhaseNumMarkers), HK_NULL },
	{ "contactPointGeneration", HK_NULL, hkpWorldCinfoContactPointGenerationEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_contactPointGeneration), HK_NULL },
	{ "allowToSkipConfirmedCallbacks", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_allowToSkipConfirmedCallbacks), HK_NULL },
	{ "solverTau", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_solverTau), HK_NULL },
	{ "solverDamp", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_solverDamp), HK_NULL },
	{ "solverIterations", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_solverIterations), HK_NULL },
	{ "solverMicrosteps", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_solverMicrosteps), HK_NULL },
	{ "maxConstraintViolation", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxConstraintViolation), HK_NULL },
	{ "forceCoherentConstraintOrderingInSolver", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_forceCoherentConstraintOrderingInSolver), HK_NULL },
	{ "snapCollisionToConvexEdgeThreshold", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_snapCollisionToConvexEdgeThreshold), HK_NULL },
	{ "snapCollisionToConcaveEdgeThreshold", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_snapCollisionToConcaveEdgeThreshold), HK_NULL },
	{ "enableToiWeldRejection", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_enableToiWeldRejection), HK_NULL },
	{ "enableDeprecatedWelding", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_enableDeprecatedWelding), HK_NULL },
	{ "iterativeLinearCastEarlyOutDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_iterativeLinearCastEarlyOutDistance), HK_NULL },
	{ "iterativeLinearCastMaxIterations", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_iterativeLinearCastMaxIterations), HK_NULL },
	{ "deactivationNumInactiveFramesSelectFlag0", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_deactivationNumInactiveFramesSelectFlag0), HK_NULL },
	{ "deactivationNumInactiveFramesSelectFlag1", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_deactivationNumInactiveFramesSelectFlag1), HK_NULL },
	{ "deactivationIntegrateCounter", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_deactivationIntegrateCounter), HK_NULL },
	{ "shouldActivateOnRigidBodyTransformChange", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_shouldActivateOnRigidBodyTransformChange), HK_NULL },
	{ "deactivationReferenceDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_deactivationReferenceDistance), HK_NULL },
	{ "toiCollisionResponseRotateNormal", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_toiCollisionResponseRotateNormal), HK_NULL },
	{ "useCompoundSpuElf", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_useCompoundSpuElf), HK_NULL },
	{ "maxSectorsPerMidphaseCollideTask", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxSectorsPerMidphaseCollideTask), HK_NULL },
	{ "maxSectorsPerNarrowphaseCollideTask", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxSectorsPerNarrowphaseCollideTask), HK_NULL },
	{ "processToisMultithreaded", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_processToisMultithreaded), HK_NULL },
	{ "maxEntriesPerToiMidphaseCollideTask", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxEntriesPerToiMidphaseCollideTask), HK_NULL },
	{ "maxEntriesPerToiNarrowphaseCollideTask", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxEntriesPerToiNarrowphaseCollideTask), HK_NULL },
	{ "maxNumToiCollisionPairsSinglethreaded", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_maxNumToiCollisionPairsSinglethreaded), HK_NULL },
	{ "numToisTillAllowedPenetrationSimplifiedToi", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_numToisTillAllowedPenetrationSimplifiedToi), HK_NULL },
	{ "numToisTillAllowedPenetrationToi", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_numToisTillAllowedPenetrationToi), HK_NULL },
	{ "numToisTillAllowedPenetrationToiHigher", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_numToisTillAllowedPenetrationToiHigher), HK_NULL },
	{ "numToisTillAllowedPenetrationToiForced", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_numToisTillAllowedPenetrationToiForced), HK_NULL },
	{ "enableDeactivation", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_enableDeactivation), HK_NULL },
	{ "simulationType", HK_NULL, hkpWorldCinfoSimulationTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_simulationType), HK_NULL },
	{ "enableSimulationIslands", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_enableSimulationIslands), HK_NULL },
	{ "minDesiredIslandSize", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_minDesiredIslandSize), HK_NULL },
	{ "processActionsInSingleThread", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_processActionsInSingleThread), HK_NULL },
	{ "allowIntegrationOfIslandsWithoutConstraintsInASeparateJob", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_allowIntegrationOfIslandsWithoutConstraintsInASeparateJob), HK_NULL },
	{ "frameMarkerPsiSnap", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_frameMarkerPsiSnap), HK_NULL },
	{ "fireCollisionCallbacks", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpWorldCinfo,m_fireCollisionCallbacks), HK_NULL }
};
namespace
{
	struct hkpWorldCinfo_DefaultStruct
	{
		int s_defaultOffsets[54];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		_hkVector4 m_gravity;
		hkInt32 m_broadPhaseQuerySize;
		float m_collisionTolerance;
		float m_expectedMaxLinearVelocity;
		hkInt32 m_sizeOfToiEventQueue;
		float m_expectedMinPsiDeltaTime;
		float m_solverDamp;
		hkInt32 m_solverIterations;
		hkInt32 m_solverMicrosteps;
		float m_maxConstraintViolation;
		float m_snapCollisionToConvexEdgeThreshold;
		float m_snapCollisionToConcaveEdgeThreshold;
		float m_iterativeLinearCastEarlyOutDistance;
		hkInt32 m_iterativeLinearCastMaxIterations;
		_hkBool m_shouldActivateOnRigidBodyTransformChange;
		float m_deactivationReferenceDistance;
		float m_toiCollisionResponseRotateNormal;
		hkInt32 m_maxSectorsPerMidphaseCollideTask;
		hkInt32 m_maxSectorsPerNarrowphaseCollideTask;
		_hkBool m_processToisMultithreaded;
		hkInt32 m_maxEntriesPerToiMidphaseCollideTask;
		hkInt32 m_maxEntriesPerToiNarrowphaseCollideTask;
		float m_numToisTillAllowedPenetrationSimplifiedToi;
		float m_numToisTillAllowedPenetrationToi;
		float m_numToisTillAllowedPenetrationToiHigher;
		float m_numToisTillAllowedPenetrationToiForced;
		_hkBool m_enableDeactivation;
		_hkBool m_enableSimulationIslands;
		hkUint32 m_minDesiredIslandSize;
		_hkBool m_processActionsInSingleThread;
		float m_frameMarkerPsiSnap;
	};
	const hkpWorldCinfo_DefaultStruct hkpWorldCinfo_Default =
	{
		{HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_gravity),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_broadPhaseQuerySize),-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_collisionTolerance),-1,-1,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_expectedMaxLinearVelocity),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_sizeOfToiEventQueue),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_expectedMinPsiDeltaTime),-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_solverDamp),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_solverIterations),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_solverMicrosteps),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_maxConstraintViolation),hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_snapCollisionToConvexEdgeThreshold),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_snapCollisionToConcaveEdgeThreshold),hkClassMember::HK_CLASS_ZERO_DEFAULT,hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_iterativeLinearCastEarlyOutDistance),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_iterativeLinearCastMaxIterations),hkClassMember::HK_CLASS_ZERO_DEFAULT,hkClassMember::HK_CLASS_ZERO_DEFAULT,hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_shouldActivateOnRigidBodyTransformChange),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_deactivationReferenceDistance),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_toiCollisionResponseRotateNormal),hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_maxSectorsPerMidphaseCollideTask),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_maxSectorsPerNarrowphaseCollideTask),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_processToisMultithreaded),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_maxEntriesPerToiMidphaseCollideTask),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_maxEntriesPerToiNarrowphaseCollideTask),hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_numToisTillAllowedPenetrationSimplifiedToi),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_numToisTillAllowedPenetrationToi),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_numToisTillAllowedPenetrationToiHigher),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_numToisTillAllowedPenetrationToiForced),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_enableDeactivation),-1,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_enableSimulationIslands),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_minDesiredIslandSize),HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_processActionsInSingleThread),hkClassMember::HK_CLASS_ZERO_DEFAULT,HK_OFFSET_OF(hkpWorldCinfo_DefaultStruct,m_frameMarkerPsiSnap),hkClassMember::HK_CLASS_ZERO_DEFAULT},
		{0,-9.8f,0},1024,.1,200,250,1.0f/30.0f,.6,4,1,1.8446726e+019f,.524,0.698,.01,20,true,0.02,0.2,2,4,true,-1,-1,3.0,3.0,4.0,20.0,true,true,64,true,.0001
	};
}
extern const hkClass hkpWorldCinfoClass;
const hkClass hkpWorldCinfoClass(
	"hkpWorldCinfo",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpWorldCinfo),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpWorldCinfoEnums),
	5, // enums
	reinterpret_cast<const hkClassMember*>(hkpWorldCinfoClass_Members),
	HK_COUNT_OF(hkpWorldCinfoClass_Members),
	&hkpWorldCinfo_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(18) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpWorldCinfo::staticClass()
{
	return hkpWorldCinfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpWorldCinfo*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpWorldCinfo(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpWorldCinfo(f);
}
static void HK_CALL cleanupLoadedObjecthkpWorldCinfo(void* p)
{
	static_cast<hkpWorldCinfo*>(p)->~hkpWorldCinfo();
}
static const void* HK_CALL getVtablehkpWorldCinfo()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpWorldCinfo).hash_code()));
	#else
	return ((const void*)(typeid(hkpWorldCinfo).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpWorldCinfo)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpWorldCinfo(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpWorldCinfoTypeInfo;
const hkTypeInfo hkpWorldCinfoTypeInfo(
	"hkpWorldCinfo",
	"!hkpWorldCinfo",
	finishLoadedObjecthkpWorldCinfo,
	cleanupLoadedObjecthkpWorldCinfo,
	getVtablehkpWorldCinfo(),
	sizeof(hkpWorldCinfo)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
