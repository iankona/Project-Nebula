/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Dynamics/Common/hkpMaterial.h'
#include <Physics2012/Dynamics/hkpDynamics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Dynamics/Common/hkpMaterial.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* hkpMaterialResponseTypeEnum;

//
// Enum hkpMaterial::ResponseType
//
static const hkInternalClassEnumItem hkpMaterialResponseTypeEnumItems[] =
{
	{0, "RESPONSE_INVALID"},
	{1, "RESPONSE_SIMPLE_CONTACT"},
	{2, "RESPONSE_REPORTING"},
	{3, "RESPONSE_NONE"},
	{4, "RESPONSE_MAX_ID"},
};
static const hkInternalClassEnum hkpMaterialEnums[] = {
	{"ResponseType", hkpMaterialResponseTypeEnumItems, 5, HK_NULL, 0 }
};
const hkClassEnum* hkpMaterialResponseTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpMaterialEnums[0]);

//
// Class hkpMaterial
//
const hkInternalClassMember hkpMaterial::Members[] =
{
	{ "responseType", HK_NULL, hkpMaterialResponseTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hkpMaterial,m_responseType), HK_NULL },
	{ "rollingFrictionMultiplier", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMaterial,m_rollingFrictionMultiplier), HK_NULL },
	{ "friction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMaterial,m_friction), HK_NULL },
	{ "restitution", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMaterial,m_restitution), HK_NULL }
};
namespace
{
	struct hkpMaterial_DefaultStruct
	{
		int s_defaultOffsets[4];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpMaterial_DefaultStruct hkpMaterial_Default =
	{
		{-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1},
		
	};
}
extern const hkClass hkpMaterialClass;
const hkClass hkpMaterialClass(
	"hkpMaterial",
	HK_NULL, // parent
	sizeof(::hkpMaterial),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpMaterialEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpMaterial::Members),
	HK_COUNT_OF(hkpMaterial::Members),
	&hkpMaterial_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMaterial::staticClass()
{
	return hkpMaterialClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpMaterial*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpMaterial(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpMaterial(f);
}
static void HK_CALL cleanupLoadedObjecthkpMaterial(void* p)
{
	static_cast<hkpMaterial*>(p)->~hkpMaterial();
}
extern const hkTypeInfo hkpMaterialTypeInfo;
const hkTypeInfo hkpMaterialTypeInfo(
	"hkpMaterial",
	"!hkpMaterial",
	finishLoadedObjecthkpMaterial,
	cleanupLoadedObjecthkpMaterial,
	HK_NULL,
	sizeof(hkpMaterial)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
