/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Weapons/hkpMountedBallGun.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Weapons/hkpMountedBallGun.h>
#define True true
#define False false


//
// Class hkpMountedBallGun
//
extern const hkClass hkpBallGunClass;

// hkpMountedBallGun_position attributes
static const hkRangeRealAttribute hkpMountedBallGun_position_hkRangeReal( -10000.000000f, 100000.000000f, -10000.000000f, 100000.000000f );
static const hkUiAttribute hkpMountedBallGun_position_hkUi = { True, hkUiAttribute::NONE, "World Position", "", "", false, false, false };
static const hkSemanticsAttribute hkpMountedBallGun_position_hkSemantics = { hkSemanticsAttribute::POSITION };
static const hkInternalCustomAttributes::Attribute hkpMountedBallGun_position_AttributesList[] =
{
	{ "hk.RangeReal", &hkpMountedBallGun_position_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpMountedBallGun_position_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpMountedBallGun_position_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpMountedBallGun_position_Attributes = { hkpMountedBallGun_position_AttributesList, HK_COUNT_OF(hkpMountedBallGun_position_AttributesList) };
static const hkInternalClassMember hkpMountedBallGunClass_Members[] =
{
	{ "position", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpMountedBallGun,m_position), &hkpMountedBallGun_position_Attributes }
};
namespace
{
	struct hkpMountedBallGun_DefaultStruct
	{
		int s_defaultOffsets[1];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		_hkVector4 m_position;
	};
	const hkpMountedBallGun_DefaultStruct hkpMountedBallGun_Default =
	{
		{HK_OFFSET_OF(hkpMountedBallGun_DefaultStruct,m_position)},
		{0.0f,100.0f,0.0f}
	};
}
extern const hkClass hkpMountedBallGunClass;
const hkClass hkpMountedBallGunClass(
	"hkpMountedBallGun",
	&hkpBallGunClass, // parent
	sizeof(::hkpMountedBallGun),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpMountedBallGunClass_Members),
	HK_COUNT_OF(hkpMountedBallGunClass_Members),
	&hkpMountedBallGun_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpMountedBallGun::staticClass()
{
	return hkpMountedBallGunClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpMountedBallGun*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpMountedBallGun(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpMountedBallGun(f);
}
static void HK_CALL cleanupLoadedObjecthkpMountedBallGun(void* p)
{
	static_cast<hkpMountedBallGun*>(p)->~hkpMountedBallGun();
}
static const void* HK_CALL getVtablehkpMountedBallGun()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpMountedBallGun).hash_code()));
	#else
	return ((const void*)(typeid(hkpMountedBallGun).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpMountedBallGun)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpMountedBallGun(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpMountedBallGunTypeInfo;
const hkTypeInfo hkpMountedBallGunTypeInfo(
	"hkpMountedBallGun",
	"!hkpMountedBallGun",
	finishLoadedObjecthkpMountedBallGun,
	cleanupLoadedObjecthkpMountedBallGun,
	getVtablehkpMountedBallGun(),
	sizeof(hkpMountedBallGun)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
