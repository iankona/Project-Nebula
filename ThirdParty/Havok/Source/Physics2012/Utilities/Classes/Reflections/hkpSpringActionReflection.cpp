/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Actions/Spring/hkpSpringAction.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Actions/Spring/hkpSpringAction.h>
#define True true
#define False false


//
// Class hkpSpringAction
//
extern const hkClass hkpBinaryActionClass;

// hkpSpringAction_positionAinA attributes
static const hkRangeRealAttribute hkpSpringAction_positionAinA_hkRangeReal( -1000.000000f, 1000.000000f, -10.000000f, 10.000000f );
static const hkUiAttribute hkpSpringAction_positionAinA_hkUi = { True, hkUiAttribute::NONE, "Pivot", "Pivot", "", false, false, false };
static const hkSemanticsAttribute hkpSpringAction_positionAinA_hkSemantics = { hkSemanticsAttribute::POSITION };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_positionAinA_AttributesList[] =
{
	{ "hk.RangeReal", &hkpSpringAction_positionAinA_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpSpringAction_positionAinA_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpSpringAction_positionAinA_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_positionAinA_Attributes = { hkpSpringAction_positionAinA_AttributesList, HK_COUNT_OF(hkpSpringAction_positionAinA_AttributesList) };
// hkpSpringAction_positionBinB attributes
static const hkRangeRealAttribute hkpSpringAction_positionBinB_hkRangeReal( -1000.000000f, 1000.000000f, -10.000000f, 10.000000f );
static const hkUiAttribute hkpSpringAction_positionBinB_hkUi = { True, hkUiAttribute::NONE, "Pivot On Other Body", "", "", True, false, false };
static const hkSemanticsAttribute hkpSpringAction_positionBinB_hkSemantics = { hkSemanticsAttribute::POSITION };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_positionBinB_AttributesList[] =
{
	{ "hk.RangeReal", &hkpSpringAction_positionBinB_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpSpringAction_positionBinB_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpSpringAction_positionBinB_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_positionBinB_Attributes = { hkpSpringAction_positionBinB_AttributesList, HK_COUNT_OF(hkpSpringAction_positionBinB_AttributesList) };
// hkpSpringAction_restLength attributes
static const hkRangeRealAttribute hkpSpringAction_restLength_hkRangeReal( 0.000000f, 1000.000000f, 0.100000f, 10.000000f );
static const hkUiAttribute hkpSpringAction_restLength_hkUi = { True, hkUiAttribute::NONE, "Resting Length", "Constants", "", false, false, false };
static const hkSemanticsAttribute hkpSpringAction_restLength_hkSemantics = { hkSemanticsAttribute::DISTANCE };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_restLength_AttributesList[] =
{
	{ "hk.RangeReal", &hkpSpringAction_restLength_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpSpringAction_restLength_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpSpringAction_restLength_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_restLength_Attributes = { hkpSpringAction_restLength_AttributesList, HK_COUNT_OF(hkpSpringAction_restLength_AttributesList) };
// hkpSpringAction_strength attributes
static const hkRangeRealAttribute hkpSpringAction_strength_hkRangeReal( 0.100000f, 1000.000000f, 0.100000f, 1000.000000f );
static const hkUiAttribute hkpSpringAction_strength_hkUi = { True, hkUiAttribute::NONE, "", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_strength_AttributesList[] =
{
	{ "hk.RangeReal", &hkpSpringAction_strength_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpSpringAction_strength_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_strength_Attributes = { hkpSpringAction_strength_AttributesList, HK_COUNT_OF(hkpSpringAction_strength_AttributesList) };
// hkpSpringAction_damping attributes
static const hkRangeRealAttribute hkpSpringAction_damping_hkRangeReal( 0.100000f, 1000.000000f, 0.100000f, 1000.000000f );
static const hkUiAttribute hkpSpringAction_damping_hkUi = { True, hkUiAttribute::NONE, "", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_damping_AttributesList[] =
{
	{ "hk.RangeReal", &hkpSpringAction_damping_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpSpringAction_damping_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_damping_Attributes = { hkpSpringAction_damping_AttributesList, HK_COUNT_OF(hkpSpringAction_damping_AttributesList) };
// hkpSpringAction_onCompression attributes
static const hkUiAttribute hkpSpringAction_onCompression_hkUi = { True, hkUiAttribute::NONE, "", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_onCompression_AttributesList[] =
{
	{ "hk.Ui", &hkpSpringAction_onCompression_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_onCompression_Attributes = { hkpSpringAction_onCompression_AttributesList, HK_COUNT_OF(hkpSpringAction_onCompression_AttributesList) };
// hkpSpringAction_onExtension attributes
static const hkUiAttribute hkpSpringAction_onExtension_hkUi = { True, hkUiAttribute::NONE, "", "", "", True, false, false };
static const hkInternalCustomAttributes::Attribute hkpSpringAction_onExtension_AttributesList[] =
{
	{ "hk.Ui", &hkpSpringAction_onExtension_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpSpringAction_onExtension_Attributes = { hkpSpringAction_onExtension_AttributesList, HK_COUNT_OF(hkpSpringAction_onExtension_AttributesList) };
static const hkInternalClassMember hkpSpringActionClass_Members[] =
{
	{ "lastForce", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_lastForce), HK_NULL },
	{ "positionAinA", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_positionAinA), &hkpSpringAction_positionAinA_Attributes },
	{ "positionBinB", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_positionBinB), &hkpSpringAction_positionBinB_Attributes },
	{ "restLength", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_restLength), &hkpSpringAction_restLength_Attributes },
	{ "strength", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_strength), &hkpSpringAction_strength_Attributes },
	{ "damping", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_damping), &hkpSpringAction_damping_Attributes },
	{ "onCompression", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_onCompression), &hkpSpringAction_onCompression_Attributes },
	{ "onExtension", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpSpringAction,m_onExtension), &hkpSpringAction_onExtension_Attributes }
};
namespace
{
	struct hkpSpringAction_DefaultStruct
	{
		int s_defaultOffsets[8];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		float m_restLength;
		float m_strength;
		float m_damping;
		_hkBool m_onCompression;
		_hkBool m_onExtension;
	};
	const hkpSpringAction_DefaultStruct hkpSpringAction_Default =
	{
		{-1,-1,-1,HK_OFFSET_OF(hkpSpringAction_DefaultStruct,m_restLength),HK_OFFSET_OF(hkpSpringAction_DefaultStruct,m_strength),HK_OFFSET_OF(hkpSpringAction_DefaultStruct,m_damping),HK_OFFSET_OF(hkpSpringAction_DefaultStruct,m_onCompression),HK_OFFSET_OF(hkpSpringAction_DefaultStruct,m_onExtension)},
		1.0,1000.0,0.1,true,true
	};
}
extern const hkClass hkpSpringActionClass;
const hkClass hkpSpringActionClass(
	"hkpSpringAction",
	&hkpBinaryActionClass, // parent
	sizeof(::hkpSpringAction),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpSpringActionClass_Members),
	HK_COUNT_OF(hkpSpringActionClass_Members),
	&hkpSpringAction_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpSpringAction::staticClass()
{
	return hkpSpringActionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpSpringAction*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpSpringAction(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpSpringAction(f);
}
static void HK_CALL cleanupLoadedObjecthkpSpringAction(void* p)
{
	static_cast<hkpSpringAction*>(p)->~hkpSpringAction();
}
static const void* HK_CALL getVtablehkpSpringAction()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpSpringAction).hash_code()));
	#else
	return ((const void*)(typeid(hkpSpringAction).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpSpringAction)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpSpringAction(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpSpringActionTypeInfo;
const hkTypeInfo hkpSpringActionTypeInfo(
	"hkpSpringAction",
	"!hkpSpringAction",
	finishLoadedObjecthkpSpringAction,
	cleanupLoadedObjecthkpSpringAction,
	getVtablehkpSpringAction(),
	sizeof(hkpSpringAction)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
