/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Weapons/hkpProjectileGun.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Weapons/hkpProjectileGun.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkdWorldClass;
extern const hkClass hkpGunProjectileClass;
extern const hkClass hkpProjectileGunClass;
extern const hkClass hkpRigidBodyClass;
extern const hkClass hkpWorldClass;
extern const hkClassEnum* hkpGunProjectileFlagsEnum;

//
// Class hkpProjectileGun
//
extern const hkClass hkpFirstPersonGunClass;

// hkpProjectileGun_maxProjectiles attributes
static const hkUiAttribute hkpProjectileGun_maxProjectiles_hkUi = { True, hkUiAttribute::NONE, "Max Projectiles in World", "", "", false, false, false };
static const hkRangeInt32Attribute hkpProjectileGun_maxProjectiles_hkRangeInt32( 0, 1000, 0, 1000 );
static const hkInternalCustomAttributes::Attribute hkpProjectileGun_maxProjectiles_AttributesList[] =
{
	{ "hk.Ui", &hkpProjectileGun_maxProjectiles_hkUi, &hkUiAttributeClass },
	{ "hk.RangeInt32", &hkpProjectileGun_maxProjectiles_hkRangeInt32, &hkRangeInt32AttributeClass }
};
static const hkInternalCustomAttributes hkpProjectileGun_maxProjectiles_Attributes = { hkpProjectileGun_maxProjectiles_AttributesList, HK_COUNT_OF(hkpProjectileGun_maxProjectiles_AttributesList) };
// hkpProjectileGun_reloadTime attributes
static const hkRangeRealAttribute hkpProjectileGun_reloadTime_hkRangeReal( 0.000000f, 100.000000f, 0.000000f, 100.000000f );
static const hkUiAttribute hkpProjectileGun_reloadTime_hkUi = { True, hkUiAttribute::NONE, "Reload delay", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpProjectileGun_reloadTime_AttributesList[] =
{
	{ "hk.RangeReal", &hkpProjectileGun_reloadTime_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpProjectileGun_reloadTime_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpProjectileGun_reloadTime_Attributes = { hkpProjectileGun_reloadTime_AttributesList, HK_COUNT_OF(hkpProjectileGun_reloadTime_AttributesList) };
static const hkInternalClassMember hkpProjectileGunClass_Members[] =
{
	{ "maxProjectiles", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpProjectileGun,m_maxProjectiles), &hkpProjectileGun_maxProjectiles_Attributes },
	{ "reloadTime", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpProjectileGun,m_reloadTime), &hkpProjectileGun_reloadTime_Attributes },
	{ "reload", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpProjectileGun,m_reload), HK_NULL },
	{ "projectiles", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpProjectileGun,m_projectiles), HK_NULL },
	{ "world", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpProjectileGun,m_world), HK_NULL },
	{ "destructionWorld", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpProjectileGun,m_destructionWorld), HK_NULL }
};
namespace
{
	struct hkpProjectileGun_DefaultStruct
	{
		int s_defaultOffsets[6];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		hkInt32 m_maxProjectiles;
		float m_reloadTime;
	};
	const hkpProjectileGun_DefaultStruct hkpProjectileGun_Default =
	{
		{HK_OFFSET_OF(hkpProjectileGun_DefaultStruct,m_maxProjectiles),HK_OFFSET_OF(hkpProjectileGun_DefaultStruct,m_reloadTime),-1,-1,-1,-1},
		5,0.3
	};
}
const hkClass hkpProjectileGunClass(
	"hkpProjectileGun",
	&hkpFirstPersonGunClass, // parent
	sizeof(::hkpProjectileGun),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpProjectileGunClass_Members),
	HK_COUNT_OF(hkpProjectileGunClass_Members),
	&hkpProjectileGun_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpProjectileGun::staticClass()
{
	return hkpProjectileGunClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpProjectileGun*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpProjectileGun(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpProjectileGun(f);
}
static void HK_CALL cleanupLoadedObjecthkpProjectileGun(void* p)
{
	static_cast<hkpProjectileGun*>(p)->~hkpProjectileGun();
}
static const void* HK_CALL getVtablehkpProjectileGun()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpProjectileGun).hash_code()));
	#else
	return ((const void*)(typeid(hkpProjectileGun).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpProjectileGun)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpProjectileGun(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpProjectileGunTypeInfo;
const hkTypeInfo hkpProjectileGunTypeInfo(
	"hkpProjectileGun",
	"!hkpProjectileGun",
	finishLoadedObjecthkpProjectileGun,
	cleanupLoadedObjecthkpProjectileGun,
	getVtablehkpProjectileGun(),
	sizeof(hkpProjectileGun)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
