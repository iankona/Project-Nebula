/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Serialize/hkpDisplayBindingData.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Serialize/hkpDisplayBindingData.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkReferencedObjectClass;
extern const hkClass hkpDisplayBindingDataPhysicsSystemClass;
extern const hkClass hkpDisplayBindingDataRigidBodyClass;
extern const hkClass hkpPhysicsSystemClass;
extern const hkClass hkpRigidBodyClass;

//
// Class hkpDisplayBindingData::RigidBody
//

static const hkInternalClassMember hkpDisplayBindingData_RigidBodyClass_Members[] =
{
	{ "rigidBody", &hkpRigidBodyClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData::RigidBody,m_rigidBody), HK_NULL },
	{ "displayObjectPtr", &hkReferencedObjectClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData::RigidBody,m_displayObjectPtr), HK_NULL },
	{ "rigidBodyFromDisplayObjectTransform", HK_NULL, HK_NULL, hkClassMember::TYPE_MATRIX4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData::RigidBody,m_rigidBodyFromDisplayObjectTransform), HK_NULL }
};
const hkClass hkpDisplayBindingDataRigidBodyClass(
	"hkpDisplayBindingDataRigidBody",
	&hkReferencedObjectClass, // parent
	sizeof(hkpDisplayBindingData::RigidBody),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpDisplayBindingData_RigidBodyClass_Members),
	HK_COUNT_OF(hkpDisplayBindingData_RigidBodyClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpDisplayBindingData::RigidBody::staticClass()
{
	return hkpDisplayBindingDataRigidBodyClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpDisplayBindingData::RigidBody*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpDisplayBindingDataRigidBody(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpDisplayBindingData::RigidBody(f);
}
static void HK_CALL cleanupLoadedObjecthkpDisplayBindingDataRigidBody(void* p)
{
	static_cast<hkpDisplayBindingData::RigidBody*>(p)->~RigidBody();
}
static const void* HK_CALL getVtablehkpDisplayBindingDataRigidBody()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpDisplayBindingData::RigidBody).hash_code()));
	#else
	return ((const void*)(typeid(hkpDisplayBindingData::RigidBody).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpDisplayBindingData::RigidBody)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpDisplayBindingData::RigidBody(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpDisplayBindingDataRigidBodyTypeInfo;
const hkTypeInfo hkpDisplayBindingDataRigidBodyTypeInfo(
	"hkpDisplayBindingDataRigidBody",
	"!hkpDisplayBindingData::RigidBody",
	finishLoadedObjecthkpDisplayBindingDataRigidBody,
	cleanupLoadedObjecthkpDisplayBindingDataRigidBody,
	getVtablehkpDisplayBindingDataRigidBody(),
	sizeof(hkpDisplayBindingData::RigidBody)
	);
#endif

//
// Class hkpDisplayBindingData::PhysicsSystem
//

static const hkInternalClassMember hkpDisplayBindingData_PhysicsSystemClass_Members[] =
{
	{ "bindings", &hkpDisplayBindingDataRigidBodyClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData::PhysicsSystem,m_bindings), HK_NULL },
	{ "system", &hkpPhysicsSystemClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData::PhysicsSystem,m_system), HK_NULL }
};
const hkClass hkpDisplayBindingDataPhysicsSystemClass(
	"hkpDisplayBindingDataPhysicsSystem",
	&hkReferencedObjectClass, // parent
	sizeof(hkpDisplayBindingData::PhysicsSystem),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpDisplayBindingData_PhysicsSystemClass_Members),
	HK_COUNT_OF(hkpDisplayBindingData_PhysicsSystemClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpDisplayBindingData::PhysicsSystem::staticClass()
{
	return hkpDisplayBindingDataPhysicsSystemClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpDisplayBindingData::PhysicsSystem*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpDisplayBindingDataPhysicsSystem(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpDisplayBindingData::PhysicsSystem(f);
}
static void HK_CALL cleanupLoadedObjecthkpDisplayBindingDataPhysicsSystem(void* p)
{
	static_cast<hkpDisplayBindingData::PhysicsSystem*>(p)->~PhysicsSystem();
}
static const void* HK_CALL getVtablehkpDisplayBindingDataPhysicsSystem()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpDisplayBindingData::PhysicsSystem).hash_code()));
	#else
	return ((const void*)(typeid(hkpDisplayBindingData::PhysicsSystem).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpDisplayBindingData::PhysicsSystem)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpDisplayBindingData::PhysicsSystem(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpDisplayBindingDataPhysicsSystemTypeInfo;
const hkTypeInfo hkpDisplayBindingDataPhysicsSystemTypeInfo(
	"hkpDisplayBindingDataPhysicsSystem",
	"!hkpDisplayBindingData::PhysicsSystem",
	finishLoadedObjecthkpDisplayBindingDataPhysicsSystem,
	cleanupLoadedObjecthkpDisplayBindingDataPhysicsSystem,
	getVtablehkpDisplayBindingDataPhysicsSystem(),
	sizeof(hkpDisplayBindingData::PhysicsSystem)
	);
#endif

//
// Class hkpDisplayBindingData
//

static const hkInternalClassMember hkpDisplayBindingDataClass_Members[] =
{
	{ "rigidBodyBindings", &hkpDisplayBindingDataRigidBodyClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData,m_rigidBodyBindings), HK_NULL },
	{ "physicsSystemBindings", &hkpDisplayBindingDataPhysicsSystemClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpDisplayBindingData,m_physicsSystemBindings), HK_NULL }
};
extern const hkClass hkpDisplayBindingDataClass;
const hkClass hkpDisplayBindingDataClass(
	"hkpDisplayBindingData",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpDisplayBindingData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpDisplayBindingDataClass_Members),
	HK_COUNT_OF(hkpDisplayBindingDataClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpDisplayBindingData::staticClass()
{
	return hkpDisplayBindingDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpDisplayBindingData*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpDisplayBindingData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpDisplayBindingData(f);
}
static void HK_CALL cleanupLoadedObjecthkpDisplayBindingData(void* p)
{
	static_cast<hkpDisplayBindingData*>(p)->~hkpDisplayBindingData();
}
static const void* HK_CALL getVtablehkpDisplayBindingData()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpDisplayBindingData).hash_code()));
	#else
	return ((const void*)(typeid(hkpDisplayBindingData).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpDisplayBindingData)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpDisplayBindingData(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpDisplayBindingDataTypeInfo;
const hkTypeInfo hkpDisplayBindingDataTypeInfo(
	"hkpDisplayBindingData",
	"!hkpDisplayBindingData",
	finishLoadedObjecthkpDisplayBindingData,
	cleanupLoadedObjecthkpDisplayBindingData,
	getVtablehkpDisplayBindingData(),
	sizeof(hkpDisplayBindingData)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
