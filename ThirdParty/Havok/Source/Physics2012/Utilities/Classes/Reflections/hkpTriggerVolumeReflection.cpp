/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Collide/TriggerVolume/hkpTriggerVolume.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Collide/TriggerVolume/hkpTriggerVolume.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpRigidBodyClass;
extern const hkClass hkpTriggerVolumeEventInfoClass;
extern const hkClassEnum* hkpTriggerVolumeOperationEnum;

//
// Enum hkpTriggerVolume::EventType
//
static const hkInternalClassEnumItem hkpTriggerVolumeEventTypeEnumItems[] =
{
	{1, "ENTERED_EVENT"},
	{2, "LEFT_EVENT"},
	{3, "ENTERED_AND_LEFT_EVENT"},
	{6, "TRIGGER_BODY_LEFT_EVENT"},
};

//
// Enum hkpTriggerVolume::Operation
//
static const hkInternalClassEnumItem hkpTriggerVolumeOperationEnumItems[] =
{
	{0, "ADDED_OP"},
	{1, "REMOVED_OP"},
	{2, "CONTACT_OP"},
	{3, "TOI_OP"},
};
static const hkInternalClassEnum hkpTriggerVolumeEnums[] = {
	{"EventType", hkpTriggerVolumeEventTypeEnumItems, 4, HK_NULL, 0 },
	{"Operation", hkpTriggerVolumeOperationEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkpTriggerVolumeEventTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpTriggerVolumeEnums[0]);
const hkClassEnum* hkpTriggerVolumeOperationEnum = reinterpret_cast<const hkClassEnum*>(&hkpTriggerVolumeEnums[1]);

//
// Class hkpTriggerVolume::EventInfo
//
static const hkInternalClassMember hkpTriggerVolume_EventInfoClass_Members[] =
{
	{ "sortValue", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT64, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTriggerVolume::EventInfo,m_sortValue), HK_NULL },
	{ "body", &hkpRigidBodyClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpTriggerVolume::EventInfo,m_body), HK_NULL },
	{ "operation", HK_NULL, hkpTriggerVolumeOperationEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT32, 0, 0, HK_OFFSET_OF(hkpTriggerVolume::EventInfo,m_operation), HK_NULL }
};
const hkClass hkpTriggerVolumeEventInfoClass(
	"hkpTriggerVolumeEventInfo",
	HK_NULL, // parent
	sizeof(hkpTriggerVolume::EventInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpTriggerVolume_EventInfoClass_Members),
	HK_COUNT_OF(hkpTriggerVolume_EventInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpTriggerVolume::EventInfo::staticClass()
{
	return hkpTriggerVolumeEventInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpTriggerVolume::EventInfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpTriggerVolumeEventInfo(void* p)
{
	static_cast<hkpTriggerVolume::EventInfo*>(p)->~EventInfo();
}
extern const hkTypeInfo hkpTriggerVolumeEventInfoTypeInfo;
const hkTypeInfo hkpTriggerVolumeEventInfoTypeInfo(
	"hkpTriggerVolumeEventInfo",
	"!hkpTriggerVolume::EventInfo",
	HK_NULL,
	cleanupLoadedObjecthkpTriggerVolumeEventInfo,
	HK_NULL,
	sizeof(hkpTriggerVolume::EventInfo)
	);
#endif

//
// Class hkpTriggerVolume
//
extern const hkClass hkReferencedObjectClass;

const hkInternalClassMember hkpTriggerVolume::Members[] =
{
	{ "overlappingBodies", &hkpRigidBodyClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkpTriggerVolume,m_overlappingBodies), HK_NULL },
	{ "eventQueue", &hkpTriggerVolumeEventInfoClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpTriggerVolume,m_eventQueue), HK_NULL },
	{ "triggerBody", &hkpRigidBodyClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkpTriggerVolume,m_triggerBody), HK_NULL },
	{ "sequenceNumber", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpTriggerVolume,m_sequenceNumber), HK_NULL },
	{ "isProcessingBodyOverlaps", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpTriggerVolume,m_isProcessingBodyOverlaps), HK_NULL },
	{ "newOverlappingBodies", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpTriggerVolume,m_newOverlappingBodies), HK_NULL }
};
extern const hkClass hkpTriggerVolumeClass;
const hkClass hkpTriggerVolumeClass(
	"hkpTriggerVolume",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpTriggerVolume),
	HK_NULL,
	3, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpTriggerVolumeEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hkpTriggerVolume::Members),
	HK_COUNT_OF(hkpTriggerVolume::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpTriggerVolume::staticClass()
{
	return hkpTriggerVolumeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpTriggerVolume*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpTriggerVolume(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpTriggerVolume(f);
}
static void HK_CALL cleanupLoadedObjecthkpTriggerVolume(void* p)
{
	static_cast<hkpTriggerVolume*>(p)->~hkpTriggerVolume();
}
static const void* HK_CALL getVtablehkpTriggerVolume()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpTriggerVolume).hash_code()));
	#else
	return ((const void*)(typeid(hkpTriggerVolume).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpTriggerVolume)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpTriggerVolume(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpTriggerVolumeTypeInfo;
const hkTypeInfo hkpTriggerVolumeTypeInfo(
	"hkpTriggerVolume",
	"!hkpTriggerVolume",
	finishLoadedObjecthkpTriggerVolume,
	cleanupLoadedObjecthkpTriggerVolume,
	getVtablehkpTriggerVolume(),
	sizeof(hkpTriggerVolume)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
