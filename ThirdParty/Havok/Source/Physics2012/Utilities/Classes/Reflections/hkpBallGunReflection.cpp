/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics2012/Utilities/Weapons/hkpBallGun.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics2012/Utilities/Weapons/hkpBallGun.h>
#define True true
#define False false


//
// Class hkpBallGun
//
extern const hkClass hkpFirstPersonGunClass;

extern const hkClass hkQueuehkpRigidBodyClass;

// hkpBallGun_bulletRadius attributes
static const hkRangeRealAttribute hkpBallGun_bulletRadius_hkRangeReal( 0.000000f, 100.000000f, 0.000000f, 1.000000f );
static const hkUiAttribute hkpBallGun_bulletRadius_hkUi = { True, hkUiAttribute::NONE, "Radius", "Bullet", "", false, false, false };
static const hkSemanticsAttribute hkpBallGun_bulletRadius_hkSemantics = { hkSemanticsAttribute::DISTANCE };
static const hkInternalCustomAttributes::Attribute hkpBallGun_bulletRadius_AttributesList[] =
{
	{ "hk.RangeReal", &hkpBallGun_bulletRadius_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpBallGun_bulletRadius_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpBallGun_bulletRadius_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_bulletRadius_Attributes = { hkpBallGun_bulletRadius_AttributesList, HK_COUNT_OF(hkpBallGun_bulletRadius_AttributesList) };
// hkpBallGun_bulletVelocity attributes
static const hkRangeRealAttribute hkpBallGun_bulletVelocity_hkRangeReal( 0.000000f, 10000.000000f, 0.000000f, 100.000000f );
static const hkUiAttribute hkpBallGun_bulletVelocity_hkUi = { True, hkUiAttribute::NONE, "Velocity", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpBallGun_bulletVelocity_AttributesList[] =
{
	{ "hk.RangeReal", &hkpBallGun_bulletVelocity_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpBallGun_bulletVelocity_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_bulletVelocity_Attributes = { hkpBallGun_bulletVelocity_AttributesList, HK_COUNT_OF(hkpBallGun_bulletVelocity_AttributesList) };
// hkpBallGun_bulletMass attributes
static const hkRangeRealAttribute hkpBallGun_bulletMass_hkRangeReal( 0.000000f, 1000000.000000f, 0.000000f, 100.000000f );
static const hkUiAttribute hkpBallGun_bulletMass_hkUi = { True, hkUiAttribute::NONE, "Mass", "", "", false, false, false };
static const hkInternalCustomAttributes::Attribute hkpBallGun_bulletMass_AttributesList[] =
{
	{ "hk.RangeReal", &hkpBallGun_bulletMass_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpBallGun_bulletMass_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_bulletMass_Attributes = { hkpBallGun_bulletMass_AttributesList, HK_COUNT_OF(hkpBallGun_bulletMass_AttributesList) };
// hkpBallGun_damageMultiplier attributes
static const hkRangeRealAttribute hkpBallGun_damageMultiplier_hkRangeReal( 0.000000f, 10000.000000f, 0.000000f, 10.000000f );
static const hkUiAttribute hkpBallGun_damageMultiplier_hkUi = { True, hkUiAttribute::NONE, "", "", "", True, false, false };
static const hkInternalCustomAttributes::Attribute hkpBallGun_damageMultiplier_AttributesList[] =
{
	{ "hk.RangeReal", &hkpBallGun_damageMultiplier_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpBallGun_damageMultiplier_hkUi, &hkUiAttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_damageMultiplier_Attributes = { hkpBallGun_damageMultiplier_AttributesList, HK_COUNT_OF(hkpBallGun_damageMultiplier_AttributesList) };
// hkpBallGun_maxBulletsInWorld attributes
static const hkUiAttribute hkpBallGun_maxBulletsInWorld_hkUi = { True, hkUiAttribute::NONE, "", "", "", false, false, false };
static const hkRangeInt32Attribute hkpBallGun_maxBulletsInWorld_hkRangeInt32( 0, 100, 0, 100 );
static const hkInternalCustomAttributes::Attribute hkpBallGun_maxBulletsInWorld_AttributesList[] =
{
	{ "hk.Ui", &hkpBallGun_maxBulletsInWorld_hkUi, &hkUiAttributeClass },
	{ "hk.RangeInt32", &hkpBallGun_maxBulletsInWorld_hkRangeInt32, &hkRangeInt32AttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_maxBulletsInWorld_Attributes = { hkpBallGun_maxBulletsInWorld_AttributesList, HK_COUNT_OF(hkpBallGun_maxBulletsInWorld_AttributesList) };
// hkpBallGun_bulletOffsetFromCenter attributes
static const hkRangeRealAttribute hkpBallGun_bulletOffsetFromCenter_hkRangeReal( -10000.000000f, 100000.000000f, -10000.000000f, 100000.000000f );
static const hkUiAttribute hkpBallGun_bulletOffsetFromCenter_hkUi = { True, hkUiAttribute::NONE, "Center Offset", "", "", false, false, false };
static const hkSemanticsAttribute hkpBallGun_bulletOffsetFromCenter_hkSemantics = { hkSemanticsAttribute::POSITION };
static const hkInternalCustomAttributes::Attribute hkpBallGun_bulletOffsetFromCenter_AttributesList[] =
{
	{ "hk.RangeReal", &hkpBallGun_bulletOffsetFromCenter_hkRangeReal, &hkRangeRealAttributeClass },
	{ "hk.Ui", &hkpBallGun_bulletOffsetFromCenter_hkUi, &hkUiAttributeClass },
	{ "hk.Semantics", &hkpBallGun_bulletOffsetFromCenter_hkSemantics, &hkSemanticsAttributeClass }
};
static const hkInternalCustomAttributes hkpBallGun_bulletOffsetFromCenter_Attributes = { hkpBallGun_bulletOffsetFromCenter_AttributesList, HK_COUNT_OF(hkpBallGun_bulletOffsetFromCenter_AttributesList) };
static const hkInternalClassMember hkpBallGunClass_Members[] =
{
	{ "bulletRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_bulletRadius), &hkpBallGun_bulletRadius_Attributes },
	{ "bulletVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_bulletVelocity), &hkpBallGun_bulletVelocity_Attributes },
	{ "bulletMass", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_bulletMass), &hkpBallGun_bulletMass_Attributes },
	{ "damageMultiplier", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_damageMultiplier), &hkpBallGun_damageMultiplier_Attributes },
	{ "maxBulletsInWorld", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_maxBulletsInWorld), &hkpBallGun_maxBulletsInWorld_Attributes },
	{ "bulletOffsetFromCenter", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpBallGun,m_bulletOffsetFromCenter), &hkpBallGun_bulletOffsetFromCenter_Attributes },
	{ "addedBodies", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkpBallGun,m_addedBodies), HK_NULL }
};
namespace
{
	struct hkpBallGun_DefaultStruct
	{
		int s_defaultOffsets[7];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		float m_bulletRadius;
		float m_bulletVelocity;
		float m_bulletMass;
		float m_damageMultiplier;
		hkInt32 m_maxBulletsInWorld;
		_hkVector4 m_bulletOffsetFromCenter;
	};
	const hkpBallGun_DefaultStruct hkpBallGun_Default =
	{
		{HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_bulletRadius),HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_bulletVelocity),HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_bulletMass),HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_damageMultiplier),HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_maxBulletsInWorld),HK_OFFSET_OF(hkpBallGun_DefaultStruct,m_bulletOffsetFromCenter),-1},
	0.2,40.0,50.0,50.0,100,	{0.0f,0.0f,0.0f}
	};
}
extern const hkClass hkpBallGunClass;
const hkClass hkpBallGunClass(
	"hkpBallGun",
	&hkpFirstPersonGunClass, // parent
	sizeof(::hkpBallGun),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpBallGunClass_Members),
	HK_COUNT_OF(hkpBallGunClass_Members),
	&hkpBallGun_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpBallGun::staticClass()
{
	return hkpBallGunClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpBallGun*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpBallGun(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpBallGun(f);
}
static void HK_CALL cleanupLoadedObjecthkpBallGun(void* p)
{
	static_cast<hkpBallGun*>(p)->~hkpBallGun();
}
static const void* HK_CALL getVtablehkpBallGun()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpBallGun).hash_code()));
	#else
	return ((const void*)(typeid(hkpBallGun).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpBallGun)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpBallGun(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpBallGunTypeInfo;
const hkTypeInfo hkpBallGunTypeInfo(
	"hkpBallGun",
	"!hkpBallGun",
	finishLoadedObjecthkpBallGun,
	cleanupLoadedObjecthkpBallGun,
	getVtablehkpBallGun(),
	sizeof(hkpBallGun)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
