/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Geometry/Collide/Shapes/hkcdShape.h'
#include <Geometry/Collide/hkcdCollide.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Geometry/Collide/Shapes/hkcdShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* hkcdShapeDispatchTypeShapeDispatchTypeEnumEnum;
extern const hkClassEnum* hkcdShapeInfoCodecTypeShapeInfoCodecTypeEnumEnum;
extern const hkClassEnum* hkcdShapeTypeShapeTypeEnumEnum;

//
// Enum hkcdShapeType::ShapeTypeEnum
//
static const hkInternalClassEnumItem hkcdShapeTypeShapeTypeEnumEnumItems[] =
{
	{0, "SPHERE"},
	{1, "CYLINDER"},
	{2, "TRIANGLE"},
	{3, "BOX"},
	{4, "CAPSULE"},
	{5, "CONVEX_VERTICES"},
	{6, "TRI_SAMPLED_HEIGHT_FIELD_COLLECTION"},
	{7, "TRI_SAMPLED_HEIGHT_FIELD_BV_TREE"},
	{8, "LIST"},
	{9, "MOPP"},
	{10, "CONVEX_TRANSLATE"},
	{11, "CONVEX_TRANSFORM"},
	{12, "SAMPLED_HEIGHT_FIELD"},
	{13, "EXTENDED_MESH"},
	{14, "TRANSFORM"},
	{15, "COMPRESSED_MESH"},
	{16, "STATIC_COMPOUND"},
	{17, "BV_COMPRESSED_MESH"},
	{18, "COLLECTION"},
	{19, "USER0"},
	{20, "USER1"},
	{21, "USER2"},
	{22, "BV_TREE"},
	{23, "CONVEX"},
	{24, "CONVEX_PIECE"},
	{25, "MULTI_SPHERE"},
	{26, "CONVEX_LIST"},
	{27, "TRIANGLE_COLLECTION"},
	{28, "HEIGHT_FIELD"},
	{29, "SPHERE_REP"},
	{30, "BV"},
	{31, "PLANE"},
	{32, "PHANTOM_CALLBACK"},
	{33, "MULTI_RAY"},
	{34, "INVALID"},
	{0, "FIRST_SHAPE_TYPE"},
	{22, "MAX_SPU_SHAPE_TYPE"},
	{35, "MAX_PPU_SHAPE_TYPE"},
	{-1, "ALL_SHAPE_TYPES"},
};
static const hkInternalClassEnum hkcdShapeTypeEnums[] = {
	{"ShapeTypeEnum", hkcdShapeTypeShapeTypeEnumEnumItems, 39, HK_NULL, 0 }
};
const hkClassEnum* hkcdShapeTypeShapeTypeEnumEnum = reinterpret_cast<const hkClassEnum*>(&hkcdShapeTypeEnums[0]);

//
// Class hkcdShapeType
//
extern const hkClass hkcdShapeTypeClass;
const hkClass hkcdShapeTypeClass(
	"hkcdShapeType",
	HK_NULL, // parent
	sizeof(::hkcdShapeType),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkcdShapeTypeEnums),
	1, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkcdShapeType::staticClass()
{
	return hkcdShapeTypeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkcdShapeType*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkcdShapeType(void* p)
{
	static_cast<hkcdShapeType*>(p)->~hkcdShapeType();
}
extern const hkTypeInfo hkcdShapeTypeTypeInfo;
const hkTypeInfo hkcdShapeTypeTypeInfo(
	"hkcdShapeType",
	"!hkcdShapeType",
	HK_NULL,
	cleanupLoadedObjecthkcdShapeType,
	HK_NULL,
	sizeof(hkcdShapeType)
	);
#endif

//
// Enum hkcdShapeDispatchType::ShapeDispatchTypeEnum
//
static const hkInternalClassEnumItem hkcdShapeDispatchTypeShapeDispatchTypeEnumEnumItems[] =
{
	{0, "CONVEX_IMPLICIT"},
	{1, "CONVEX"},
	{2, "HEIGHT_FIELD"},
	{3, "COMPOSITE"},
	{4, "USER"},
	{5, "NUM_DISPATCH_TYPES"},
};
static const hkInternalClassEnum hkcdShapeDispatchTypeEnums[] = {
	{"ShapeDispatchTypeEnum", hkcdShapeDispatchTypeShapeDispatchTypeEnumEnumItems, 6, HK_NULL, 0 }
};
const hkClassEnum* hkcdShapeDispatchTypeShapeDispatchTypeEnumEnum = reinterpret_cast<const hkClassEnum*>(&hkcdShapeDispatchTypeEnums[0]);

//
// Class hkcdShapeDispatchType
//
extern const hkClass hkcdShapeDispatchTypeClass;
const hkClass hkcdShapeDispatchTypeClass(
	"hkcdShapeDispatchType",
	HK_NULL, // parent
	sizeof(::hkcdShapeDispatchType),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkcdShapeDispatchTypeEnums),
	1, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkcdShapeDispatchType::staticClass()
{
	return hkcdShapeDispatchTypeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkcdShapeDispatchType*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkcdShapeDispatchType(void* p)
{
	static_cast<hkcdShapeDispatchType*>(p)->~hkcdShapeDispatchType();
}
extern const hkTypeInfo hkcdShapeDispatchTypeTypeInfo;
const hkTypeInfo hkcdShapeDispatchTypeTypeInfo(
	"hkcdShapeDispatchType",
	"!hkcdShapeDispatchType",
	HK_NULL,
	cleanupLoadedObjecthkcdShapeDispatchType,
	HK_NULL,
	sizeof(hkcdShapeDispatchType)
	);
#endif

//
// Enum hkcdShapeInfoCodecType::ShapeInfoCodecTypeEnum
//
static const hkInternalClassEnumItem hkcdShapeInfoCodecTypeShapeInfoCodecTypeEnumEnumItems[] =
{
	{0, "NULL_CODEC"},
	{1, "UFM358"},
	{16, "MAX_NUM_CODECS"},
};
static const hkInternalClassEnum hkcdShapeInfoCodecTypeEnums[] = {
	{"ShapeInfoCodecTypeEnum", hkcdShapeInfoCodecTypeShapeInfoCodecTypeEnumEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* hkcdShapeInfoCodecTypeShapeInfoCodecTypeEnumEnum = reinterpret_cast<const hkClassEnum*>(&hkcdShapeInfoCodecTypeEnums[0]);

//
// Class hkcdShapeInfoCodecType
//
extern const hkClass hkcdShapeInfoCodecTypeClass;
const hkClass hkcdShapeInfoCodecTypeClass(
	"hkcdShapeInfoCodecType",
	HK_NULL, // parent
	sizeof(::hkcdShapeInfoCodecType),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkcdShapeInfoCodecTypeEnums),
	1, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkcdShapeInfoCodecType::staticClass()
{
	return hkcdShapeInfoCodecTypeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkcdShapeInfoCodecType*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkcdShapeInfoCodecType(void* p)
{
	static_cast<hkcdShapeInfoCodecType*>(p)->~hkcdShapeInfoCodecType();
}
extern const hkTypeInfo hkcdShapeInfoCodecTypeTypeInfo;
const hkTypeInfo hkcdShapeInfoCodecTypeTypeInfo(
	"hkcdShapeInfoCodecType",
	"!hkcdShapeInfoCodecType",
	HK_NULL,
	cleanupLoadedObjecthkcdShapeInfoCodecType,
	HK_NULL,
	sizeof(hkcdShapeInfoCodecType)
	);
#endif

//
// Class hkcdShape
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkcdShapeClass_Members[] =
{
	{ "type", HK_NULL, HK_NULL, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkcdShape,m_type), HK_NULL },
	{ "dispatchType", HK_NULL, hkcdShapeDispatchTypeShapeDispatchTypeEnumEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkcdShape,m_dispatchType), HK_NULL },
	{ "bitsPerKey", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkcdShape,m_bitsPerKey), HK_NULL },
	{ "shapeInfoCodecType", HK_NULL, hkcdShapeInfoCodecTypeShapeInfoCodecTypeEnumEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkcdShape,m_shapeInfoCodecType), HK_NULL }
};
extern const hkClass hkcdShapeClass;
const hkClass hkcdShapeClass(
	"hkcdShape",
	&hkReferencedObjectClass, // parent
	sizeof(::hkcdShape),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkcdShapeClass_Members),
	HK_COUNT_OF(hkcdShapeClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkcdShape::staticClass()
{
	return hkcdShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkcdShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkcdShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkcdShape(f);
}
static void HK_CALL cleanupLoadedObjecthkcdShape(void* p)
{
	static_cast<hkcdShape*>(p)->~hkcdShape();
}
static const void* HK_CALL getVtablehkcdShape()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkcdShape).hash_code()));
	#else
	return ((const void*)(typeid(hkcdShape).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkcdShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkcdShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkcdShapeTypeInfo;
const hkTypeInfo hkcdShapeTypeInfo(
	"hkcdShape",
	"!hkcdShape",
	finishLoadedObjecthkcdShape,
	cleanupLoadedObjecthkcdShape,
	getVtablehkcdShape(),
	sizeof(hkcdShape)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
