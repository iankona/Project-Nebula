/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Constraint/Data/hkpConstraintData.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Constraint/Data/hkpConstraintData.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpConstraintAtomClass;

//
// Enum hkpConstraintData::ConstraintType
//
static const hkInternalClassEnumItem hkpConstraintDataConstraintTypeEnumItems[] =
{
	{0, "CONSTRAINT_TYPE_BALLANDSOCKET"},
	{1, "CONSTRAINT_TYPE_HINGE"},
	{2, "CONSTRAINT_TYPE_LIMITEDHINGE"},
	{3, "CONSTRAINT_TYPE_POINTTOPATH"},
	{6, "CONSTRAINT_TYPE_PRISMATIC"},
	{7, "CONSTRAINT_TYPE_RAGDOLL"},
	{8, "CONSTRAINT_TYPE_STIFFSPRING"},
	{9, "CONSTRAINT_TYPE_WHEEL"},
	{10, "CONSTRAINT_TYPE_GENERIC"},
	{11, "CONSTRAINT_TYPE_CONTACT"},
	{12, "CONSTRAINT_TYPE_BREAKABLE"},
	{13, "CONSTRAINT_TYPE_MALLEABLE"},
	{14, "CONSTRAINT_TYPE_POINTTOPLANE"},
	{15, "CONSTRAINT_TYPE_PULLEY"},
	{16, "CONSTRAINT_TYPE_ROTATIONAL"},
	{18, "CONSTRAINT_TYPE_HINGE_LIMITS"},
	{19, "CONSTRAINT_TYPE_RAGDOLL_LIMITS"},
	{20, "CONSTRAINT_TYPE_CUSTOM"},
	{21, "CONSTRAINT_TYPE_RACK_AND_PINION"},
	{22, "CONSTRAINT_TYPE_COG_WHEEL"},
	{23, "CONSTRAINT_TYPE_FIXED"},
	{24, "CONSTRAINT_TYPE_DEFORMABLE_FIXED"},
	{25, "CONSTRAINT_TYPE_LINEAR_SLACK"},
	{100, "BEGIN_CONSTRAINT_CHAIN_TYPES"},
	{100, "CONSTRAINT_TYPE_STIFF_SPRING_CHAIN"},
	{101, "CONSTRAINT_TYPE_BALL_SOCKET_CHAIN"},
	{102, "CONSTRAINT_TYPE_POWERED_CHAIN"},
};
static const hkInternalClassEnum hkpConstraintDataEnums[] = {
	{"ConstraintType", hkpConstraintDataConstraintTypeEnumItems, 27, HK_NULL, 0 }
};
const hkClassEnum* hkpConstraintDataConstraintTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkpConstraintDataEnums[0]);

//
// Class hkpConstraintData
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkpConstraintDataClass_Members[] =
{
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_ULONG, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpConstraintData,m_userData), HK_NULL }
};
namespace
{
	struct hkpConstraintData_DefaultStruct
	{
		int s_defaultOffsets[1];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hkpConstraintData_DefaultStruct hkpConstraintData_Default =
	{
		{hkClassMember::HK_CLASS_ZERO_DEFAULT},

	};
}
extern const hkClass hkpConstraintDataClass;
const hkClass hkpConstraintDataClass(
	"hkpConstraintData",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpConstraintData),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpConstraintDataEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpConstraintDataClass_Members),
	HK_COUNT_OF(hkpConstraintDataClass_Members),
	&hkpConstraintData_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpConstraintData::staticClass()
{
	return hkpConstraintDataClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
