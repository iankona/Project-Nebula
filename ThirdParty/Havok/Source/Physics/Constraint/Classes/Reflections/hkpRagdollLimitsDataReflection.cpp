/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Constraint/Data/RagdollLimits/hkpRagdollLimitsData.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Constraint/Data/RagdollLimits/hkpRagdollLimitsData.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpConeLimitConstraintAtomClass;
extern const hkClass hkpRagdollLimitsDataAtomsClass;
extern const hkClass hkpSetLocalRotationsConstraintAtomClass;
extern const hkClass hkpSolverResultsClass;
extern const hkClass hkpTwistLimitConstraintAtomClass;

//
// Enum hkpRagdollLimitsData::Atoms::Axis
//
static const hkInternalClassEnumItem hkpRagdollLimitsDataAtomsAxisEnumItems[] =
{
	{0, "AXIS_TWIST"},
	{1, "AXIS_PLANES"},
	{2, "AXIS_CROSS_PRODUCT"},
};
static const hkInternalClassEnum hkpRagdollLimitsDataAtomsEnums[] = {
	{"Axis", hkpRagdollLimitsDataAtomsAxisEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* hkpRagdollLimitsDataAtomsAxisEnum = reinterpret_cast<const hkClassEnum*>(&hkpRagdollLimitsDataAtomsEnums[0]);

//
// Class hkpRagdollLimitsData::Atoms
//
static const hkInternalClassMember hkpRagdollLimitsData_AtomsClass_Members[] =
{
	{ "rotations", &hkpSetLocalRotationsConstraintAtomClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpRagdollLimitsData::Atoms,m_rotations), HK_NULL },
	{ "twistLimit", &hkpTwistLimitConstraintAtomClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpRagdollLimitsData::Atoms,m_twistLimit), HK_NULL },
	{ "coneLimit", &hkpConeLimitConstraintAtomClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpRagdollLimitsData::Atoms,m_coneLimit), HK_NULL },
	{ "planesLimit", &hkpConeLimitConstraintAtomClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpRagdollLimitsData::Atoms,m_planesLimit), HK_NULL }
};
const hkClass hkpRagdollLimitsDataAtomsClass(
	"hkpRagdollLimitsDataAtoms",
	HK_NULL, // parent
	sizeof(hkpRagdollLimitsData::Atoms),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkpRagdollLimitsDataAtomsEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkpRagdollLimitsData_AtomsClass_Members),
	HK_COUNT_OF(hkpRagdollLimitsData_AtomsClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpRagdollLimitsData::Atoms::staticClass()
{
	return hkpRagdollLimitsDataAtomsClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpRagdollLimitsData::Atoms*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpRagdollLimitsDataAtoms(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpRagdollLimitsData::Atoms(f);
}
static void HK_CALL cleanupLoadedObjecthkpRagdollLimitsDataAtoms(void* p)
{
	static_cast<hkpRagdollLimitsData::Atoms*>(p)->~Atoms();
}
extern const hkTypeInfo hkpRagdollLimitsDataAtomsTypeInfo;
const hkTypeInfo hkpRagdollLimitsDataAtomsTypeInfo(
	"hkpRagdollLimitsDataAtoms",
	"!hkpRagdollLimitsData::Atoms",
	finishLoadedObjecthkpRagdollLimitsDataAtoms,
	cleanupLoadedObjecthkpRagdollLimitsDataAtoms,
	HK_NULL,
	sizeof(hkpRagdollLimitsData::Atoms)
	);
#endif

//
// Class hkpRagdollLimitsData
//
extern const hkClass hkpConstraintDataClass;

static const hkInternalClassMember hkpRagdollLimitsDataClass_Members[] =
{
	{ "atoms", &hkpRagdollLimitsDataAtomsClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::ALIGN_REAL, HK_OFFSET_OF(hkpRagdollLimitsData,m_atoms), HK_NULL }
};
extern const hkClass hkpRagdollLimitsDataClass;
const hkClass hkpRagdollLimitsDataClass(
	"hkpRagdollLimitsData",
	&hkpConstraintDataClass, // parent
	sizeof(::hkpRagdollLimitsData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpRagdollLimitsDataClass_Members),
	HK_COUNT_OF(hkpRagdollLimitsDataClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpRagdollLimitsData::staticClass()
{
	return hkpRagdollLimitsDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpRagdollLimitsData*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpRagdollLimitsData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpRagdollLimitsData(f);
}
static void HK_CALL cleanupLoadedObjecthkpRagdollLimitsData(void* p)
{
	static_cast<hkpRagdollLimitsData*>(p)->~hkpRagdollLimitsData();
}
static const void* HK_CALL getVtablehkpRagdollLimitsData()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpRagdollLimitsData).hash_code()));
	#else
	return ((const void*)(typeid(hkpRagdollLimitsData).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpRagdollLimitsData)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpRagdollLimitsData(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpRagdollLimitsDataTypeInfo;
const hkTypeInfo hkpRagdollLimitsDataTypeInfo(
	"hkpRagdollLimitsData",
	"!hkpRagdollLimitsData",
	finishLoadedObjecthkpRagdollLimitsData,
	cleanupLoadedObjecthkpRagdollLimitsData,
	getVtablehkpRagdollLimitsData(),
	sizeof(hkpRagdollLimitsData)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
