/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Dynamics/Material/hknpMaterial.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Dynamics/Material/hknpMaterial.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkUFloat8Class;
extern const hkClass hknpMaterialClass;
extern const hkClass hknpMaterialIdClass;
extern const hkClass hknpRefMaterialClass;
extern const hkClass hknpSurfaceVelocityClass;
extern const hkClassEnum* hknpMaterialCombinePolicyEnum;
extern const hkClassEnum* hknpMaterialFlagsEnumEnum;
extern const hkClassEnum* hknpMaterialMassChangerCategoryEnum;
extern const hkClassEnum* hknpMaterialTriggerVolumeTypeEnum;

//
// Enum hknpMaterial::FlagsEnum
//
static const hkInternalClassEnumItem hknpMaterialFlagsEnumEnumItems[] =
{
	{1048576, "ENABLE_RESTITUTION"},
	{2097152, "ENABLE_TRIGGER_VOLUME"},
	{4194304, "ENABLE_IMPULSE_CLIPPING"},
	{8388608, "ENABLE_MASS_CHANGER"},
	{16777216, "ENABLE_SOFT_CONTACTS"},
	{33554432, "ENABLE_SURFACE_VELOCITY"},
	{67108864, "USER_FLAG_0"},
	{134217728, "USER_FLAG_1"},
	{268435456, "USER_FLAG_2"},
	{536870912, "USER_FLAG_3"},
	{1073741824, "USER_FLAG_4"},
	{4293918720u, "FLAGS_MASK"},
	{66060288, "AUTO_FLAGS_MASK"},
};

//
// Enum hknpMaterial::CombinePolicy
//
static const hkInternalClassEnumItem hknpMaterialCombinePolicyEnumItems[] =
{
	{0, "COMBINE_AVG"},
	{1, "COMBINE_MIN"},
	{2, "COMBINE_MAX"},
};

//
// Enum hknpMaterial::TriggerVolumeType
//
static const hkInternalClassEnumItem hknpMaterialTriggerVolumeTypeEnumItems[] =
{
	{0, "TRIGGER_VOLUME_NONE"},
	{1, "TRIGGER_VOLUME_LOW_QUALITY"},
	{2, "TRIGGER_VOLUME_HIGH_QUALITY"},
};

//
// Enum hknpMaterial::MassChangerCategory
//
static const hkInternalClassEnumItem hknpMaterialMassChangerCategoryEnumItems[] =
{
	{0, "MASS_CHANGER_IGNORE"},
	{1, "MASS_CHANGER_DEBRIS"},
	{2, "MASS_CHANGER_HEAVY"},
};
static const hkInternalClassEnum hknpMaterialEnums[] = {
	{"FlagsEnum", hknpMaterialFlagsEnumEnumItems, 13, HK_NULL, 0 },
	{"CombinePolicy", hknpMaterialCombinePolicyEnumItems, 3, HK_NULL, 0 },
	{"TriggerVolumeType", hknpMaterialTriggerVolumeTypeEnumItems, 3, HK_NULL, 0 },
	{"MassChangerCategory", hknpMaterialMassChangerCategoryEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* hknpMaterialFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpMaterialEnums[0]);
const hkClassEnum* hknpMaterialCombinePolicyEnum = reinterpret_cast<const hkClassEnum*>(&hknpMaterialEnums[1]);
const hkClassEnum* hknpMaterialTriggerVolumeTypeEnum = reinterpret_cast<const hkClassEnum*>(&hknpMaterialEnums[2]);
const hkClassEnum* hknpMaterialMassChangerCategoryEnum = reinterpret_cast<const hkClassEnum*>(&hknpMaterialEnums[3]);

//
// Class hknpMaterial
//
const hkInternalClassMember hknpMaterial::Members[] =
{
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::ALIGN_16, HK_OFFSET_OF(hknpMaterial,m_name), HK_NULL },
	{ "isExclusive", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_isExclusive), HK_NULL },
	{ "flags", HK_NULL, hknpMaterialFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hknpMaterial,m_flags), HK_NULL },
	{ "dynamicFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_dynamicFriction), HK_NULL },
	{ "staticFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_staticFriction), HK_NULL },
	{ "restitution", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_restitution), HK_NULL },
	{ "frictionCombinePolicy", HK_NULL, hknpMaterialCombinePolicyEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpMaterial,m_frictionCombinePolicy), HK_NULL },
	{ "restitutionCombinePolicy", HK_NULL, hknpMaterialCombinePolicyEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpMaterial,m_restitutionCombinePolicy), HK_NULL },
	{ "weldingTolerance", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_weldingTolerance), HK_NULL },
	{ "triggerVolumeType", HK_NULL, hknpMaterialTriggerVolumeTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpMaterial,m_triggerVolumeType), HK_NULL },
	{ "triggerVolumeTolerance", &hkUFloat8Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_triggerVolumeTolerance), HK_NULL },
	{ "maxContactImpulse", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_maxContactImpulse), HK_NULL },
	{ "fractionOfClippedImpulseToApply", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_fractionOfClippedImpulseToApply), HK_NULL },
	{ "massChangerCategory", HK_NULL, hknpMaterialMassChangerCategoryEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpMaterial,m_massChangerCategory), HK_NULL },
	{ "massChangerHeavyObjectFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_massChangerHeavyObjectFactor), HK_NULL },
	{ "softContactForceFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_softContactForceFactor), HK_NULL },
	{ "softContactDampFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_softContactDampFactor), HK_NULL },
	{ "softContactSeperationVelocity", &hkUFloat8Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_softContactSeperationVelocity), HK_NULL },
	{ "surfaceVelocity", &hknpSurfaceVelocityClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpMaterial,m_surfaceVelocity), HK_NULL },
	{ "disablingCollisionsBetweenCvxCvxDynamicObjectsDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_disablingCollisionsBetweenCvxCvxDynamicObjectsDistance), HK_NULL },
	{ "isShared", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterial,m_isShared), HK_NULL }
};
const hkClass hknpMaterialClass(
	"hknpMaterial",
	HK_NULL, // parent
	sizeof(::hknpMaterial),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpMaterialEnums),
	4, // enums
	reinterpret_cast<const hkClassMember*>(hknpMaterial::Members),
	HK_COUNT_OF(hknpMaterial::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpMaterial::staticClass()
{
	return hknpMaterialClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpMaterial*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpMaterial(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpMaterial(f);
}
static void HK_CALL cleanupLoadedObjecthknpMaterial(void* p)
{
	static_cast<hknpMaterial*>(p)->~hknpMaterial();
}
extern const hkTypeInfo hknpMaterialTypeInfo;
const hkTypeInfo hknpMaterialTypeInfo(
	"hknpMaterial",
	"!hknpMaterial",
	finishLoadedObjecthknpMaterial,
	cleanupLoadedObjecthknpMaterial,
	HK_NULL,
	sizeof(hknpMaterial)
	);
#endif

//
// Class hknpRefMaterial
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hknpRefMaterialClass_Members[] =
{
	{ "material", &hknpMaterialClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpRefMaterial,m_material), HK_NULL }
};
const hkClass hknpRefMaterialClass(
	"hknpRefMaterial",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpRefMaterial),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpRefMaterialClass_Members),
	HK_COUNT_OF(hknpRefMaterialClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpRefMaterial::staticClass()
{
	return hknpRefMaterialClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpRefMaterial*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpRefMaterial(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpRefMaterial(f);
}
static void HK_CALL cleanupLoadedObjecthknpRefMaterial(void* p)
{
	static_cast<hknpRefMaterial*>(p)->~hknpRefMaterial();
}
static const void* HK_CALL getVtablehknpRefMaterial()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpRefMaterial).hash_code()));
	#else
	return ((const void*)(typeid(hknpRefMaterial).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpRefMaterial)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpRefMaterial(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpRefMaterialTypeInfo;
const hkTypeInfo hknpRefMaterialTypeInfo(
	"hknpRefMaterial",
	"!hknpRefMaterial",
	finishLoadedObjecthknpRefMaterial,
	cleanupLoadedObjecthknpRefMaterial,
	getVtablehknpRefMaterial(),
	sizeof(hknpRefMaterial)
	);
#endif

//
// Class hknpMaterialDescriptor
//
static const hkInternalClassMember hknpMaterialDescriptorClass_Members[] =
{
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterialDescriptor,m_name), HK_NULL },
	{ "material", &hknpRefMaterialClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpMaterialDescriptor,m_material), HK_NULL },
	{ "materialId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMaterialDescriptor,m_materialId), HK_NULL }
};
extern const hkClass hknpMaterialDescriptorClass;
const hkClass hknpMaterialDescriptorClass(
	"hknpMaterialDescriptor",
	HK_NULL, // parent
	sizeof(::hknpMaterialDescriptor),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpMaterialDescriptorClass_Members),
	HK_COUNT_OF(hknpMaterialDescriptorClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpMaterialDescriptor::staticClass()
{
	return hknpMaterialDescriptorClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpMaterialDescriptor*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpMaterialDescriptor(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpMaterialDescriptor(f);
}
static void HK_CALL cleanupLoadedObjecthknpMaterialDescriptor(void* p)
{
	static_cast<hknpMaterialDescriptor*>(p)->~hknpMaterialDescriptor();
}
extern const hkTypeInfo hknpMaterialDescriptorTypeInfo;
const hkTypeInfo hknpMaterialDescriptorTypeInfo(
	"hknpMaterialDescriptor",
	"!hknpMaterialDescriptor",
	finishLoadedObjecthknpMaterialDescriptor,
	cleanupLoadedObjecthknpMaterialDescriptor,
	HK_NULL,
	sizeof(hknpMaterialDescriptor)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
