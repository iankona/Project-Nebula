/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Dynamics/Body/hknpBodyQuality.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Dynamics/Body/hknpBodyQuality.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* hknpBodyQualityFlagsEnumEnum;

//
// Enum hknpBodyQuality::FlagsEnum
//
static const hkInternalClassEnumItem hknpBodyQualityFlagsEnumEnumItems[] =
{
	{1, "DROP_MANIFOLD_CACHE"},
	{2, "FORCE_GSK_EXECUTION"},
	{4, "FORCE_GSK_SINGLE_POINT_MANIFOLD"},
	{8, "ALLOW_CONCAVE_TRIANGLE_COLLISIONS"},
	{16, "ENABLE_SILHOUETTE_MANIFOLDS"},
	{32, "ENABLE_LIVE_JACOBIANS"},
	{64, "USE_HIGHER_QUALITY_CONTACT_SOLVING"},
	{128, "ENABLE_NEIGHBOR_WELDING"},
	{256, "ENABLE_MOTION_WELDING"},
	{512, "ENABLE_TRIANGLE_WELDING"},
	{896, "ANY_WELDING"},
	{65536, "FIRST_NON_CACHABLE_FLAG"},
	{65536, "CLIP_ANGULAR_VELOCITY"},
	{131072, "USE_DISCRETE_AABB_EXPANSION"},
	{262144, "MERGE_FRICTION_JACOBIANS"},
};
static const hkInternalClassEnum hknpBodyQualityEnums[] = {
	{"FlagsEnum", hknpBodyQualityFlagsEnumEnumItems, 15, HK_NULL, 0 }
};
const hkClassEnum* hknpBodyQualityFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpBodyQualityEnums[0]);

//
// Class hknpBodyQuality
//
static const hkInternalClassMember hknpBodyQualityClass_Members[] =
{
	{ "priority", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyQuality,m_priority), HK_NULL },
	{ "supportedFlags", HK_NULL, hknpBodyQualityFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hknpBodyQuality,m_supportedFlags), HK_NULL },
	{ "requestedFlags", HK_NULL, hknpBodyQualityFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hknpBodyQuality,m_requestedFlags), HK_NULL },
	{ "liveJacobianDistanceThreshold", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyQuality,m_liveJacobianDistanceThreshold), HK_NULL },
	{ "liveJacobianAngleThreshold", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyQuality,m_liveJacobianAngleThreshold), HK_NULL }
};
extern const hkClass hknpBodyQualityClass;
const hkClass hknpBodyQualityClass(
	"hknpBodyQuality",
	HK_NULL, // parent
	sizeof(::hknpBodyQuality),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpBodyQualityEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hknpBodyQualityClass_Members),
	HK_COUNT_OF(hknpBodyQualityClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpBodyQuality::staticClass()
{
	return hknpBodyQualityClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpBodyQuality*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpBodyQuality(void* p)
{
	static_cast<hknpBodyQuality*>(p)->~hknpBodyQuality();
}
extern const hkTypeInfo hknpBodyQualityTypeInfo;
const hkTypeInfo hknpBodyQualityTypeInfo(
	"hknpBodyQuality",
	"!hknpBodyQuality",
	HK_NULL,
	cleanupLoadedObjecthknpBodyQuality,
	HK_NULL,
	sizeof(hknpBodyQuality)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
