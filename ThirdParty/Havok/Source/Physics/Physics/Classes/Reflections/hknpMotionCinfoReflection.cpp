/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Dynamics/Motion/hknpMotionCinfo.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Dynamics/Motion/hknpMotionCinfo.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpMotionPropertiesIdClass;

//
// Class hknpMotionCinfo
//
static const hkInternalClassMember hknpMotionCinfoClass_Members[] =
{
	{ "motionPropertiesId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_motionPropertiesId), HK_NULL },
	{ "enableDeactivation", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_enableDeactivation), HK_NULL },
	{ "inverseMass", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_inverseMass), HK_NULL },
	{ "massFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_massFactor), HK_NULL },
	{ "maxLinearAccelerationDistancePerStep", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_maxLinearAccelerationDistancePerStep), HK_NULL },
	{ "maxRotationToPreventTunneling", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_maxRotationToPreventTunneling), HK_NULL },
	{ "inverseInertiaLocal", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_inverseInertiaLocal), HK_NULL },
	{ "centerOfMassWorld", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_centerOfMassWorld), HK_NULL },
	{ "orientation", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_orientation), HK_NULL },
	{ "linearVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_linearVelocity), HK_NULL },
	{ "angularVelocity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpMotionCinfo,m_angularVelocity), HK_NULL }
};
namespace
{
	struct hknpMotionCinfo_DefaultStruct
	{
		int s_defaultOffsets[11];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		_hkBool m_enableDeactivation;
		float m_inverseMass;
		float m_massFactor;
		float m_maxLinearAccelerationDistancePerStep;
		float m_maxRotationToPreventTunneling;
		_hkVector4 m_centerOfMassWorld;
		_hkQuaternion m_orientation;
		_hkVector4 m_linearVelocity;
		_hkVector4 m_angularVelocity;
	};
	const hknpMotionCinfo_DefaultStruct hknpMotionCinfo_Default =
	{
		{-1,HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_enableDeactivation),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_inverseMass),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_massFactor),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_maxLinearAccelerationDistancePerStep),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_maxRotationToPreventTunneling),-1,HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_centerOfMassWorld),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_orientation),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_linearVelocity),HK_OFFSET_OF(hknpMotionCinfo_DefaultStruct,m_angularVelocity)},
true,1.0f,1.0f,HK_REAL_HIGH,HK_REAL_HIGH,	{0.0f,0.0f,0.0f,0.0f},	{0.0f,0.0f,0.0f,1.0f},	{0.0f,0.0f,0.0f,0.0f},	{0.0f,0.0f,0.0f,0.0f}
	};
}
extern const hkClass hknpMotionCinfoClass;
const hkClass hknpMotionCinfoClass(
	"hknpMotionCinfo",
	HK_NULL, // parent
	sizeof(::hknpMotionCinfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpMotionCinfoClass_Members),
	HK_COUNT_OF(hknpMotionCinfoClass_Members),
	&hknpMotionCinfo_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpMotionCinfo::staticClass()
{
	return hknpMotionCinfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpMotionCinfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpMotionCinfo(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpMotionCinfo(f);
}
static void HK_CALL cleanupLoadedObjecthknpMotionCinfo(void* p)
{
	static_cast<hknpMotionCinfo*>(p)->~hknpMotionCinfo();
}
extern const hkTypeInfo hknpMotionCinfoTypeInfo;
const hkTypeInfo hknpMotionCinfoTypeInfo(
	"hknpMotionCinfo",
	"!hknpMotionCinfo",
	finishLoadedObjecthknpMotionCinfo,
	cleanupLoadedObjecthknpMotionCinfo,
	HK_NULL,
	sizeof(hknpMotionCinfo)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
