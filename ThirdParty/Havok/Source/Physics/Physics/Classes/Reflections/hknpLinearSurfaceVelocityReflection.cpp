/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Dynamics/Modifier/SurfaceVelocity/LinearSurfaceVelocity/hknpLinearSurfaceVelocity.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Dynamics/Modifier/SurfaceVelocity/LinearSurfaceVelocity/hknpLinearSurfaceVelocity.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* hknpLinearSurfaceVelocityProjectMethodEnum;
extern const hkClassEnum* hknpSurfaceVelocitySpaceEnum;

//
// Enum hknpLinearSurfaceVelocity::ProjectMethod
//
static const hkInternalClassEnumItem hknpLinearSurfaceVelocityProjectMethodEnumItems[] =
{
	{0, "VELOCITY_PROJECT"},
	{1, "VELOCITY_RESCALE"},
};
static const hkInternalClassEnum hknpLinearSurfaceVelocityEnums[] = {
	{"ProjectMethod", hknpLinearSurfaceVelocityProjectMethodEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hknpLinearSurfaceVelocityProjectMethodEnum = reinterpret_cast<const hkClassEnum*>(&hknpLinearSurfaceVelocityEnums[0]);

//
// Class hknpLinearSurfaceVelocity
//
extern const hkClass hknpSurfaceVelocityClass;

static const hkInternalClassMember hknpLinearSurfaceVelocityClass_Members[] =
{
	{ "space", HK_NULL, hknpSurfaceVelocitySpaceEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpLinearSurfaceVelocity,m_space), HK_NULL },
	{ "projectMethod", HK_NULL, hknpLinearSurfaceVelocityProjectMethodEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpLinearSurfaceVelocity,m_projectMethod), HK_NULL },
	{ "maxVelocityScale", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpLinearSurfaceVelocity,m_maxVelocityScale), HK_NULL },
	{ "velocityMeasurePlane", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpLinearSurfaceVelocity,m_velocityMeasurePlane), HK_NULL },
	{ "velocity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpLinearSurfaceVelocity,m_velocity), HK_NULL }
};
extern const hkClass hknpLinearSurfaceVelocityClass;
const hkClass hknpLinearSurfaceVelocityClass(
	"hknpLinearSurfaceVelocity",
	&hknpSurfaceVelocityClass, // parent
	sizeof(::hknpLinearSurfaceVelocity),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpLinearSurfaceVelocityEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hknpLinearSurfaceVelocityClass_Members),
	HK_COUNT_OF(hknpLinearSurfaceVelocityClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpLinearSurfaceVelocity::staticClass()
{
	return hknpLinearSurfaceVelocityClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpLinearSurfaceVelocity*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpLinearSurfaceVelocity(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpLinearSurfaceVelocity(f);
}
static void HK_CALL cleanupLoadedObjecthknpLinearSurfaceVelocity(void* p)
{
	static_cast<hknpLinearSurfaceVelocity*>(p)->~hknpLinearSurfaceVelocity();
}
static const void* HK_CALL getVtablehknpLinearSurfaceVelocity()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpLinearSurfaceVelocity).hash_code()));
	#else
	return ((const void*)(typeid(hknpLinearSurfaceVelocity).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpLinearSurfaceVelocity)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpLinearSurfaceVelocity(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpLinearSurfaceVelocityTypeInfo;
const hkTypeInfo hknpLinearSurfaceVelocityTypeInfo(
	"hknpLinearSurfaceVelocity",
	"!hknpLinearSurfaceVelocity",
	finishLoadedObjecthknpLinearSurfaceVelocity,
	cleanupLoadedObjecthknpLinearSurfaceVelocity,
	getVtablehknpLinearSurfaceVelocity(),
	sizeof(hknpLinearSurfaceVelocity)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
