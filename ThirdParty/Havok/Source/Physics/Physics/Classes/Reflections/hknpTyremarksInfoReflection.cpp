/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Extensions/Vehicle/TyreMarks/hknpTyremarksInfo.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Extensions/Vehicle/TyreMarks/hknpTyremarksInfo.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpTyremarkPointClass;
extern const hkClass hknpTyremarksWheelClass;

//
// Class hknpTyremarkPoint
//
static const hkInternalClassMember hknpTyremarkPointClass_Members[] =
{
	{ "pointLeft", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarkPoint,m_pointLeft), HK_NULL },
	{ "pointRight", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarkPoint,m_pointRight), HK_NULL }
};
const hkClass hknpTyremarkPointClass(
	"hknpTyremarkPoint",
	HK_NULL, // parent
	sizeof(::hknpTyremarkPoint),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpTyremarkPointClass_Members),
	HK_COUNT_OF(hknpTyremarkPointClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpTyremarkPoint::staticClass()
{
	return hknpTyremarkPointClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpTyremarkPoint*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpTyremarkPoint(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpTyremarkPoint(f);
}
static void HK_CALL cleanupLoadedObjecthknpTyremarkPoint(void* p)
{
	static_cast<hknpTyremarkPoint*>(p)->~hknpTyremarkPoint();
}
extern const hkTypeInfo hknpTyremarkPointTypeInfo;
const hkTypeInfo hknpTyremarkPointTypeInfo(
	"hknpTyremarkPoint",
	"!hknpTyremarkPoint",
	finishLoadedObjecthknpTyremarkPoint,
	cleanupLoadedObjecthknpTyremarkPoint,
	HK_NULL,
	sizeof(hknpTyremarkPoint)
	);
#endif

//
// Class hknpTyremarksWheel
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hknpTyremarksWheelClass_Members[] =
{
	{ "currentPosition", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarksWheel,m_currentPosition), HK_NULL },
	{ "numPoints", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarksWheel,m_numPoints), HK_NULL },
	{ "tyremarkPoints", &hknpTyremarkPointClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpTyremarksWheel,m_tyremarkPoints), HK_NULL }
};
const hkClass hknpTyremarksWheelClass(
	"hknpTyremarksWheel",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpTyremarksWheel),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpTyremarksWheelClass_Members),
	HK_COUNT_OF(hknpTyremarksWheelClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpTyremarksWheel::staticClass()
{
	return hknpTyremarksWheelClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpTyremarksWheel*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpTyremarksWheel(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpTyremarksWheel(f);
}
static void HK_CALL cleanupLoadedObjecthknpTyremarksWheel(void* p)
{
	static_cast<hknpTyremarksWheel*>(p)->~hknpTyremarksWheel();
}
static const void* HK_CALL getVtablehknpTyremarksWheel()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpTyremarksWheel).hash_code()));
	#else
	return ((const void*)(typeid(hknpTyremarksWheel).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpTyremarksWheel)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpTyremarksWheel(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpTyremarksWheelTypeInfo;
const hkTypeInfo hknpTyremarksWheelTypeInfo(
	"hknpTyremarksWheel",
	"!hknpTyremarksWheel",
	finishLoadedObjecthknpTyremarksWheel,
	cleanupLoadedObjecthknpTyremarksWheel,
	getVtablehknpTyremarksWheel(),
	sizeof(hknpTyremarksWheel)
	);
#endif

//
// Class hknpTyremarksInfo
//

static const hkInternalClassMember hknpTyremarksInfoClass_Members[] =
{
	{ "minTyremarkEnergy", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarksInfo,m_minTyremarkEnergy), HK_NULL },
	{ "maxTyremarkEnergy", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpTyremarksInfo,m_maxTyremarkEnergy), HK_NULL },
	{ "tyremarksWheel", &hknpTyremarksWheelClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hknpTyremarksInfo,m_tyremarksWheel), HK_NULL }
};
extern const hkClass hknpTyremarksInfoClass;
const hkClass hknpTyremarksInfoClass(
	"hknpTyremarksInfo",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpTyremarksInfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpTyremarksInfoClass_Members),
	HK_COUNT_OF(hknpTyremarksInfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpTyremarksInfo::staticClass()
{
	return hknpTyremarksInfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpTyremarksInfo*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpTyremarksInfo(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpTyremarksInfo(f);
}
static void HK_CALL cleanupLoadedObjecthknpTyremarksInfo(void* p)
{
	static_cast<hknpTyremarksInfo*>(p)->~hknpTyremarksInfo();
}
static const void* HK_CALL getVtablehknpTyremarksInfo()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpTyremarksInfo).hash_code()));
	#else
	return ((const void*)(typeid(hknpTyremarksInfo).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpTyremarksInfo)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpTyremarksInfo(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpTyremarksInfoTypeInfo;
const hkTypeInfo hknpTyremarksInfoTypeInfo(
	"hknpTyremarksInfo",
	"!hknpTyremarksInfo",
	finishLoadedObjecthknpTyremarksInfo,
	cleanupLoadedObjecthknpTyremarksInfo,
	getVtablehknpTyremarksInfo(),
	sizeof(hknpTyremarksInfo)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
