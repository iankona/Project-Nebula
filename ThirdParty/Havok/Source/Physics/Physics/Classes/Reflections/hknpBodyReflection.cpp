/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Dynamics/Body/hknpBody.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Dynamics/Body/hknpBody.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkAabb16Class;
extern const hkClass hkLocalFrameClass;
extern const hkClass hknpBodyIdClass;
extern const hkClass hknpBodyQualityIdClass;
extern const hkClass hknpMaterialIdClass;
extern const hkClass hknpMotionIdClass;
extern const hkClass hknpShapeClass;
extern const hkClassEnum* hknpBodyFlagsEnumEnum;
extern const hkClassEnum* hknpBodySpuFlagsEnumEnum;

//
// Enum hknpBody::FlagsEnum
//
static const hkInternalClassEnumItem hknpBodyFlagsEnumEnumItems[] =
{
	{1, "IS_STATIC"},
	{2, "IS_DYNAMIC"},
	{4, "IS_KEYFRAMED"},
	{8, "IS_ACTIVE"},
	{16, "RAISE_TRIGGER_VOLUME_EVENTS"},
	{32, "RAISE_MANIFOLD_STATUS_EVENTS"},
	{64, "RAISE_MANIFOLD_PROCESSED_EVENTS"},
	{128, "RAISE_CONTACT_IMPULSE_EVENTS"},
	{256, "DONT_COLLIDE"},
	{512, "DONT_BUILD_CONTACT_JACOBIANS"},
	{1024, "TEMP_REBUILD_COLLISION_CACHES"},
	{2048, "TEMP_DROP_NEW_CVX_CVX_COLLISIONS"},
	{4096, "TEMP_USER_FLAG_0"},
	{8192, "TEMP_USER_FLAG_1"},
	{16384, "IS_NON_RUNTIME"},
	{32768, "IS_BREAKABLE"},
	{65536, "USER_FLAG_0"},
	{131072, "USER_FLAG_1"},
	{262144, "USER_FLAG_2"},
	{524288, "USER_FLAG_3"},
	{1048575, "FLAGS_MASK"},
	{15, "INTERNAL_FLAGS_MASK"},
	{240, "EVENT_FLAGS_MASK"},
	{15360, "TEMP_FLAGS_MASK"},
};

//
// Enum hknpBody::SpuFlagsEnum
//
static const hkInternalClassEnumItem hknpBodySpuFlagsEnumEnumItems[] =
{
	{1, "FORCE_NARROW_PHASE_PPU"},
};
static const hkInternalClassEnum hknpBodyEnums[] = {
	{"FlagsEnum", hknpBodyFlagsEnumEnumItems, 24, HK_NULL, 0 },
	{"SpuFlagsEnum", hknpBodySpuFlagsEnumEnumItems, 1, HK_NULL, 0 }
};
const hkClassEnum* hknpBodyFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpBodyEnums[0]);
const hkClassEnum* hknpBodySpuFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpBodyEnums[1]);

//
// Class hknpBody
//
extern const hkClass hkPackedUnitVector4Class;

const hkInternalClassMember hknpBody::Members[] =
{
	{ "transform", HK_NULL, HK_NULL, hkClassMember::TYPE_TRANSFORM, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_transform), HK_NULL },
	{ "aabb", &hkAabb16Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_aabb), HK_NULL },
	{ "shape", &hknpShapeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpBody,m_shape), HK_NULL },
	{ "flags", HK_NULL, hknpBodyFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hknpBody,m_flags), HK_NULL },
	{ "collisionFilterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_collisionFilterInfo), HK_NULL },
	{ "id", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_id), HK_NULL },
	{ "nextAttachedBodyId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_nextAttachedBodyId), HK_NULL },
	{ "motionId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_motionId), HK_NULL },
	{ "materialId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_materialId), HK_NULL },
	{ "qualityId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_qualityId), HK_NULL },
	{ "shapeSizeDiv16", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_shapeSizeDiv16), HK_NULL },
	{ "broadPhaseId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_broadPhaseId), HK_NULL },
	{ "indexIntoActiveListOrDeactivatedIslandId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_indexIntoActiveListOrDeactivatedIslandId), HK_NULL },
	{ "radiusOfComCenteredBoundingSphere", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_radiusOfComCenteredBoundingSphere), HK_NULL },
	{ "maxContactDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_maxContactDistance), HK_NULL },
	{ "maxTimDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_maxTimDistance), HK_NULL },
	{ "timAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_timAngle), HK_NULL },
	{ "spuFlags", HK_NULL, hknpBodySpuFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpBody,m_spuFlags), HK_NULL },
	{ "motionToBodyRotation", HK_NULL, HK_NULL, hkClassMember::TYPE_INT16, hkClassMember::TYPE_VOID, 4, 0, HK_OFFSET_OF(hknpBody,m_motionToBodyRotation), HK_NULL },
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT64, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBody,m_userData), HK_NULL }
};
namespace
{
	struct hknpBody_DefaultStruct
	{
		int s_defaultOffsets[20];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
	};
	const hknpBody_DefaultStruct hknpBody_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1},

	};
}
extern const hkClass hknpBodyClass;
const hkClass hknpBodyClass(
	"hknpBody",
	HK_NULL, // parent
	sizeof(::hknpBody),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpBodyEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hknpBody::Members),
	HK_COUNT_OF(hknpBody::Members),
	&hknpBody_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpBody::staticClass()
{
	return hknpBodyClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpBody*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpBody(void* p)
{
	static_cast<hknpBody*>(p)->~hknpBody();
}
extern const hkTypeInfo hknpBodyTypeInfo;
const hkTypeInfo hknpBodyTypeInfo(
	"hknpBody",
	"!hknpBody",
	HK_NULL,
	cleanupLoadedObjecthknpBody,
	HK_NULL,
	sizeof(hknpBody)
	);
#endif

//
// Class hknpBodyCinfo
//
static const hkInternalClassMember hknpBodyCinfoClass_Members[] =
{
	{ "shape", &hknpShapeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0|hkClassMember::NOT_OWNED, HK_OFFSET_OF(hknpBodyCinfo,m_shape), HK_NULL },
	{ "reservedBodyId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_reservedBodyId), HK_NULL },
	{ "motionId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_motionId), HK_NULL },
	{ "qualityId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_qualityId), HK_NULL },
	{ "materialId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_materialId), HK_NULL },
	{ "collisionFilterInfo", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_collisionFilterInfo), HK_NULL },
	{ "flags", HK_NULL, hknpBodyFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_flags), HK_NULL },
	{ "collisionLookAheadDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_collisionLookAheadDistance), HK_NULL },
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_name), HK_NULL },
	{ "position", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_position), HK_NULL },
	{ "orientation", HK_NULL, HK_NULL, hkClassMember::TYPE_QUATERNION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_orientation), HK_NULL },
	{ "spuFlags", HK_NULL, hknpBodySpuFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_spuFlags), HK_NULL },
	{ "localFrame", &hkLocalFrameClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpBodyCinfo,m_localFrame), HK_NULL }
};
namespace
{
	struct hknpBodyCinfo_DefaultStruct
	{
		int s_defaultOffsets[13];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		_hkQuaternion m_orientation;
	};
	const hknpBodyCinfo_DefaultStruct hknpBodyCinfo_Default =
	{
		{-1,-1,-1,-1,-1,hkClassMember::HK_CLASS_ZERO_DEFAULT,hkClassMember::HK_CLASS_ZERO_DEFAULT,hkClassMember::HK_CLASS_ZERO_DEFAULT,-1,-1,HK_OFFSET_OF(hknpBodyCinfo_DefaultStruct,m_orientation),hkClassMember::HK_CLASS_ZERO_DEFAULT,-1},
		{0.0f,0.0f,0.0f,1.0f}
	};
}
extern const hkClass hknpBodyCinfoClass;
const hkClass hknpBodyCinfoClass(
	"hknpBodyCinfo",
	HK_NULL, // parent
	sizeof(::hknpBodyCinfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpBodyCinfoClass_Members),
	HK_COUNT_OF(hknpBodyCinfoClass_Members),
	&hknpBodyCinfo_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpBodyCinfo::staticClass()
{
	return hknpBodyCinfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpBodyCinfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpBodyCinfo(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpBodyCinfo(f);
}
static void HK_CALL cleanupLoadedObjecthknpBodyCinfo(void* p)
{
	static_cast<hknpBodyCinfo*>(p)->~hknpBodyCinfo();
}
extern const hkTypeInfo hknpBodyCinfoTypeInfo;
const hkTypeInfo hknpBodyCinfoTypeInfo(
	"hknpBodyCinfo",
	"!hknpBodyCinfo",
	finishLoadedObjecthknpBodyCinfo,
	cleanupLoadedObjecthknpBodyCinfo,
	HK_NULL,
	sizeof(hknpBodyCinfo)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
