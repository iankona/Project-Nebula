/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Extensions/Vehicle/hknpVehicleData.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Extensions/Vehicle/hknpVehicleData.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpVehicleDataWheelComponentParamsClass;
extern const hkClass hkpVehicleFrictionDescriptionClass;

//
// Class hknpVehicleData::WheelComponentParams
//
static const hkInternalClassMember hknpVehicleData_WheelComponentParamsClass_Members[] =
{
	{ "radius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_radius), HK_NULL },
	{ "mass", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_mass), HK_NULL },
	{ "width", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_width), HK_NULL },
	{ "friction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_friction), HK_NULL },
	{ "viscosityFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_viscosityFriction), HK_NULL },
	{ "maxFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_maxFriction), HK_NULL },
	{ "slipAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_slipAngle), HK_NULL },
	{ "forceFeedbackMultiplier", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_forceFeedbackMultiplier), HK_NULL },
	{ "maxContactBodyAcceleration", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_maxContactBodyAcceleration), HK_NULL },
	{ "axle", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData::WheelComponentParams,m_axle), HK_NULL }
};
const hkClass hknpVehicleDataWheelComponentParamsClass(
	"hknpVehicleDataWheelComponentParams",
	HK_NULL, // parent
	sizeof(hknpVehicleData::WheelComponentParams),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleData_WheelComponentParamsClass_Members),
	HK_COUNT_OF(hknpVehicleData_WheelComponentParamsClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleData::WheelComponentParams::staticClass()
{
	return hknpVehicleDataWheelComponentParamsClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleData::WheelComponentParams*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpVehicleDataWheelComponentParams(void* p)
{
	static_cast<hknpVehicleData::WheelComponentParams*>(p)->~WheelComponentParams();
}
extern const hkTypeInfo hknpVehicleDataWheelComponentParamsTypeInfo;
const hkTypeInfo hknpVehicleDataWheelComponentParamsTypeInfo(
	"hknpVehicleDataWheelComponentParams",
	"!hknpVehicleData::WheelComponentParams",
	HK_NULL,
	cleanupLoadedObjecthknpVehicleDataWheelComponentParams,
	HK_NULL,
	sizeof(hknpVehicleData::WheelComponentParams)
	);
#endif

//
// Class hknpVehicleData
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hknpVehicleDataClass_Members[] =
{
	{ "gravity", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_gravity), HK_NULL },
	{ "numWheels", HK_NULL, HK_NULL, hkClassMember::TYPE_INT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_numWheels), HK_NULL },
	{ "chassisOrientation", HK_NULL, HK_NULL, hkClassMember::TYPE_ROTATION, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_chassisOrientation), HK_NULL },
	{ "torqueRollFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_torqueRollFactor), HK_NULL },
	{ "torquePitchFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_torquePitchFactor), HK_NULL },
	{ "torqueYawFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_torqueYawFactor), HK_NULL },
	{ "extraTorqueFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_extraTorqueFactor), HK_NULL },
	{ "maxVelocityForPositionalFriction", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_maxVelocityForPositionalFriction), HK_NULL },
	{ "chassisUnitInertiaYaw", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_chassisUnitInertiaYaw), HK_NULL },
	{ "chassisUnitInertiaRoll", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_chassisUnitInertiaRoll), HK_NULL },
	{ "chassisUnitInertiaPitch", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_chassisUnitInertiaPitch), HK_NULL },
	{ "frictionEqualizer", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_frictionEqualizer), HK_NULL },
	{ "normalClippingAngleCos", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_normalClippingAngleCos), HK_NULL },
	{ "maxFrictionSolverMassRatio", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_maxFrictionSolverMassRatio), HK_NULL },
	{ "wheelParams", &hknpVehicleDataWheelComponentParamsClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_wheelParams), HK_NULL },
	{ "numWheelsPerAxle", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_numWheelsPerAxle), HK_NULL },
	{ "frictionDescription", &hkpVehicleFrictionDescriptionClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_frictionDescription), HK_NULL },
	{ "chassisFrictionInertiaInvDiag", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_chassisFrictionInertiaInvDiag), HK_NULL },
	{ "alreadyInitialised", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleData,m_alreadyInitialised), HK_NULL }
};
namespace
{
	struct hknpVehicleData_DefaultStruct
	{
		int s_defaultOffsets[19];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		float m_maxFrictionSolverMassRatio;
	};
	const hknpVehicleData_DefaultStruct hknpVehicleData_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,HK_OFFSET_OF(hknpVehicleData_DefaultStruct,m_maxFrictionSolverMassRatio),-1,-1,-1,-1,-1},
		30.0
	};
}
extern const hkClass hknpVehicleDataClass;
const hkClass hknpVehicleDataClass(
	"hknpVehicleData",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpVehicleData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleDataClass_Members),
	HK_COUNT_OF(hknpVehicleDataClass_Members),
	&hknpVehicleData_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleData::staticClass()
{
	return hknpVehicleDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleData*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpVehicleData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpVehicleData(f);
}
static void HK_CALL cleanupLoadedObjecthknpVehicleData(void* p)
{
	static_cast<hknpVehicleData*>(p)->~hknpVehicleData();
}
static const void* HK_CALL getVtablehknpVehicleData()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpVehicleData).hash_code()));
	#else
	return ((const void*)(typeid(hknpVehicleData).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpVehicleData)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpVehicleData(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpVehicleDataTypeInfo;
const hkTypeInfo hknpVehicleDataTypeInfo(
	"hknpVehicleData",
	"!hknpVehicleData",
	finishLoadedObjecthknpVehicleData,
	cleanupLoadedObjecthknpVehicleData,
	getVtablehknpVehicleData(),
	sizeof(hknpVehicleData)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
