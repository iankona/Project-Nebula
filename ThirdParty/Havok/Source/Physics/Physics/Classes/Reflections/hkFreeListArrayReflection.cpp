/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Container/FreeListArray/hkFreeListArray.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Container/FreeListArray/hkFreeListArray.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpMaterialClass;
extern const hkClass hknpMotionPropertiesClass;
extern const hkClass hknpShapeInstanceClass;

//
// Class hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations
//
typedef hkFreeListArray< class hknpMotionProperties, struct hknpMotionPropertiesId, 8, struct hknpMotionProperties::FreeListArrayOperations > hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename;


// hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations attributes
template<>
const hkInternalClassMember hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename::Members[] =
{
	{ "elements", &hknpMotionPropertiesClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename,m_elements), HK_NULL },
	{ "firstFree", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename,m_firstFree), HK_NULL }
};
extern const hkClass hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperationsClass;
const hkClass hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperationsClass(
	"hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations",
	HK_NULL, // parent
	sizeof(::hkFreeListArray< class hknpMotionProperties, struct hknpMotionPropertiesId, 8, struct hknpMotionProperties::FreeListArrayOperations >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename::Members),
	HK_COUNT_OF(hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations(void* p)
{
	static_cast<hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename*>(p)->~hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename();
}
extern const hkTypeInfo hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperationsTypeInfo;
const hkTypeInfo hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperationsTypeInfo(
	"hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations",
	"!hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename",
	finishLoadedObjecthkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations,
	cleanupLoadedObjecthkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations,
	HK_NULL,
	sizeof(hkFreeListArrayhknpMotionPropertieshknpMotionPropertiesId8hknpMotionPropertiesFreeListArrayOperations_typename)
	);
#endif

//
// Class hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations
//
typedef hkFreeListArray< class hknpMaterial, struct hknpMaterialId, 8, struct hknpMaterial::FreeListArrayOperations > hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename;


// hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations attributes
template<>
const hkInternalClassMember hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename::Members[] =
{
	{ "elements", &hknpMaterialClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename,m_elements), HK_NULL },
	{ "firstFree", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename,m_firstFree), HK_NULL }
};
extern const hkClass hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperationsClass;
const hkClass hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperationsClass(
	"hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations",
	HK_NULL, // parent
	sizeof(::hkFreeListArray< class hknpMaterial, struct hknpMaterialId, 8, struct hknpMaterial::FreeListArrayOperations >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename::Members),
	HK_COUNT_OF(hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations(void* p)
{
	static_cast<hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename*>(p)->~hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename();
}
extern const hkTypeInfo hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperationsTypeInfo;
const hkTypeInfo hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperationsTypeInfo(
	"hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations",
	"!hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename",
	finishLoadedObjecthkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations,
	cleanupLoadedObjecthkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations,
	HK_NULL,
	sizeof(hkFreeListArrayhknpMaterialhknpMaterialId8hknpMaterialFreeListArrayOperations_typename)
	);
#endif

//
// Class hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance
//
typedef hkFreeListArray< struct hknpShapeInstance, struct hkHandle< short, 32767, struct hknpShapeInstanceIdDiscriminant >, 8, struct hknpShapeInstance > hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename;


// hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance attributes
template<>
const hkInternalClassMember hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename::Members[] =
{
	{ "elements", &hknpShapeInstanceClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename,m_elements), HK_NULL },
	{ "firstFree", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename,m_firstFree), HK_NULL }
};
extern const hkClass hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstanceClass;
const hkClass hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstanceClass(
	"hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance",
	HK_NULL, // parent
	sizeof(::hkFreeListArray< struct hknpShapeInstance, struct hkHandle< short, 32767, struct hknpShapeInstanceIdDiscriminant >, 8, struct hknpShapeInstance >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename::Members),
	HK_COUNT_OF(hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance(void* p)
{
	static_cast<hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename*>(p)->~hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename();
}
extern const hkTypeInfo hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstanceTypeInfo;
const hkTypeInfo hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstanceTypeInfo(
	"hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance",
	"!hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename",
	finishLoadedObjecthkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance,
	cleanupLoadedObjecthkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance,
	HK_NULL,
	sizeof(hkFreeListArrayhknpShapeInstancehkHandleshort32767hknpShapeInstanceIdDiscriminant8hknpShapeInstance_typename)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
