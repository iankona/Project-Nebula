/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Extensions/Vehicle/Friction/hknpVehicleFriction.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Extensions/Vehicle/Friction/hknpVehicleFriction.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpVehicleFrictionDescriptionAxisDescriptionClass;
extern const hkClass hknpVehicleFrictionStatusAxisStatusClass;

//
// Class hknpVehicleFrictionDescription::AxisDescription
//
static const hkInternalClassMember hknpVehicleFrictionDescription_AxisDescriptionClass_Members[] =
{
	{ "frictionCircleYtab", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 16, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_frictionCircleYtab), HK_NULL },
	{ "xStep", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_xStep), HK_NULL },
	{ "xStart", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_xStart), HK_NULL },
	{ "wheelSurfaceInertia", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelSurfaceInertia), HK_NULL },
	{ "wheelSurfaceInertiaInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelSurfaceInertiaInv), HK_NULL },
	{ "wheelChassisMassRatio", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelChassisMassRatio), HK_NULL },
	{ "wheelRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelRadius), HK_NULL },
	{ "wheelRadiusInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelRadiusInv), HK_NULL },
	{ "wheelDownForceFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelDownForceFactor), HK_NULL },
	{ "wheelDownForceSumFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription::AxisDescription,m_wheelDownForceSumFactor), HK_NULL }
};
const hkClass hknpVehicleFrictionDescriptionAxisDescriptionClass(
	"hknpVehicleFrictionDescriptionAxisDescription",
	HK_NULL, // parent
	sizeof(hknpVehicleFrictionDescription::AxisDescription),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleFrictionDescription_AxisDescriptionClass_Members),
	HK_COUNT_OF(hknpVehicleFrictionDescription_AxisDescriptionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleFrictionDescription::AxisDescription::staticClass()
{
	return hknpVehicleFrictionDescriptionAxisDescriptionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleFrictionDescription::AxisDescription*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpVehicleFrictionDescriptionAxisDescription(void* p)
{
	static_cast<hknpVehicleFrictionDescription::AxisDescription*>(p)->~AxisDescription();
}
extern const hkTypeInfo hknpVehicleFrictionDescriptionAxisDescriptionTypeInfo;
const hkTypeInfo hknpVehicleFrictionDescriptionAxisDescriptionTypeInfo(
	"hknpVehicleFrictionDescriptionAxisDescription",
	"!hknpVehicleFrictionDescription::AxisDescription",
	HK_NULL,
	cleanupLoadedObjecthknpVehicleFrictionDescriptionAxisDescription,
	HK_NULL,
	sizeof(hknpVehicleFrictionDescription::AxisDescription)
	);
#endif

//
// Class hknpVehicleFrictionDescription
//
static const hkInternalClassMember hknpVehicleFrictionDescriptionClass_Members[] =
{
	{ "wheelDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription,m_wheelDistance), HK_NULL },
	{ "chassisMassInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription,m_chassisMassInv), HK_NULL },
	{ "axleDescr", &hknpVehicleFrictionDescriptionAxisDescriptionClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hknpVehicleFrictionDescription,m_axleDescr), HK_NULL }
};
extern const hkClass hknpVehicleFrictionDescriptionClass;
const hkClass hknpVehicleFrictionDescriptionClass(
	"hknpVehicleFrictionDescription",
	HK_NULL, // parent
	sizeof(::hknpVehicleFrictionDescription),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleFrictionDescriptionClass_Members),
	HK_COUNT_OF(hknpVehicleFrictionDescriptionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleFrictionDescription::staticClass()
{
	return hknpVehicleFrictionDescriptionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleFrictionDescription*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpVehicleFrictionDescription(void* p)
{
	static_cast<hknpVehicleFrictionDescription*>(p)->~hknpVehicleFrictionDescription();
}
extern const hkTypeInfo hknpVehicleFrictionDescriptionTypeInfo;
const hkTypeInfo hknpVehicleFrictionDescriptionTypeInfo(
	"hknpVehicleFrictionDescription",
	"!hknpVehicleFrictionDescription",
	HK_NULL,
	cleanupLoadedObjecthknpVehicleFrictionDescription,
	HK_NULL,
	sizeof(hknpVehicleFrictionDescription)
	);
#endif

//
// Class hknpVehicleFrictionStatus::AxisStatus
//
static const hkInternalClassMember hknpVehicleFrictionStatus_AxisStatusClass_Members[] =
{
	{ "forward_slip_velocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_forward_slip_velocity), HK_NULL },
	{ "side_slip_velocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_side_slip_velocity), HK_NULL },
	{ "skid_energy_density", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_skid_energy_density), HK_NULL },
	{ "side_force", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_side_force), HK_NULL },
	{ "delayed_forward_impulse", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_delayed_forward_impulse), HK_NULL },
	{ "sideRhs", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_sideRhs), HK_NULL },
	{ "forwardRhs", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_forwardRhs), HK_NULL },
	{ "relativeSideForce", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_relativeSideForce), HK_NULL },
	{ "relativeForwardForce", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus::AxisStatus,m_relativeForwardForce), HK_NULL }
};
const hkClass hknpVehicleFrictionStatusAxisStatusClass(
	"hknpVehicleFrictionStatusAxisStatus",
	HK_NULL, // parent
	sizeof(hknpVehicleFrictionStatus::AxisStatus),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleFrictionStatus_AxisStatusClass_Members),
	HK_COUNT_OF(hknpVehicleFrictionStatus_AxisStatusClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleFrictionStatus::AxisStatus::staticClass()
{
	return hknpVehicleFrictionStatusAxisStatusClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleFrictionStatus::AxisStatus*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthknpVehicleFrictionStatusAxisStatus(void* p)
{
	static_cast<hknpVehicleFrictionStatus::AxisStatus*>(p)->~AxisStatus();
}
extern const hkTypeInfo hknpVehicleFrictionStatusAxisStatusTypeInfo;
const hkTypeInfo hknpVehicleFrictionStatusAxisStatusTypeInfo(
	"hknpVehicleFrictionStatusAxisStatus",
	"!hknpVehicleFrictionStatus::AxisStatus",
	HK_NULL,
	cleanupLoadedObjecthknpVehicleFrictionStatusAxisStatus,
	HK_NULL,
	sizeof(hknpVehicleFrictionStatus::AxisStatus)
	);
#endif

//
// Class hknpVehicleFrictionStatus
//
static const hkInternalClassMember hknpVehicleFrictionStatusClass_Members[] =
{
	{ "axis", &hknpVehicleFrictionStatusAxisStatusClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hknpVehicleFrictionStatus,m_axis), HK_NULL }
};
extern const hkClass hknpVehicleFrictionStatusClass;
const hkClass hknpVehicleFrictionStatusClass(
	"hknpVehicleFrictionStatus",
	HK_NULL, // parent
	sizeof(::hknpVehicleFrictionStatus),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpVehicleFrictionStatusClass_Members),
	HK_COUNT_OF(hknpVehicleFrictionStatusClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpVehicleFrictionStatus::staticClass()
{
	return hknpVehicleFrictionStatusClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpVehicleFrictionStatus*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpVehicleFrictionStatus(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpVehicleFrictionStatus(f);
}
static void HK_CALL cleanupLoadedObjecthknpVehicleFrictionStatus(void* p)
{
	static_cast<hknpVehicleFrictionStatus*>(p)->~hknpVehicleFrictionStatus();
}
extern const hkTypeInfo hknpVehicleFrictionStatusTypeInfo;
const hkTypeInfo hknpVehicleFrictionStatusTypeInfo(
	"hknpVehicleFrictionStatus",
	"!hknpVehicleFrictionStatus",
	finishLoadedObjecthknpVehicleFrictionStatus,
	cleanupLoadedObjecthknpVehicleFrictionStatus,
	HK_NULL,
	sizeof(hknpVehicleFrictionStatus)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
