/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Collide/Shape/Composite/Compound/hknpShapeInstance.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Collide/Shape/Composite/Compound/hknpShapeInstance.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hknpShapeClass;

//
// Enum hknpShapeInstance::Flags
//
static const hkInternalClassEnumItem hknpShapeInstanceFlagsEnumItems[] =
{
	{2, "HAS_TRANSLATION"},
	{4, "HAS_ROTATION"},
	{8, "HAS_SCALE"},
	{16, "FLIP_ORIENTATION"},
	{32, "SCALE_SURFACE"},
	{64, "IS_ENABLED"},
	{64, "DEFAULT_FLAGS"},
};
static const hkInternalClassEnum hknpShapeInstanceEnums[] = {
	{"Flags", hknpShapeInstanceFlagsEnumItems, 7, HK_NULL, 0 }
};
const hkClassEnum* hknpShapeInstanceFlagsEnum = reinterpret_cast<const hkClassEnum*>(&hknpShapeInstanceEnums[0]);

//
// Class hknpShapeInstance
//
const hkInternalClassMember hknpShapeInstance::Members[] =
{
	{ "transform", HK_NULL, HK_NULL, hkClassMember::TYPE_TRANSFORM, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShapeInstance,m_transform), HK_NULL },
	{ "scale", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShapeInstance,m_scale), HK_NULL },
	{ "shape", &hknpShapeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpShapeInstance,m_shape), HK_NULL },
	{ "shapeTag", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShapeInstance,m_shapeTag), HK_NULL },
	{ "padding", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 32, 0, HK_OFFSET_OF(hknpShapeInstance,m_padding), HK_NULL }
};
extern const hkClass hknpShapeInstanceClass;
const hkClass hknpShapeInstanceClass(
	"hknpShapeInstance",
	HK_NULL, // parent
	sizeof(::hknpShapeInstance),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpShapeInstanceEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hknpShapeInstance::Members),
	HK_COUNT_OF(hknpShapeInstance::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpShapeInstance::staticClass()
{
	return hknpShapeInstanceClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpShapeInstance*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpShapeInstance(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpShapeInstance(f);
}
static void HK_CALL cleanupLoadedObjecthknpShapeInstance(void* p)
{
	static_cast<hknpShapeInstance*>(p)->~hknpShapeInstance();
}
extern const hkTypeInfo hknpShapeInstanceTypeInfo;
const hkTypeInfo hknpShapeInstanceTypeInfo(
	"hknpShapeInstance",
	"!hknpShapeInstance",
	finishLoadedObjecthknpShapeInstance,
	cleanupLoadedObjecthknpShapeInstance,
	HK_NULL,
	sizeof(hknpShapeInstance)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
