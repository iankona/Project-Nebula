/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/Physics/Collide/Shape/hknpShape.h'
#include <Physics/Physics/hknpPhysics.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/Physics/Collide/Shape/hknpShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkCompressedMassPropertiesClass;
extern const hkClass hkRefCountedPropertiesClass;
extern const hkClass hknpShapeMutationSignalsShapeDestroyedSignalClass;
extern const hkClass hknpShapeMutationSignalsShapeMutatedSignalClass;
extern const hkClass hknpShapeClass;
extern const hkClass hknpShapeKeyMaskClass;
extern const hkClass hknpShapeKeyPathClass;
extern const hkClassEnum* hknpCollisionDispatchTypeEnumEnum;
extern const hkClassEnum* hknpShapeFlagsEnumEnum;

//
// Enum hknpShape::FlagsEnum
//
static const hkInternalClassEnumItem hknpShapeFlagsEnumEnumItems[] =
{
	{1, "IS_CONVEX_SHAPE"},
	{2, "IS_CONVEX_POLYTOPE_SHAPE"},
	{4, "IS_COMPOSITE_SHAPE"},
	{8, "IS_HEIGHT_FIELD_SHAPE"},
	{16, "USE_SINGLE_POINT_MANIFOLD"},
	{32, "IS_TRIANGLE_OR_QUAD_NO_EDGES"},
	{64, "SUPPORTS_BPLANE_COLLISIONS"},
	{128, "USE_NORMAL_TO_FIND_SUPPORT_PLANE"},
	{256, "USE_SMALL_FACE_INDICES"},
	{512, "NO_GET_ALL_SHAPE_KEYS_ON_SPU"},
	{1024, "SHAPE_NOT_SUPPORTED_ON_SPU"},
};

//
// Enum hknpShape::MutationFlagsEnum
//
static const hkInternalClassEnumItem hknpShapeMutationFlagsEnumEnumItems[] =
{
	{1, "MUTATION_AABB_CHANGED"},
	{2, "MUTATION_DISCARD_CACHED_DISTANCES"},
	{4, "MUTATION_REBUILD_COLLISION_CACHES"},
};

//
// Enum hknpShape::ScaleMode
//
static const hkInternalClassEnumItem hknpShapeScaleModeEnumItems[] =
{
	{0, "SCALE_SURFACE"},
	{1, "SCALE_VERTICES"},
};

//
// Enum hknpShape::ConvexRadiusDisplayMode
//
static const hkInternalClassEnumItem hknpShapeConvexRadiusDisplayModeEnumItems[] =
{
	{0, "CONVEX_RADIUS_DISPLAY_NONE"},
	{1, "CONVEX_RADIUS_DISPLAY_PLANAR"},
	{2, "CONVEX_RADIUS_DISPLAY_ROUNDED"},
};
static const hkInternalClassEnum hknpShapeEnums[] = {
	{"FlagsEnum", hknpShapeFlagsEnumEnumItems, 11, HK_NULL, 0 },
	{"MutationFlagsEnum", hknpShapeMutationFlagsEnumEnumItems, 3, HK_NULL, 0 },
	{"ScaleMode", hknpShapeScaleModeEnumItems, 2, HK_NULL, 0 },
	{"ConvexRadiusDisplayMode", hknpShapeConvexRadiusDisplayModeEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* hknpShapeFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpShapeEnums[0]);
const hkClassEnum* hknpShapeMutationFlagsEnumEnum = reinterpret_cast<const hkClassEnum*>(&hknpShapeEnums[1]);
const hkClassEnum* hknpShapeScaleModeEnum = reinterpret_cast<const hkClassEnum*>(&hknpShapeEnums[2]);
const hkClassEnum* hknpShapeConvexRadiusDisplayModeEnum = reinterpret_cast<const hkClassEnum*>(&hknpShapeEnums[3]);

//
// Class hknpShape
//
extern const hkClass hkReferencedObjectClass;

const hkInternalClassMember hknpShape::Members[] =
{
	{ "flags", HK_NULL, hknpShapeFlagsEnumEnum, hkClassMember::TYPE_FLAGS, hkClassMember::TYPE_UINT16, 0, 0|hkClassMember::ALIGN_16, HK_OFFSET_OF(hknpShape,m_flags), HK_NULL },
	{ "numShapeKeyBits", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShape,m_numShapeKeyBits), HK_NULL },
	{ "dispatchType", HK_NULL, hknpCollisionDispatchTypeEnumEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hknpShape,m_dispatchType), HK_NULL },
	{ "convexRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShape,m_convexRadius), HK_NULL },
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT64, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hknpShape,m_userData), HK_NULL },
	{ "properties", &hkRefCountedPropertiesClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hknpShape,m_properties), HK_NULL }
};
const hkClass hknpShapeClass(
	"hknpShape",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hknpShapeEnums),
	4, // enums
	reinterpret_cast<const hkClassMember*>(hknpShape::Members),
	HK_COUNT_OF(hknpShape::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpShape::staticClass()
{
	return hknpShapeClass;
}
#endif

//
// Class hknpShapeMassProperties
//

static const hkInternalClassMember hknpShapeMassPropertiesClass_Members[] =
{
	{ "compressedMassProperties", &hkCompressedMassPropertiesClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::ALIGN_8, HK_OFFSET_OF(hknpShapeMassProperties,m_compressedMassProperties), HK_NULL }
};
extern const hkClass hknpShapeMassPropertiesClass;
const hkClass hknpShapeMassPropertiesClass(
	"hknpShapeMassProperties",
	&hkReferencedObjectClass, // parent
	sizeof(::hknpShapeMassProperties),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hknpShapeMassPropertiesClass_Members),
	HK_COUNT_OF(hknpShapeMassPropertiesClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hknpShapeMassProperties::staticClass()
{
	return hknpShapeMassPropertiesClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hknpShapeMassProperties*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthknpShapeMassProperties(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hknpShapeMassProperties(f);
}
static void HK_CALL cleanupLoadedObjecthknpShapeMassProperties(void* p)
{
	static_cast<hknpShapeMassProperties*>(p)->~hknpShapeMassProperties();
}
static const void* HK_CALL getVtablehknpShapeMassProperties()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hknpShapeMassProperties).hash_code()));
	#else
	return ((const void*)(typeid(hknpShapeMassProperties).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hknpShapeMassProperties)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hknpShapeMassProperties(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hknpShapeMassPropertiesTypeInfo;
const hkTypeInfo hknpShapeMassPropertiesTypeInfo(
	"hknpShapeMassProperties",
	"!hknpShapeMassProperties",
	finishLoadedObjecthknpShapeMassProperties,
	cleanupLoadedObjecthknpShapeMassProperties,
	getVtablehknpShapeMassProperties(),
	sizeof(hknpShapeMassProperties)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
