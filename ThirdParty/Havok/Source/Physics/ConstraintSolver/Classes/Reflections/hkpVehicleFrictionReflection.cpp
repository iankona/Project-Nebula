/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Physics/ConstraintSolver/VehicleFriction/hkpVehicleFriction.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Physics/ConstraintSolver/VehicleFriction/hkpVehicleFriction.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkpVehicleFrictionDescriptionAxisDescriptionClass;
extern const hkClass hkpVehicleFrictionStatusAxisStatusClass;

//
// Class hkpVehicleFrictionDescription::AxisDescription
//
static const hkInternalClassMember hkpVehicleFrictionDescription_AxisDescriptionClass_Members[] =
{
	{ "frictionCircleYtab", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 16, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_frictionCircleYtab), HK_NULL },
	{ "xStep", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_xStep), HK_NULL },
	{ "xStart", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_xStart), HK_NULL },
	{ "wheelSurfaceInertia", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelSurfaceInertia), HK_NULL },
	{ "wheelSurfaceInertiaInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelSurfaceInertiaInv), HK_NULL },
	{ "wheelChassisMassRatio", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelChassisMassRatio), HK_NULL },
	{ "wheelRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelRadius), HK_NULL },
	{ "wheelRadiusInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelRadiusInv), HK_NULL },
	{ "wheelDownForceFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelDownForceFactor), HK_NULL },
	{ "wheelDownForceSumFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription::AxisDescription,m_wheelDownForceSumFactor), HK_NULL }
};
const hkClass hkpVehicleFrictionDescriptionAxisDescriptionClass(
	"hkpVehicleFrictionDescriptionAxisDescription",
	HK_NULL, // parent
	sizeof(hkpVehicleFrictionDescription::AxisDescription),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleFrictionDescription_AxisDescriptionClass_Members),
	HK_COUNT_OF(hkpVehicleFrictionDescription_AxisDescriptionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleFrictionDescription::AxisDescription::staticClass()
{
	return hkpVehicleFrictionDescriptionAxisDescriptionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleFrictionDescription::AxisDescription*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkpVehicleFrictionDescriptionAxisDescription(void* p)
{
	static_cast<hkpVehicleFrictionDescription::AxisDescription*>(p)->~AxisDescription();
}
extern const hkTypeInfo hkpVehicleFrictionDescriptionAxisDescriptionTypeInfo;
const hkTypeInfo hkpVehicleFrictionDescriptionAxisDescriptionTypeInfo(
	"hkpVehicleFrictionDescriptionAxisDescription",
	"!hkpVehicleFrictionDescription::AxisDescription",
	HK_NULL,
	cleanupLoadedObjecthkpVehicleFrictionDescriptionAxisDescription,
	HK_NULL,
	sizeof(hkpVehicleFrictionDescription::AxisDescription)
	);
#endif

//
// Class hkpVehicleFrictionDescription
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkpVehicleFrictionDescriptionClass_Members[] =
{
	{ "wheelDistance", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription,m_wheelDistance), HK_NULL },
	{ "chassisMassInv", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription,m_chassisMassInv), HK_NULL },
	{ "axleDescr", &hkpVehicleFrictionDescriptionAxisDescriptionClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hkpVehicleFrictionDescription,m_axleDescr), HK_NULL }
};
extern const hkClass hkpVehicleFrictionDescriptionClass;
const hkClass hkpVehicleFrictionDescriptionClass(
	"hkpVehicleFrictionDescription",
	&hkReferencedObjectClass, // parent
	sizeof(::hkpVehicleFrictionDescription),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleFrictionDescriptionClass_Members),
	HK_COUNT_OF(hkpVehicleFrictionDescriptionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleFrictionDescription::staticClass()
{
	return hkpVehicleFrictionDescriptionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleFrictionDescription*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehicleFrictionDescription(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehicleFrictionDescription(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehicleFrictionDescription(void* p)
{
	static_cast<hkpVehicleFrictionDescription*>(p)->~hkpVehicleFrictionDescription();
}
static const void* HK_CALL getVtablehkpVehicleFrictionDescription()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkpVehicleFrictionDescription).hash_code()));
	#else
	return ((const void*)(typeid(hkpVehicleFrictionDescription).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkpVehicleFrictionDescription)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkpVehicleFrictionDescription(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkpVehicleFrictionDescriptionTypeInfo;
const hkTypeInfo hkpVehicleFrictionDescriptionTypeInfo(
	"hkpVehicleFrictionDescription",
	"!hkpVehicleFrictionDescription",
	finishLoadedObjecthkpVehicleFrictionDescription,
	cleanupLoadedObjecthkpVehicleFrictionDescription,
	getVtablehkpVehicleFrictionDescription(),
	sizeof(hkpVehicleFrictionDescription)
	);
#endif

//
// Class hkpVehicleFrictionStatus::AxisStatus
//
static const hkInternalClassMember hkpVehicleFrictionStatus_AxisStatusClass_Members[] =
{
	{ "forward_slip_velocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_forward_slip_velocity), HK_NULL },
	{ "side_slip_velocity", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_side_slip_velocity), HK_NULL },
	{ "skid_energy_density", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_skid_energy_density), HK_NULL },
	{ "side_force", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_side_force), HK_NULL },
	{ "delayed_forward_impulse", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_delayed_forward_impulse), HK_NULL },
	{ "sideRhs", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_sideRhs), HK_NULL },
	{ "forwardRhs", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_forwardRhs), HK_NULL },
	{ "relativeSideForce", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_relativeSideForce), HK_NULL },
	{ "relativeForwardForce", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus::AxisStatus,m_relativeForwardForce), HK_NULL }
};
const hkClass hkpVehicleFrictionStatusAxisStatusClass(
	"hkpVehicleFrictionStatusAxisStatus",
	HK_NULL, // parent
	sizeof(hkpVehicleFrictionStatus::AxisStatus),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleFrictionStatus_AxisStatusClass_Members),
	HK_COUNT_OF(hkpVehicleFrictionStatus_AxisStatusClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleFrictionStatus::AxisStatus::staticClass()
{
	return hkpVehicleFrictionStatusAxisStatusClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleFrictionStatus::AxisStatus*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehicleFrictionStatusAxisStatus(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehicleFrictionStatus::AxisStatus(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehicleFrictionStatusAxisStatus(void* p)
{
	static_cast<hkpVehicleFrictionStatus::AxisStatus*>(p)->~AxisStatus();
}
extern const hkTypeInfo hkpVehicleFrictionStatusAxisStatusTypeInfo;
const hkTypeInfo hkpVehicleFrictionStatusAxisStatusTypeInfo(
	"hkpVehicleFrictionStatusAxisStatus",
	"!hkpVehicleFrictionStatus::AxisStatus",
	finishLoadedObjecthkpVehicleFrictionStatusAxisStatus,
	cleanupLoadedObjecthkpVehicleFrictionStatusAxisStatus,
	HK_NULL,
	sizeof(hkpVehicleFrictionStatus::AxisStatus)
	);
#endif

//
// Class hkpVehicleFrictionStatus
//
static const hkInternalClassMember hkpVehicleFrictionStatusClass_Members[] =
{
	{ "axis", &hkpVehicleFrictionStatusAxisStatusClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 2, 0, HK_OFFSET_OF(hkpVehicleFrictionStatus,m_axis), HK_NULL }
};
extern const hkClass hkpVehicleFrictionStatusClass;
const hkClass hkpVehicleFrictionStatusClass(
	"hkpVehicleFrictionStatus",
	HK_NULL, // parent
	sizeof(::hkpVehicleFrictionStatus),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkpVehicleFrictionStatusClass_Members),
	HK_COUNT_OF(hkpVehicleFrictionStatusClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkpVehicleFrictionStatus::staticClass()
{
	return hkpVehicleFrictionStatusClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkpVehicleFrictionStatus*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkpVehicleFrictionStatus(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkpVehicleFrictionStatus(f);
}
static void HK_CALL cleanupLoadedObjecthkpVehicleFrictionStatus(void* p)
{
	static_cast<hkpVehicleFrictionStatus*>(p)->~hkpVehicleFrictionStatus();
}
extern const hkTypeInfo hkpVehicleFrictionStatusTypeInfo;
const hkTypeInfo hkpVehicleFrictionStatusTypeInfo(
	"hkpVehicleFrictionStatus",
	"!hkpVehicleFrictionStatus",
	finishLoadedObjecthkpVehicleFrictionStatus,
	cleanupLoadedObjecthkpVehicleFrictionStatus,
	HK_NULL,
	sizeof(hkpVehicleFrictionStatus)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
