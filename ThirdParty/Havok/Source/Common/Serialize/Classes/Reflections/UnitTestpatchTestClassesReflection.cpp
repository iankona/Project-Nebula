/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Serialize/UnitTest/PatchTest/patchTestClasses.h'
#include <Common/Serialize/hkSerialize.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Serialize/UnitTest/PatchTest/patchTestClasses.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkTestAClass;
extern const hkClass hkTestCClass;

//
// Class hkTestC
//
static const hkInternalClassMember hkTestCClass_Members[] =
{
	{ "userData", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestC,m_userData), HK_NULL },
	{ "userData2", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestC,m_userData2), HK_NULL }
};
const hkClass hkTestCClass(
	"hkTestC",
	HK_NULL, // parent
	sizeof(::hkTestC),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkTestCClass_Members),
	HK_COUNT_OF(hkTestCClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkTestC::staticClass()
{
	return hkTestCClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkTestC*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkTestC(void* p)
{
	static_cast<hkTestC*>(p)->~hkTestC();
}
extern const hkTypeInfo hkTestCTypeInfo;
const hkTypeInfo hkTestCTypeInfo(
	"hkTestC",
	"!hkTestC",
	HK_NULL,
	cleanupLoadedObjecthkTestC,
	HK_NULL,
	sizeof(hkTestC)
	);
#endif

//
// Class hkTestA
//
static const hkInternalClassMember hkTestAClass_Members[] =
{
	{ "float", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestA,m_float), HK_NULL }
};
const hkClass hkTestAClass(
	"hkTestA",
	HK_NULL, // parent
	sizeof(::hkTestA),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkTestAClass_Members),
	HK_COUNT_OF(hkTestAClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkTestA::staticClass()
{
	return hkTestAClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkTestA*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkTestA(void* p)
{
	static_cast<hkTestA*>(p)->~hkTestA();
}
extern const hkTypeInfo hkTestATypeInfo;
const hkTypeInfo hkTestATypeInfo(
	"hkTestA",
	"!hkTestA",
	HK_NULL,
	cleanupLoadedObjecthkTestA,
	HK_NULL,
	sizeof(hkTestA)
	);
#endif

//
// Class hkTestB
//
static const hkInternalClassMember hkTestBClass_Members[] =
{
	{ "string", HK_NULL, HK_NULL, hkClassMember::TYPE_CSTRING, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestB,m_string), HK_NULL },
	{ "object", &hkTestCClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkTestB,m_object), HK_NULL }
};
extern const hkClass hkTestBClass;
const hkClass hkTestBClass(
	"hkTestB",
	HK_NULL, // parent
	sizeof(::hkTestB),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkTestBClass_Members),
	HK_COUNT_OF(hkTestBClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkTestB::staticClass()
{
	return hkTestBClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkTestB*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkTestB(void* p)
{
	static_cast<hkTestB*>(p)->~hkTestB();
}
extern const hkTypeInfo hkTestBTypeInfo;
const hkTypeInfo hkTestBTypeInfo(
	"hkTestB",
	"!hkTestB",
	HK_NULL,
	cleanupLoadedObjecthkTestB,
	HK_NULL,
	sizeof(hkTestB)
	);
#endif

//
// Class hkTestPatchObject
//
static const hkInternalClassMember hkTestPatchObjectClass_Members[] =
{
	{ "intMember", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestPatchObject,m_intMember), HK_NULL },
	{ "structMember", &hkTestAClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkTestPatchObject,m_structMember), HK_NULL }
};
extern const hkClass hkTestPatchObjectClass;
const hkClass hkTestPatchObjectClass(
	"hkTestPatchObject",
	HK_NULL, // parent
	sizeof(::hkTestPatchObject),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkTestPatchObjectClass_Members),
	HK_COUNT_OF(hkTestPatchObjectClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkTestPatchObject::staticClass()
{
	return hkTestPatchObjectClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkTestPatchObject*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkTestPatchObject(void* p)
{
	static_cast<hkTestPatchObject*>(p)->~hkTestPatchObject();
}
extern const hkTypeInfo hkTestPatchObjectTypeInfo;
const hkTypeInfo hkTestPatchObjectTypeInfo(
	"hkTestPatchObject",
	"!hkTestPatchObject",
	HK_NULL,
	cleanupLoadedObjecthkTestPatchObject,
	HK_NULL,
	sizeof(hkTestPatchObject)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
