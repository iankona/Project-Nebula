/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Serialize/ResourceDatabase/hkResourceHandle.h'
#include <Common/Serialize/hkSerialize.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Serialize/ResourceDatabase/hkResourceHandle.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkClassMemberAccessorClass;
extern const hkClass hkMemoryResourceContainerClass;
extern const hkClass hkMemoryResourceHandleExternalLinkClass;
extern const hkClass hkMemoryResourceHandleClass;
extern const hkClass hkReferencedObjectClass;

//
// Enum hkResourceBase::Type
//
static const hkInternalClassEnumItem hkResourceBaseTypeEnumItems[] =
{
	{0, "TYPE_RESOURCE"},
	{1, "TYPE_CONTAINER"},
};
static const hkInternalClassEnum hkResourceBaseEnums[] = {
	{"Type", hkResourceBaseTypeEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkResourceBaseTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkResourceBaseEnums[0]);

//
// Class hkResourceBase
//

extern const hkClass hkResourceBaseClass;
const hkClass hkResourceBaseClass(
	"hkResourceBase",
	&hkReferencedObjectClass, // parent
	sizeof(::hkResourceBase),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkResourceBaseEnums),
	1, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkResourceBase::staticClass()
{
	return hkResourceBaseClass;
}
#endif

//
// Class hkResourceHandle
//

extern const hkClass hkResourceHandleClass;
const hkClass hkResourceHandleClass(
	"hkResourceHandle",
	&hkResourceBaseClass, // parent
	sizeof(::hkResourceHandle),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkResourceHandle::staticClass()
{
	return hkResourceHandleClass;
}
#endif

//
// Class hkResourceContainer
//

extern const hkClass hkResourceContainerClass;
const hkClass hkResourceContainerClass(
	"hkResourceContainer",
	&hkResourceBaseClass, // parent
	sizeof(::hkResourceContainer),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkResourceContainer::staticClass()
{
	return hkResourceContainerClass;
}
#endif

//
// Class hkMemoryResourceHandle::ExternalLink
//
static const hkInternalClassMember hkMemoryResourceHandle_ExternalLinkClass_Members[] =
{
	{ "memberName", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMemoryResourceHandle::ExternalLink,m_memberName), HK_NULL },
	{ "externalId", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMemoryResourceHandle::ExternalLink,m_externalId), HK_NULL }
};
const hkClass hkMemoryResourceHandleExternalLinkClass(
	"hkMemoryResourceHandleExternalLink",
	HK_NULL, // parent
	sizeof(hkMemoryResourceHandle::ExternalLink),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMemoryResourceHandle_ExternalLinkClass_Members),
	HK_COUNT_OF(hkMemoryResourceHandle_ExternalLinkClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMemoryResourceHandle::ExternalLink::staticClass()
{
	return hkMemoryResourceHandleExternalLinkClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMemoryResourceHandle::ExternalLink*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkMemoryResourceHandleExternalLink(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkMemoryResourceHandle::ExternalLink(f);
}
static void HK_CALL cleanupLoadedObjecthkMemoryResourceHandleExternalLink(void* p)
{
	static_cast<hkMemoryResourceHandle::ExternalLink*>(p)->~ExternalLink();
}
extern const hkTypeInfo hkMemoryResourceHandleExternalLinkTypeInfo;
const hkTypeInfo hkMemoryResourceHandleExternalLinkTypeInfo(
	"hkMemoryResourceHandleExternalLink",
	"!hkMemoryResourceHandle::ExternalLink",
	finishLoadedObjecthkMemoryResourceHandleExternalLink,
	cleanupLoadedObjecthkMemoryResourceHandleExternalLink,
	HK_NULL,
	sizeof(hkMemoryResourceHandle::ExternalLink)
	);
#endif

//
// Class hkMemoryResourceHandle
//

const hkInternalClassMember hkMemoryResourceHandle::Members[] =
{
	{ "variant", &hkReferencedObjectClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMemoryResourceHandle,m_variant), HK_NULL },
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMemoryResourceHandle,m_name), HK_NULL },
	{ "references", &hkMemoryResourceHandleExternalLinkClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMemoryResourceHandle,m_references), HK_NULL }
};
const hkClass hkMemoryResourceHandleClass(
	"hkMemoryResourceHandle",
	&hkResourceHandleClass, // parent
	sizeof(::hkMemoryResourceHandle),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMemoryResourceHandle::Members),
	HK_COUNT_OF(hkMemoryResourceHandle::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMemoryResourceHandle::staticClass()
{
	return hkMemoryResourceHandleClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMemoryResourceHandle*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkMemoryResourceHandle(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkMemoryResourceHandle(f);
}
static void HK_CALL cleanupLoadedObjecthkMemoryResourceHandle(void* p)
{
	static_cast<hkMemoryResourceHandle*>(p)->~hkMemoryResourceHandle();
}
static const void* HK_CALL getVtablehkMemoryResourceHandle()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkMemoryResourceHandle).hash_code()));
	#else
	return ((const void*)(typeid(hkMemoryResourceHandle).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkMemoryResourceHandle)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkMemoryResourceHandle(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkMemoryResourceHandleTypeInfo;
const hkTypeInfo hkMemoryResourceHandleTypeInfo(
	"hkMemoryResourceHandle",
	"!hkMemoryResourceHandle",
	finishLoadedObjecthkMemoryResourceHandle,
	cleanupLoadedObjecthkMemoryResourceHandle,
	getVtablehkMemoryResourceHandle(),
	sizeof(hkMemoryResourceHandle)
	);
#endif

//
// Class hkMemoryResourceContainer
//

const hkInternalClassMember hkMemoryResourceContainer::Members[] =
{
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMemoryResourceContainer,m_name), HK_NULL },
	{ "parent", &hkMemoryResourceContainerClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMemoryResourceContainer,m_parent), HK_NULL },
	{ "resourceHandles", &hkMemoryResourceHandleClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkMemoryResourceContainer,m_resourceHandles), HK_NULL },
	{ "children", &hkMemoryResourceContainerClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkMemoryResourceContainer,m_children), HK_NULL }
};
const hkClass hkMemoryResourceContainerClass(
	"hkMemoryResourceContainer",
	&hkResourceContainerClass, // parent
	sizeof(::hkMemoryResourceContainer),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMemoryResourceContainer::Members),
	HK_COUNT_OF(hkMemoryResourceContainer::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMemoryResourceContainer::staticClass()
{
	return hkMemoryResourceContainerClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMemoryResourceContainer*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkMemoryResourceContainer(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkMemoryResourceContainer(f);
}
static void HK_CALL cleanupLoadedObjecthkMemoryResourceContainer(void* p)
{
	static_cast<hkMemoryResourceContainer*>(p)->~hkMemoryResourceContainer();
}
static const void* HK_CALL getVtablehkMemoryResourceContainer()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkMemoryResourceContainer).hash_code()));
	#else
	return ((const void*)(typeid(hkMemoryResourceContainer).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkMemoryResourceContainer)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkMemoryResourceContainer(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkMemoryResourceContainerTypeInfo;
const hkTypeInfo hkMemoryResourceContainerTypeInfo(
	"hkMemoryResourceContainer",
	"!hkMemoryResourceContainer",
	finishLoadedObjecthkMemoryResourceContainer,
	cleanupLoadedObjecthkMemoryResourceContainer,
	getVtablehkMemoryResourceContainer(),
	sizeof(hkMemoryResourceContainer)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
