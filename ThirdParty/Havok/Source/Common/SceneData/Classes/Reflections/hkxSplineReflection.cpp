/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/SceneData/Spline/hkxSpline.h'
#include <Common/SceneData/hkSceneData.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/SceneData/Spline/hkxSpline.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkxSplineControlPointClass;
extern const hkClassEnum* hkxSplineControlTypeEnum;

//
// Enum hkxSpline::ControlType
//
static const hkInternalClassEnumItem hkxSplineControlTypeEnumItems[] =
{
	{0, "BEZIER_SMOOTH"},
	{1, "BEZIER_CORNER"},
	{2, "LINEAR"},
	{3, "CUSTOM"},
};
static const hkInternalClassEnum hkxSplineEnums[] = {
	{"ControlType", hkxSplineControlTypeEnumItems, 4, HK_NULL, 0 }
};
const hkClassEnum* hkxSplineControlTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkxSplineEnums[0]);

//
// Class hkxSpline::ControlPoint
//
static const hkInternalClassMember hkxSpline_ControlPointClass_Members[] =
{
	{ "position", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxSpline::ControlPoint,m_position), HK_NULL },
	{ "tangentIn", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxSpline::ControlPoint,m_tangentIn), HK_NULL },
	{ "tangentOut", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxSpline::ControlPoint,m_tangentOut), HK_NULL },
	{ "inType", HK_NULL, hkxSplineControlTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkxSpline::ControlPoint,m_inType), HK_NULL },
	{ "outType", HK_NULL, hkxSplineControlTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkxSpline::ControlPoint,m_outType), HK_NULL }
};
const hkClass hkxSplineControlPointClass(
	"hkxSplineControlPoint",
	HK_NULL, // parent
	sizeof(hkxSpline::ControlPoint),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkxSpline_ControlPointClass_Members),
	HK_COUNT_OF(hkxSpline_ControlPointClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxSpline::ControlPoint::staticClass()
{
	return hkxSplineControlPointClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxSpline::ControlPoint*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkxSplineControlPoint(void* p)
{
	static_cast<hkxSpline::ControlPoint*>(p)->~ControlPoint();
}
extern const hkTypeInfo hkxSplineControlPointTypeInfo;
const hkTypeInfo hkxSplineControlPointTypeInfo(
	"hkxSplineControlPoint",
	"!hkxSpline::ControlPoint",
	HK_NULL,
	cleanupLoadedObjecthkxSplineControlPoint,
	HK_NULL,
	sizeof(hkxSpline::ControlPoint)
	);
#endif

//
// Class hkxSpline
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkxSplineClass_Members[] =
{
	{ "controlPoints", &hkxSplineControlPointClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxSpline,m_controlPoints), HK_NULL },
	{ "isClosed", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxSpline,m_isClosed), HK_NULL }
};
extern const hkClass hkxSplineClass;
const hkClass hkxSplineClass(
	"hkxSpline",
	&hkReferencedObjectClass, // parent
	sizeof(::hkxSpline),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkxSplineEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkxSplineClass_Members),
	HK_COUNT_OF(hkxSplineClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxSpline::staticClass()
{
	return hkxSplineClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxSpline*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxSpline(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxSpline(f);
}
static void HK_CALL cleanupLoadedObjecthkxSpline(void* p)
{
	static_cast<hkxSpline*>(p)->~hkxSpline();
}
static const void* HK_CALL getVtablehkxSpline()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkxSpline).hash_code()));
	#else
	return ((const void*)(typeid(hkxSpline).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkxSpline)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkxSpline(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkxSplineTypeInfo;
const hkTypeInfo hkxSplineTypeInfo(
	"hkxSpline",
	"!hkxSpline",
	finishLoadedObjecthkxSpline,
	cleanupLoadedObjecthkxSpline,
	getVtablehkxSpline(),
	sizeof(hkxSpline)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
