/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/SceneData/Mesh/hkxVertexDescription.h'
#include <Common/SceneData/hkSceneData.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/SceneData/Mesh/hkxVertexDescription.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkxVertexDescriptionElementDeclClass;
extern const hkClassEnum* hkxVertexDescriptionDataHintEnum;
extern const hkClassEnum* hkxVertexDescriptionDataTypeEnum;
extern const hkClassEnum* hkxVertexDescriptionDataUsageEnum;

//
// Enum hkxVertexDescription::DataType
//
static const hkInternalClassEnumItem hkxVertexDescriptionDataTypeEnumItems[] =
{
	{0, "HKX_DT_NONE"},
	{1, "HKX_DT_UINT8"},
	{2, "HKX_DT_INT16"},
	{3, "HKX_DT_UINT32"},
	{4, "HKX_DT_FLOAT"},
};

//
// Enum hkxVertexDescription::DataUsage
//
static const hkInternalClassEnumItem hkxVertexDescriptionDataUsageEnumItems[] =
{
	{0, "HKX_DU_NONE"},
	{1, "HKX_DU_POSITION"},
	{2, "HKX_DU_COLOR"},
	{4, "HKX_DU_NORMAL"},
	{8, "HKX_DU_TANGENT"},
	{16, "HKX_DU_BINORMAL"},
	{32, "HKX_DU_TEXCOORD"},
	{64, "HKX_DU_BLENDWEIGHTS"},
	{128, "HKX_DU_BLENDINDICES"},
	{256, "HKX_DU_USERDATA"},
};

//
// Enum hkxVertexDescription::DataHint
//
static const hkInternalClassEnumItem hkxVertexDescriptionDataHintEnumItems[] =
{
	{0, "HKX_DH_NONE"},
	{1, "HKX_DH_LIGHTMAP"},
};
static const hkInternalClassEnum hkxVertexDescriptionEnums[] = {
	{"DataType", hkxVertexDescriptionDataTypeEnumItems, 5, HK_NULL, 0 },
	{"DataUsage", hkxVertexDescriptionDataUsageEnumItems, 10, HK_NULL, 0 },
	{"DataHint", hkxVertexDescriptionDataHintEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkxVertexDescriptionDataTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkxVertexDescriptionEnums[0]);
const hkClassEnum* hkxVertexDescriptionDataUsageEnum = reinterpret_cast<const hkClassEnum*>(&hkxVertexDescriptionEnums[1]);
const hkClassEnum* hkxVertexDescriptionDataHintEnum = reinterpret_cast<const hkClassEnum*>(&hkxVertexDescriptionEnums[2]);

//
// Class hkxVertexDescription::ElementDecl
//
static const hkInternalClassMember hkxVertexDescription_ElementDeclClass_Members[] =
{
	{ "byteOffset", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_byteOffset), HK_NULL },
	{ "type", HK_NULL, hkxVertexDescriptionDataTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_type), HK_NULL },
	{ "usage", HK_NULL, hkxVertexDescriptionDataUsageEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_usage), HK_NULL },
	{ "byteStride", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_byteStride), HK_NULL },
	{ "numElements", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_numElements), HK_NULL },
	{ "hint", HK_NULL, hkxVertexDescriptionDataHintEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT16, 0, 0, HK_OFFSET_OF(hkxVertexDescription::ElementDecl,m_hint), HK_NULL }
};
const hkClass hkxVertexDescriptionElementDeclClass(
	"hkxVertexDescriptionElementDecl",
	HK_NULL, // parent
	sizeof(hkxVertexDescription::ElementDecl),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkxVertexDescription_ElementDeclClass_Members),
	HK_COUNT_OF(hkxVertexDescription_ElementDeclClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxVertexDescription::ElementDecl::staticClass()
{
	return hkxVertexDescriptionElementDeclClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxVertexDescription::ElementDecl*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkxVertexDescriptionElementDecl(void* p)
{
	static_cast<hkxVertexDescription::ElementDecl*>(p)->~ElementDecl();
}
extern const hkTypeInfo hkxVertexDescriptionElementDeclTypeInfo;
const hkTypeInfo hkxVertexDescriptionElementDeclTypeInfo(
	"hkxVertexDescriptionElementDecl",
	"!hkxVertexDescription::ElementDecl",
	HK_NULL,
	cleanupLoadedObjecthkxVertexDescriptionElementDecl,
	HK_NULL,
	sizeof(hkxVertexDescription::ElementDecl)
	);
#endif

//
// Class hkxVertexDescription
//
static const hkInternalClassMember hkxVertexDescriptionClass_Members[] =
{
	{ "decls", &hkxVertexDescriptionElementDeclClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxVertexDescription,m_decls), HK_NULL }
};
extern const hkClass hkxVertexDescriptionClass;
const hkClass hkxVertexDescriptionClass(
	"hkxVertexDescription",
	HK_NULL, // parent
	sizeof(::hkxVertexDescription),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkxVertexDescriptionEnums),
	3, // enums
	reinterpret_cast<const hkClassMember*>(hkxVertexDescriptionClass_Members),
	HK_COUNT_OF(hkxVertexDescriptionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxVertexDescription::staticClass()
{
	return hkxVertexDescriptionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxVertexDescription*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxVertexDescription(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxVertexDescription(f);
}
static void HK_CALL cleanupLoadedObjecthkxVertexDescription(void* p)
{
	static_cast<hkxVertexDescription*>(p)->~hkxVertexDescription();
}
extern const hkTypeInfo hkxVertexDescriptionTypeInfo;
const hkTypeInfo hkxVertexDescriptionTypeInfo(
	"hkxVertexDescription",
	"!hkxVertexDescription",
	finishLoadedObjecthkxVertexDescription,
	cleanupLoadedObjecthkxVertexDescription,
	HK_NULL,
	sizeof(hkxVertexDescription)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
