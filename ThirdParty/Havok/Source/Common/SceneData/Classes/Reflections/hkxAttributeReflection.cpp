/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/SceneData/Attributes/hkxAttribute.h'
#include <Common/SceneData/hkSceneData.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/SceneData/Attributes/hkxAttribute.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkReferencedObjectClass;

//
// Enum hkxAttribute::Hint
//
static const hkInternalClassEnumItem hkxAttributeHintEnumItems[] =
{
	{0, "HINT_NONE"},
	{1, "HINT_IGNORE"},
	{2, "HINT_TRANSFORM"},
	{4, "HINT_SCALE"},
	{6, "HINT_TRANSFORM_AND_SCALE"},
	{8, "HINT_FLIP"},
};
static const hkInternalClassEnum hkxAttributeEnums[] = {
	{"Hint", hkxAttributeHintEnumItems, 6, HK_NULL, 0 }
};
const hkClassEnum* hkxAttributeHintEnum = reinterpret_cast<const hkClassEnum*>(&hkxAttributeEnums[0]);

//
// Class hkxAttribute
//
static const hkInternalClassMember hkxAttributeClass_Members[] =
{
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxAttribute,m_name), HK_NULL },
	{ "value", &hkReferencedObjectClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxAttribute,m_value), HK_NULL }
};
extern const hkClass hkxAttributeClass;
const hkClass hkxAttributeClass(
	"hkxAttribute",
	HK_NULL, // parent
	sizeof(::hkxAttribute),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkxAttributeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkxAttributeClass_Members),
	HK_COUNT_OF(hkxAttributeClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxAttribute::staticClass()
{
	return hkxAttributeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxAttribute*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxAttribute(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxAttribute(f);
}
static void HK_CALL cleanupLoadedObjecthkxAttribute(void* p)
{
	static_cast<hkxAttribute*>(p)->~hkxAttribute();
}
extern const hkTypeInfo hkxAttributeTypeInfo;
const hkTypeInfo hkxAttributeTypeInfo(
	"hkxAttribute",
	"!hkxAttribute",
	finishLoadedObjecthkxAttribute,
	cleanupLoadedObjecthkxAttribute,
	HK_NULL,
	sizeof(hkxAttribute)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
