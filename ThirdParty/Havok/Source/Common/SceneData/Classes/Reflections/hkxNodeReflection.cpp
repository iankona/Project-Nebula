/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/SceneData/Graph/hkxNode.h'
#include <Common/SceneData/hkSceneData.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/SceneData/Graph/hkxNode.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkMatrix4fClass;
extern const hkClass hkReferencedObjectClass;
extern const hkClass hkxNodeAnnotationDataClass;
extern const hkClass hkxNodeClass;

//
// Class hkxNode::AnnotationData
//
static const hkInternalClassMember hkxNode_AnnotationDataClass_Members[] =
{
	{ "time", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode::AnnotationData,m_time), HK_NULL },
	{ "description", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode::AnnotationData,m_description), HK_NULL }
};
const hkClass hkxNodeAnnotationDataClass(
	"hkxNodeAnnotationData",
	HK_NULL, // parent
	sizeof(hkxNode::AnnotationData),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkxNode_AnnotationDataClass_Members),
	HK_COUNT_OF(hkxNode_AnnotationDataClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxNode::AnnotationData::staticClass()
{
	return hkxNodeAnnotationDataClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxNode::AnnotationData*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxNodeAnnotationData(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxNode::AnnotationData(f);
}
static void HK_CALL cleanupLoadedObjecthkxNodeAnnotationData(void* p)
{
	static_cast<hkxNode::AnnotationData*>(p)->~AnnotationData();
}
extern const hkTypeInfo hkxNodeAnnotationDataTypeInfo;
const hkTypeInfo hkxNodeAnnotationDataTypeInfo(
	"hkxNodeAnnotationData",
	"!hkxNode::AnnotationData",
	finishLoadedObjecthkxNodeAnnotationData,
	cleanupLoadedObjecthkxNodeAnnotationData,
	HK_NULL,
	sizeof(hkxNode::AnnotationData)
	);
#endif

//
// Class hkxNode
//
extern const hkClass hkxAttributeHolderClass;

static const hkInternalClassMember hkxNodeClass_Members[] =
{
	{ "name", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode,m_name), HK_NULL },
	{ "object", &hkReferencedObjectClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxNode,m_object), HK_NULL },
	{ "keyFrames", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_MATRIX4, 0, 0, HK_OFFSET_OF(hkxNode,m_keyFrames), HK_NULL },
	{ "children", &hkxNodeClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxNode,m_children), HK_NULL },
	{ "annotations", &hkxNodeAnnotationDataClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxNode,m_annotations), HK_NULL },
	{ "linearKeyFrameHints", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_REAL, 0, 0, HK_OFFSET_OF(hkxNode,m_linearKeyFrameHints), HK_NULL },
	{ "userProperties", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode,m_userProperties), HK_NULL },
	{ "selected", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode,m_selected), HK_NULL },
	{ "bone", HK_NULL, HK_NULL, hkClassMember::TYPE_BOOL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxNode,m_bone), HK_NULL }
};
const hkClass hkxNodeClass(
	"hkxNode",
	&hkxAttributeHolderClass, // parent
	sizeof(::hkxNode),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkxNodeClass_Members),
	HK_COUNT_OF(hkxNodeClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(4) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxNode::staticClass()
{
	return hkxNodeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxNode*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxNode(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxNode(f);
}
static void HK_CALL cleanupLoadedObjecthkxNode(void* p)
{
	static_cast<hkxNode*>(p)->~hkxNode();
}
static const void* HK_CALL getVtablehkxNode()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkxNode).hash_code()));
	#else
	return ((const void*)(typeid(hkxNode).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkxNode)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkxNode(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkxNodeTypeInfo;
const hkTypeInfo hkxNodeTypeInfo(
	"hkxNode",
	"!hkxNode",
	finishLoadedObjecthkxNode,
	cleanupLoadedObjecthkxNode,
	getVtablehkxNode(),
	sizeof(hkxNode)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
