/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/SceneData/Scene/hkxScene.h'
#include <Common/SceneData/hkSceneData.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/SceneData/Scene/hkxScene.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkxCameraClass;
extern const hkClass hkxLightClass;
extern const hkClass hkxMaterialClass;
extern const hkClass hkxMeshClass;
extern const hkClass hkxNodeClass;
extern const hkClass hkxNodeSelectionSetClass;
extern const hkClass hkxSkinBindingClass;
extern const hkClass hkxSplineClass;
extern const hkClass hkxTextureFileClass;
extern const hkClass hkxTextureInplaceClass;

//
// Class hkxScene
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkxSceneClass_Members[] =
{
	{ "modeller", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxScene,m_modeller), HK_NULL },
	{ "asset", HK_NULL, HK_NULL, hkClassMember::TYPE_STRINGPTR, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxScene,m_asset), HK_NULL },
	{ "sceneLength", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxScene,m_sceneLength), HK_NULL },
	{ "numFrames", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxScene,m_numFrames), HK_NULL },
	{ "rootNode", &hkxNodeClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkxScene,m_rootNode), HK_NULL },
	{ "selectionSets", &hkxNodeSelectionSetClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_selectionSets), HK_NULL },
	{ "cameras", &hkxCameraClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_cameras), HK_NULL },
	{ "lights", &hkxLightClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_lights), HK_NULL },
	{ "meshes", &hkxMeshClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_meshes), HK_NULL },
	{ "materials", &hkxMaterialClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_materials), HK_NULL },
	{ "inplaceTextures", &hkxTextureInplaceClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_inplaceTextures), HK_NULL },
	{ "externalTextures", &hkxTextureFileClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_externalTextures), HK_NULL },
	{ "skinBindings", &hkxSkinBindingClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_skinBindings), HK_NULL },
	{ "splines", &hkxSplineClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(hkxScene,m_splines), HK_NULL },
	{ "appliedTransform", HK_NULL, HK_NULL, hkClassMember::TYPE_MATRIX3, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkxScene,m_appliedTransform), HK_NULL }
};
namespace
{
	struct hkxScene_DefaultStruct
	{
		int s_defaultOffsets[15];
		typedef hkInt8 _hkBool;
		typedef hkFloat32 _hkVector4[4];
		typedef hkReal _hkQuaternion[4];
		typedef hkReal _hkMatrix3[12];
		typedef hkReal _hkRotation[12];
		typedef hkReal _hkQsTransform[12];
		typedef hkReal _hkMatrix4[16];
		typedef hkReal _hkTransform[16];
		_hkMatrix3 m_appliedTransform;
	};
	const hkxScene_DefaultStruct hkxScene_Default =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,HK_OFFSET_OF(hkxScene_DefaultStruct,m_appliedTransform)},
		{1,0,0,0,0,1,0,0,0,0,1,0}
	};
}
extern const hkClass hkxSceneClass;
const hkClass hkxSceneClass(
	"hkxScene",
	&hkReferencedObjectClass, // parent
	sizeof(::hkxScene),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkxSceneClass_Members),
	HK_COUNT_OF(hkxSceneClass_Members),
	&hkxScene_Default,
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkxScene::staticClass()
{
	return hkxSceneClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkxScene*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkxScene(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkxScene(f);
}
static void HK_CALL cleanupLoadedObjecthkxScene(void* p)
{
	static_cast<hkxScene*>(p)->~hkxScene();
}
static const void* HK_CALL getVtablehkxScene()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkxScene).hash_code()));
	#else
	return ((const void*)(typeid(hkxScene).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkxScene)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkxScene(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkxSceneTypeInfo;
const hkTypeInfo hkxSceneTypeInfo(
	"hkxScene",
	"!hkxScene",
	finishLoadedObjecthkxScene,
	cleanupLoadedObjecthkxScene,
	getVtablehkxScene(),
	sizeof(hkxScene)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
