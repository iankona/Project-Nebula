/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/GeometryUtilities/Mesh/hkMeshShape.h'
#include <Common/GeometryUtilities/hkGeometryUtilities.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/GeometryUtilities/Mesh/hkMeshShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkMeshMaterialClass;
extern const hkClass hkMeshVertexBufferClass;
extern const hkClassEnum* hkMeshSectionMeshSectionIndexTypeEnum;
extern const hkClassEnum* hkMeshSectionPrimitiveTypeEnum;

//
// Class hkMeshMaterial
//
extern const hkClass hkReferencedObjectClass;

const hkClass hkMeshMaterialClass(
	"hkMeshMaterial",
	&hkReferencedObjectClass, // parent
	sizeof(::hkMeshMaterial),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshMaterial::staticClass()
{
	return hkMeshMaterialClass;
}
#endif

//
// Enum hkMeshSection::MeshSectionIndexType
//
static const hkInternalClassEnumItem hkMeshSectionMeshSectionIndexTypeEnumItems[] =
{
	{0, "INDEX_TYPE_NONE"},
	{1, "INDEX_TYPE_UINT16"},
	{2, "INDEX_TYPE_UINT32"},
};

//
// Enum hkMeshSection::PrimitiveType
//
static const hkInternalClassEnumItem hkMeshSectionPrimitiveTypeEnumItems[] =
{
	{0, "PRIMITIVE_TYPE_UNKNOWN"},
	{1, "PRIMITIVE_TYPE_POINT_LIST"},
	{2, "PRIMITIVE_TYPE_LINE_LIST"},
	{3, "PRIMITIVE_TYPE_TRIANGLE_LIST"},
	{4, "PRIMITIVE_TYPE_TRIANGLE_STRIP"},
};
static const hkInternalClassEnum hkMeshSectionEnums[] = {
	{"MeshSectionIndexType", hkMeshSectionMeshSectionIndexTypeEnumItems, 3, HK_NULL, 0 },
	{"PrimitiveType", hkMeshSectionPrimitiveTypeEnumItems, 5, HK_NULL, 0 }
};
const hkClassEnum* hkMeshSectionMeshSectionIndexTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshSectionEnums[0]);
const hkClassEnum* hkMeshSectionPrimitiveTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshSectionEnums[1]);

//
// Class hkMeshSection
//
static const hkInternalClassMember hkMeshSectionClass_Members[] =
{
	{ "primitiveType", HK_NULL, hkMeshSectionPrimitiveTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkMeshSection,m_primitiveType), HK_NULL },
	{ "numPrimitives", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSection,m_numPrimitives), HK_NULL },
	{ "numIndices", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSection,m_numIndices), HK_NULL },
	{ "vertexStartIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSection,m_vertexStartIndex), HK_NULL },
	{ "transformIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSection,m_transformIndex), HK_NULL },
	{ "indexType", HK_NULL, hkMeshSectionMeshSectionIndexTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkMeshSection,m_indexType), HK_NULL },
	{ "indices", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMeshSection,m_indices), HK_NULL },
	{ "vertexBuffer", &hkMeshVertexBufferClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMeshSection,m_vertexBuffer), HK_NULL },
	{ "material", &hkMeshMaterialClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMeshSection,m_material), HK_NULL },
	{ "sectionIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSection,m_sectionIndex), HK_NULL }
};
extern const hkClass hkMeshSectionClass;
const hkClass hkMeshSectionClass(
	"hkMeshSection",
	HK_NULL, // parent
	sizeof(::hkMeshSection),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkMeshSectionEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hkMeshSectionClass_Members),
	HK_COUNT_OF(hkMeshSectionClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshSection::staticClass()
{
	return hkMeshSectionClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMeshSection*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkMeshSection(void* p)
{
	static_cast<hkMeshSection*>(p)->~hkMeshSection();
}
extern const hkTypeInfo hkMeshSectionTypeInfo;
const hkTypeInfo hkMeshSectionTypeInfo(
	"hkMeshSection",
	"!hkMeshSection",
	HK_NULL,
	cleanupLoadedObjecthkMeshSection,
	HK_NULL,
	sizeof(hkMeshSection)
	);
#endif

//
// Class hkMeshSectionCinfo
//
static const hkInternalClassMember hkMeshSectionCinfoClass_Members[] =
{
	{ "vertexBuffer", &hkMeshVertexBufferClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_vertexBuffer), HK_NULL },
	{ "material", &hkMeshMaterialClass, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_material), HK_NULL },
	{ "primitiveType", HK_NULL, hkMeshSectionPrimitiveTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_primitiveType), HK_NULL },
	{ "numPrimitives", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_numPrimitives), HK_NULL },
	{ "indexType", HK_NULL, hkMeshSectionMeshSectionIndexTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_UINT8, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_indexType), HK_NULL },
	{ "indices", HK_NULL, HK_NULL, hkClassMember::TYPE_POINTER, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMeshSectionCinfo,m_indices), HK_NULL },
	{ "vertexStartIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_vertexStartIndex), HK_NULL },
	{ "transformIndex", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshSectionCinfo,m_transformIndex), HK_NULL }
};
extern const hkClass hkMeshSectionCinfoClass;
const hkClass hkMeshSectionCinfoClass(
	"hkMeshSectionCinfo",
	HK_NULL, // parent
	sizeof(::hkMeshSectionCinfo),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMeshSectionCinfoClass_Members),
	HK_COUNT_OF(hkMeshSectionCinfoClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshSectionCinfo::staticClass()
{
	return hkMeshSectionCinfoClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMeshSectionCinfo*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkMeshSectionCinfo(void* p)
{
	static_cast<hkMeshSectionCinfo*>(p)->~hkMeshSectionCinfo();
}
extern const hkTypeInfo hkMeshSectionCinfoTypeInfo;
const hkTypeInfo hkMeshSectionCinfoTypeInfo(
	"hkMeshSectionCinfo",
	"!hkMeshSectionCinfo",
	HK_NULL,
	cleanupLoadedObjecthkMeshSectionCinfo,
	HK_NULL,
	sizeof(hkMeshSectionCinfo)
	);
#endif

//
// Enum hkMeshShape::AccessFlags
//
static const hkInternalClassEnumItem hkMeshShapeAccessFlagsEnumItems[] =
{
	{1, "ACCESS_INDICES"},
	{2, "ACCESS_VERTEX_BUFFER"},
};
static const hkInternalClassEnum hkMeshShapeEnums[] = {
	{"AccessFlags", hkMeshShapeAccessFlagsEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkMeshShapeAccessFlagsEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshShapeEnums[0]);

//
// Class hkMeshShape
//

extern const hkClass hkMeshShapeClass;
const hkClass hkMeshShapeClass(
	"hkMeshShape",
	&hkReferencedObjectClass, // parent
	sizeof(::hkMeshShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkMeshShapeEnums),
	1, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshShape::staticClass()
{
	return hkMeshShapeClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
