/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/GeometryUtilities/Mesh/hkMeshTexture.h'
#include <Common/GeometryUtilities/hkGeometryUtilities.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/GeometryUtilities/Mesh/hkMeshTexture.h>
#define True true
#define False false


//
// Enum hkMeshTexture::Format
//
static const hkInternalClassEnumItem hkMeshTextureFormatEnumItems[] =
{
	{0, "Unknown"},
	{1, "PNG"},
	{2, "TGA"},
	{3, "BMP"},
	{4, "DDS"},
	{5, "RAW"},
};

//
// Enum hkMeshTexture::FilterMode
//
static const hkInternalClassEnumItem hkMeshTextureFilterModeEnumItems[] =
{
	{0, "POINT"},
	{1, "LINEAR"},
	{2, "ANISOTROPIC"},
};

//
// Enum hkMeshTexture::TextureUsageType
//
static const hkInternalClassEnumItem hkMeshTextureTextureUsageTypeEnumItems[] =
{
	{0, "UNKNOWN"},
	{1, "DIFFUSE"},
	{2, "REFLECTION"},
	{3, "BUMP"},
	{4, "NORMAL"},
	{5, "DISPLACEMENT"},
	{6, "SPECULAR"},
	{7, "SPECULARANDGLOSS"},
	{8, "OPACITY"},
	{9, "EMISSIVE"},
	{10, "REFRACTION"},
	{11, "GLOSS"},
	{12, "DOMINANTS"},
	{13, "NOTEXPORTED"},
};
static const hkInternalClassEnum hkMeshTextureEnums[] = {
	{"Format", hkMeshTextureFormatEnumItems, 6, HK_NULL, 0 },
	{"FilterMode", hkMeshTextureFilterModeEnumItems, 3, HK_NULL, 0 },
	{"TextureUsageType", hkMeshTextureTextureUsageTypeEnumItems, 14, HK_NULL, 0 }
};
const hkClassEnum* hkMeshTextureFormatEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshTextureEnums[0]);
const hkClassEnum* hkMeshTextureFilterModeEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshTextureEnums[1]);
const hkClassEnum* hkMeshTextureTextureUsageTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkMeshTextureEnums[2]);

//
// Class hkMeshTexture::RawBufferDescriptor
//
static const hkInternalClassMember hkMeshTexture_RawBufferDescriptorClass_Members[] =
{
	{ "offset", HK_NULL, HK_NULL, hkClassMember::TYPE_INT64, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshTexture::RawBufferDescriptor,m_offset), HK_NULL },
	{ "stride", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshTexture::RawBufferDescriptor,m_stride), HK_NULL },
	{ "numElements", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMeshTexture::RawBufferDescriptor,m_numElements), HK_NULL }
};
extern const hkClass hkMeshTextureRawBufferDescriptorClass;
const hkClass hkMeshTextureRawBufferDescriptorClass(
	"hkMeshTextureRawBufferDescriptor",
	HK_NULL, // parent
	sizeof(hkMeshTexture::RawBufferDescriptor),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMeshTexture_RawBufferDescriptorClass_Members),
	HK_COUNT_OF(hkMeshTexture_RawBufferDescriptorClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshTexture::RawBufferDescriptor::staticClass()
{
	return hkMeshTextureRawBufferDescriptorClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMeshTexture::RawBufferDescriptor*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkMeshTextureRawBufferDescriptor(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkMeshTexture::RawBufferDescriptor(f);
}
static void HK_CALL cleanupLoadedObjecthkMeshTextureRawBufferDescriptor(void* p)
{
	static_cast<hkMeshTexture::RawBufferDescriptor*>(p)->~RawBufferDescriptor();
}
extern const hkTypeInfo hkMeshTextureRawBufferDescriptorTypeInfo;
const hkTypeInfo hkMeshTextureRawBufferDescriptorTypeInfo(
	"hkMeshTextureRawBufferDescriptor",
	"!hkMeshTexture::RawBufferDescriptor",
	finishLoadedObjecthkMeshTextureRawBufferDescriptor,
	cleanupLoadedObjecthkMeshTextureRawBufferDescriptor,
	HK_NULL,
	sizeof(hkMeshTexture::RawBufferDescriptor)
	);
#endif

//
// Class hkMeshTexture
//
extern const hkClass hkReferencedObjectClass;

extern const hkClass hkMeshTextureClass;
const hkClass hkMeshTextureClass(
	"hkMeshTexture",
	&hkReferencedObjectClass, // parent
	sizeof(::hkMeshTexture),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkMeshTextureEnums),
	3, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMeshTexture::staticClass()
{
	return hkMeshTextureClass;
}
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
