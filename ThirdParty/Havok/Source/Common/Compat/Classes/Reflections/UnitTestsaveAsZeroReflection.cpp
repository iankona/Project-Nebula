/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Compat/Deprecated/UnitTest/SaveAsZero/saveAsZero.h'
#include <Common/Compat/hkCompat.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Compat/Deprecated/UnitTest/SaveAsZero/saveAsZero.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass TestArrayNullsClass;
extern const hkClassEnum* TestZeroValueEnum;

//
// Enum TestZero::Value
//
static const hkInternalClassEnumItem TestZeroValueEnumItems[] =
{
	{0, "VALUE_0"},
	{1, "VALUE_1"},
	{2, "VALUE_2"},
	{3, "VALUE_3"},
	{8, "VALUE_8"},
	{16, "VALUE_16"},
	{32, "VALUE_32"},
};
static const hkInternalClassEnum TestZeroEnums[] = {
	{"Value", TestZeroValueEnumItems, 7, HK_NULL, 0 }
};
const hkClassEnum* TestZeroValueEnum = reinterpret_cast<const hkClassEnum*>(&TestZeroEnums[0]);

//
// Class TestZero
//
static const hkInternalClassMember TestZeroClass_Members[] =
{
	{ "value8", HK_NULL, TestZeroValueEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(TestZero,m_value8), HK_NULL },
	{ "value16", HK_NULL, TestZeroValueEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT16, 0, 0, HK_OFFSET_OF(TestZero,m_value16), HK_NULL },
	{ "value32", HK_NULL, TestZeroValueEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT32, 0, 0, HK_OFFSET_OF(TestZero,m_value32), HK_NULL },
	{ "zero8", HK_NULL, HK_NULL, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(TestZero,m_zero8), HK_NULL },
	{ "zero16", HK_NULL, HK_NULL, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT16, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(TestZero,m_zero16), HK_NULL },
	{ "zero32", HK_NULL, HK_NULL, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT32, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(TestZero,m_zero32), HK_NULL }
};
extern const hkClass TestZeroClass;
const hkClass TestZeroClass(
	"TestZero",
	HK_NULL, // parent
	sizeof(::TestZero),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(TestZeroEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(TestZeroClass_Members),
	HK_COUNT_OF(TestZeroClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL TestZero::staticClass()
{
	return TestZeroClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<TestZero*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjectTestZero(void* p)
{
	static_cast<TestZero*>(p)->~TestZero();
}
extern const hkTypeInfo TestZeroTypeInfo;
const hkTypeInfo TestZeroTypeInfo(
	"TestZero",
	"!TestZero",
	HK_NULL,
	cleanupLoadedObjectTestZero,
	HK_NULL,
	sizeof(TestZero)
	);
#endif

//
// Class TestArrayNulls
//
static const hkInternalClassMember TestArrayNullsClass_Members[] =
{
	{ "array", &TestArrayNullsClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_POINTER, 0, 0, HK_OFFSET_OF(TestArrayNulls,m_array), HK_NULL }
};
const hkClass TestArrayNullsClass(
	"TestArrayNulls",
	HK_NULL, // parent
	sizeof(::TestArrayNulls),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(TestArrayNullsClass_Members),
	HK_COUNT_OF(TestArrayNullsClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL TestArrayNulls::staticClass()
{
	return TestArrayNullsClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<TestArrayNulls*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjectTestArrayNulls(void* p)
{
	static_cast<TestArrayNulls*>(p)->~TestArrayNulls();
}
extern const hkTypeInfo TestArrayNullsTypeInfo;
const hkTypeInfo TestArrayNullsTypeInfo(
	"TestArrayNulls",
	"!TestArrayNulls",
	HK_NULL,
	cleanupLoadedObjectTestArrayNulls,
	HK_NULL,
	sizeof(TestArrayNulls)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
