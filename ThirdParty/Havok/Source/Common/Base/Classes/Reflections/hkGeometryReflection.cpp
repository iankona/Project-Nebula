/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Types/Geometry/hkGeometry.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Types/Geometry/hkGeometry.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkGeometryTriangleClass;
extern const hkClass hkVector4fClass;

//
// Enum hkGeometry::GeometryType
//
static const hkInternalClassEnumItem hkGeometryGeometryTypeEnumItems[] =
{
	{0, "GEOMETRY_STATIC"},
	{1, "GEOMETRY_DYNAMIC_VERTICES"},
};
static const hkInternalClassEnum hkGeometryEnums[] = {
	{"GeometryType", hkGeometryGeometryTypeEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkGeometryGeometryTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkGeometryEnums[0]);

//
// Class hkGeometry::Triangle
//
static const hkInternalClassMember hkGeometry_TriangleClass_Members[] =
{
	{ "a", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkGeometry::Triangle,m_a), HK_NULL },
	{ "b", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkGeometry::Triangle,m_b), HK_NULL },
	{ "c", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkGeometry::Triangle,m_c), HK_NULL },
	{ "material", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkGeometry::Triangle,m_material), HK_NULL }
};
const hkClass hkGeometryTriangleClass(
	"hkGeometryTriangle",
	HK_NULL, // parent
	sizeof(hkGeometry::Triangle),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkGeometry_TriangleClass_Members),
	HK_COUNT_OF(hkGeometry_TriangleClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkGeometry::Triangle::staticClass()
{
	return hkGeometryTriangleClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkGeometry::Triangle*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkGeometryTriangle(void* p)
{
	static_cast<hkGeometry::Triangle*>(p)->~Triangle();
}
extern const hkTypeInfo hkGeometryTriangleTypeInfo;
const hkTypeInfo hkGeometryTriangleTypeInfo(
	"hkGeometryTriangle",
	"!hkGeometry::Triangle",
	HK_NULL,
	cleanupLoadedObjecthkGeometryTriangle,
	HK_NULL,
	sizeof(hkGeometry::Triangle)
	);
#endif

//
// Class hkGeometry
//
extern const hkClass hkReferencedObjectClass;

static const hkInternalClassMember hkGeometryClass_Members[] =
{
	{ "vertices", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_VECTOR4, 0, 0, HK_OFFSET_OF(hkGeometry,m_vertices), HK_NULL },
	{ "triangles", &hkGeometryTriangleClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkGeometry,m_triangles), HK_NULL }
};
extern const hkClass hkGeometryClass;
const hkClass hkGeometryClass(
	"hkGeometry",
	&hkReferencedObjectClass, // parent
	sizeof(::hkGeometry),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkGeometryEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(hkGeometryClass_Members),
	HK_COUNT_OF(hkGeometryClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(1) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkGeometry::staticClass()
{
	return hkGeometryClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkGeometry*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkGeometry(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkGeometry(f);
}
static void HK_CALL cleanupLoadedObjecthkGeometry(void* p)
{
	static_cast<hkGeometry*>(p)->~hkGeometry();
}
static const void* HK_CALL getVtablehkGeometry()
{
	#if HK_LINKONCE_VTABLES==0
	#if HK_HASHCODE_VTABLE_REGISTRY==1
	return ((const void*)(typeid(hkGeometry).hash_code()));
	#else
	return ((const void*)(typeid(hkGeometry).name()));
	#endif
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(hkGeometry)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) hkGeometry(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo hkGeometryTypeInfo;
const hkTypeInfo hkGeometryTypeInfo(
	"hkGeometry",
	"!hkGeometry",
	finishLoadedObjecthkGeometry,
	cleanupLoadedObjecthkGeometry,
	getVtablehkGeometry(),
	sizeof(hkGeometry)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
