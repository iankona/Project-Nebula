/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/DebugUtil/MultiThreadCheck/hkMultiThreadCheck.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/DebugUtil/MultiThreadCheck/hkMultiThreadCheck.h>
#define True true
#define False false


//
// Enum hkMultiThreadCheck::AccessType
//
static const hkInternalClassEnumItem hkMultiThreadCheckAccessTypeEnumItems[] =
{
	{0, "HK_ACCESS_IGNORE"},
	{1, "HK_ACCESS_RO"},
	{2, "HK_ACCESS_RW"},
};

//
// Enum hkMultiThreadCheck::ReadMode
//
static const hkInternalClassEnumItem hkMultiThreadCheckReadModeEnumItems[] =
{
	{0, "THIS_OBJECT_ONLY"},
	{1, "RECURSIVE"},
};
static const hkInternalClassEnum hkMultiThreadCheckEnums[] = {
	{"AccessType", hkMultiThreadCheckAccessTypeEnumItems, 3, HK_NULL, 0 },
	{"ReadMode", hkMultiThreadCheckReadModeEnumItems, 2, HK_NULL, 0 }
};
const hkClassEnum* hkMultiThreadCheckAccessTypeEnum = reinterpret_cast<const hkClassEnum*>(&hkMultiThreadCheckEnums[0]);
const hkClassEnum* hkMultiThreadCheckReadModeEnum = reinterpret_cast<const hkClassEnum*>(&hkMultiThreadCheckEnums[1]);

//
// Class hkMultiThreadCheck
//
const hkInternalClassMember hkMultiThreadCheck::Members[] =
{
	{ "threadId", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMultiThreadCheck,m_threadId), HK_NULL },
	{ "stackTraceId", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMultiThreadCheck,m_stackTraceId), HK_NULL },
	{ "markCount", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMultiThreadCheck,m_markCount), HK_NULL },
	{ "markBitStack", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT16, hkClassMember::TYPE_VOID, 0, 0|hkClassMember::SERIALIZE_IGNORED, HK_OFFSET_OF(hkMultiThreadCheck,m_markBitStack), HK_NULL }
};
extern const hkClass hkMultiThreadCheckClass;
const hkClass hkMultiThreadCheckClass(
	"hkMultiThreadCheck",
	HK_NULL, // parent
	sizeof(::hkMultiThreadCheck),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(hkMultiThreadCheckEnums),
	2, // enums
	reinterpret_cast<const hkClassMember*>(hkMultiThreadCheck::Members),
	HK_COUNT_OF(hkMultiThreadCheck::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMultiThreadCheck::staticClass()
{
	return hkMultiThreadCheckClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMultiThreadCheck*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkMultiThreadCheck(void* p)
{
	static_cast<hkMultiThreadCheck*>(p)->~hkMultiThreadCheck();
}
extern const hkTypeInfo hkMultiThreadCheckTypeInfo;
const hkTypeInfo hkMultiThreadCheckTypeInfo(
	"hkMultiThreadCheck",
	"!hkMultiThreadCheck",
	HK_NULL,
	cleanupLoadedObjecthkMultiThreadCheck,
	HK_NULL,
	sizeof(hkMultiThreadCheck)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
