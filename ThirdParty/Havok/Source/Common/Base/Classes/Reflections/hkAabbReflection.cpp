/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Types/Geometry/Aabb/hkAabb.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Types/Geometry/Aabb/hkAabb.h>
#define True true
#define False false


//
// Class hkAabb
//
static const hkInternalClassMember hkAabbClass_Members[] =
{
	{ "min", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkAabb,m_min), HK_NULL },
	{ "max", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkAabb,m_max), HK_NULL }
};
extern const hkClass hkAabbClass;
const hkClass hkAabbClass(
	"hkAabb",
	HK_NULL, // parent
	sizeof(::hkAabb),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkAabbClass_Members),
	HK_COUNT_OF(hkAabbClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkAabb::staticClass()
{
	return hkAabbClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkAabb*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkAabb(void* p)
{
	static_cast<hkAabb*>(p)->~hkAabb();
}
extern const hkTypeInfo hkAabbTypeInfo;
const hkTypeInfo hkAabbTypeInfo(
	"hkAabb",
	"!hkAabb",
	HK_NULL,
	cleanupLoadedObjecthkAabb,
	HK_NULL,
	sizeof(hkAabb)
	);
#endif

//
// Class hkAabbUint32
//
static const hkInternalClassMember hkAabbUint32Class_Members[] =
{
	{ "min", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 3, 0|hkClassMember::ALIGN_16, HK_OFFSET_OF(hkAabbUint32,m_min), HK_NULL },
	{ "expansionMin", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkAabbUint32,m_expansionMin), HK_NULL },
	{ "expansionShift", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkAabbUint32,m_expansionShift), HK_NULL },
	{ "max", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT32, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkAabbUint32,m_max), HK_NULL },
	{ "expansionMax", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 3, 0, HK_OFFSET_OF(hkAabbUint32,m_expansionMax), HK_NULL },
	{ "shapeKeyByte", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkAabbUint32,m_shapeKeyByte), HK_NULL }
};
extern const hkClass hkAabbUint32Class;
const hkClass hkAabbUint32Class(
	"hkAabbUint32",
	HK_NULL, // parent
	sizeof(::hkAabbUint32),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkAabbUint32Class_Members),
	HK_COUNT_OF(hkAabbUint32Class_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkAabbUint32::staticClass()
{
	return hkAabbUint32Class;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkAabbUint32*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkAabbUint32(void* p)
{
	static_cast<hkAabbUint32*>(p)->~hkAabbUint32();
}
extern const hkTypeInfo hkAabbUint32TypeInfo;
const hkTypeInfo hkAabbUint32TypeInfo(
	"hkAabbUint32",
	"!hkAabbUint32",
	HK_NULL,
	cleanupLoadedObjecthkAabbUint32,
	HK_NULL,
	sizeof(hkAabbUint32)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
