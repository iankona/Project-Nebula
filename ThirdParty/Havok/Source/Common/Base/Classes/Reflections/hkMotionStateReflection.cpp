/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Types/Physics/MotionState/hkMotionState.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Types/Physics/MotionState/hkMotionState.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkSweptTransformfClass;
extern const hkClass hkUFloat8Class;

//
// Class hkMotionState
//
const hkInternalClassMember hkMotionState::Members[] =
{
	{ "transform", HK_NULL, HK_NULL, hkClassMember::TYPE_TRANSFORM, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_transform), HK_NULL },
	{ "sweptTransform", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 5, 0, HK_OFFSET_OF(hkMotionState,m_sweptTransform), HK_NULL },
	{ "deltaAngle", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_deltaAngle), HK_NULL },
	{ "objectRadius", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_objectRadius), HK_NULL },
	{ "linearDamping", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_linearDamping), HK_NULL },
	{ "angularDamping", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_angularDamping), HK_NULL },
	{ "timeFactor", HK_NULL, HK_NULL, hkClassMember::TYPE_HALF, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_timeFactor), HK_NULL },
	{ "maxLinearVelocity", &hkUFloat8Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_maxLinearVelocity), HK_NULL },
	{ "maxAngularVelocity", &hkUFloat8Class, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_maxAngularVelocity), HK_NULL },
	{ "deactivationClass", HK_NULL, HK_NULL, hkClassMember::TYPE_UINT8, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkMotionState,m_deactivationClass), HK_NULL }
};
extern const hkClass hkMotionStateClass;
const hkClass hkMotionStateClass(
	"hkMotionState",
	HK_NULL, // parent
	sizeof(::hkMotionState),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkMotionState::Members),
	HK_COUNT_OF(hkMotionState::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(3) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkMotionState::staticClass()
{
	return hkMotionStateClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkMotionState*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL cleanupLoadedObjecthkMotionState(void* p)
{
	static_cast<hkMotionState*>(p)->~hkMotionState();
}
extern const hkTypeInfo hkMotionStateTypeInfo;
const hkTypeInfo hkMotionStateTypeInfo(
	"hkMotionState",
	"!hkMotionState",
	HK_NULL,
	cleanupLoadedObjecthkMotionState,
	HK_NULL,
	sizeof(hkMotionState)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
