/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Container/Set/hkSet.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Container/Set/hkSet.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClass hkIntRealPairClass;

//
// Class hkSetUint32
//
extern const hkClass hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedintClass;

extern const hkClass hkSetUint32Class;
const hkClass hkSetUint32Class(
	"hkSetUint32",
	&hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedintClass, // parent
	sizeof(::hkSetUint32),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkSetUint32::staticClass()
{
	return hkSetUint32Class;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkSetUint32*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkSetUint32(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkSetUint32(f);
}
static void HK_CALL cleanupLoadedObjecthkSetUint32(void* p)
{
	static_cast<hkSetUint32*>(p)->~hkSetUint32();
}
extern const hkTypeInfo hkSetUint32TypeInfo;
const hkTypeInfo hkSetUint32TypeInfo(
	"hkSetUint32",
	"!hkSetUint32",
	finishLoadedObjecthkSetUint32,
	cleanupLoadedObjecthkSetUint32,
	HK_NULL,
	sizeof(hkSetUint32)
	);
#endif

//
// Class hkIntRealPair
//
static const hkInternalClassMember hkIntRealPairClass_Members[] =
{
	{ "key", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkIntRealPair,m_key), HK_NULL },
	{ "value", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkIntRealPair,m_value), HK_NULL }
};
const hkClass hkIntRealPairClass(
	"hkIntRealPair",
	HK_NULL, // parent
	sizeof(::hkIntRealPair),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkIntRealPairClass_Members),
	HK_COUNT_OF(hkIntRealPairClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkIntRealPair::staticClass()
{
	return hkIntRealPairClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkIntRealPair*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkIntRealPair(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkIntRealPair(f);
}
static void HK_CALL cleanupLoadedObjecthkIntRealPair(void* p)
{
	static_cast<hkIntRealPair*>(p)->~hkIntRealPair();
}
extern const hkTypeInfo hkIntRealPairTypeInfo;
const hkTypeInfo hkIntRealPairTypeInfo(
	"hkIntRealPair",
	"!hkIntRealPair",
	finishLoadedObjecthkIntRealPair,
	cleanupLoadedObjecthkIntRealPair,
	HK_NULL,
	sizeof(hkIntRealPair)
	);
#endif

//
// Class hkSetIntFloatPair
//
extern const hkClass hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPairClass;

extern const hkClass hkSetIntFloatPairClass;
const hkClass hkSetIntFloatPairClass(
	"hkSetIntFloatPair",
	&hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPairClass, // parent
	sizeof(::hkSetIntFloatPair),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkSetIntFloatPair::staticClass()
{
	return hkSetIntFloatPairClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkSetIntFloatPair*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkSetIntFloatPair(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkSetIntFloatPair(f);
}
static void HK_CALL cleanupLoadedObjecthkSetIntFloatPair(void* p)
{
	static_cast<hkSetIntFloatPair*>(p)->~hkSetIntFloatPair();
}
extern const hkTypeInfo hkSetIntFloatPairTypeInfo;
const hkTypeInfo hkSetIntFloatPairTypeInfo(
	"hkSetIntFloatPair",
	"!hkSetIntFloatPair",
	finishLoadedObjecthkSetIntFloatPair,
	cleanupLoadedObjecthkSetIntFloatPair,
	HK_NULL,
	sizeof(hkSetIntFloatPair)
	);
#endif

//
// Class hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint
//
typedef hkSet< unsigned int, struct hkContainerHeapAllocator, struct hkMapOperations< unsigned int > > hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename;


// hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint attributes
template<>
const hkInternalClassMember hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename::Members[] =
{
	{ "elem", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename,m_elem), HK_NULL },
	{ "numElems", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename,m_numElems), HK_NULL }
};
const hkClass hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedintClass(
	"hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint",
	HK_NULL, // parent
	sizeof(::hkSet< unsigned int, struct hkContainerHeapAllocator, struct hkMapOperations< unsigned int > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename::Members),
	HK_COUNT_OF(hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint(void* p)
{
	static_cast<hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename*>(p)->~hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename();
}
extern const hkTypeInfo hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedintTypeInfo;
const hkTypeInfo hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedintTypeInfo(
	"hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint",
	"!hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename",
	finishLoadedObjecthkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint,
	cleanupLoadedObjecthkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint,
	HK_NULL,
	sizeof(hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint_typename)
	);
#endif

//
// Class hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair
//
typedef hkSet< struct hkIntRealPair, struct hkContainerHeapAllocator, struct hkMapOperations< struct hkIntRealPair > > hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename;


// hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair attributes
template<>
const hkInternalClassMember hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename::Members[] =
{
	{ "elem", &hkIntRealPairClass, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_STRUCT, 0, 0, HK_OFFSET_OF(hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename,m_elem), HK_NULL },
	{ "numElems", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename,m_numElems), HK_NULL }
};
const hkClass hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPairClass(
	"hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair",
	HK_NULL, // parent
	sizeof(::hkSet< struct hkIntRealPair, struct hkContainerHeapAllocator, struct hkMapOperations< struct hkIntRealPair > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename::Members),
	HK_COUNT_OF(hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair(void* p)
{
	static_cast<hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename*>(p)->~hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename();
}
extern const hkTypeInfo hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPairTypeInfo;
const hkTypeInfo hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPairTypeInfo(
	"hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair",
	"!hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename",
	finishLoadedObjecthkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair,
	cleanupLoadedObjecthkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair,
	HK_NULL,
	sizeof(hkSethkIntRealPairhkContainerHeapAllocatorhkMapOperationshkIntRealPair_typename)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
