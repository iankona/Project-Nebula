/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'Common/Base/Container/BitField/hkBitField.h'
#include <Common/Base/hkBase.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <Common/Base/Container/BitField/hkBitField.h>
#define True true
#define False false


//
// Class hkBitField
//
extern const hkClass hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass;

extern const hkClass hkBitFieldClass;
const hkClass hkBitFieldClass(
	"hkBitField",
	&hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass, // parent
	sizeof(::hkBitField),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(2) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkBitField::staticClass()
{
	return hkBitFieldClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkBitField*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkBitField(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkBitField(f);
}
static void HK_CALL cleanupLoadedObjecthkBitField(void* p)
{
	static_cast<hkBitField*>(p)->~hkBitField();
}
extern const hkTypeInfo hkBitFieldTypeInfo;
const hkTypeInfo hkBitFieldTypeInfo(
	"hkBitField",
	"!hkBitField",
	finishLoadedObjecthkBitField,
	cleanupLoadedObjecthkBitField,
	HK_NULL,
	sizeof(hkBitField)
	);
#endif

//
// Class hkOffsetBitField
//
extern const hkClass hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass;

extern const hkClass hkOffsetBitFieldClass;
const hkClass hkOffsetBitFieldClass(
	"hkOffsetBitField",
	&hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass, // parent
	sizeof(::hkOffsetBitField),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	HK_NULL,
	0,
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL hkOffsetBitField::staticClass()
{
	return hkOffsetBitFieldClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkOffsetBitField*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkOffsetBitField(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkOffsetBitField(f);
}
static void HK_CALL cleanupLoadedObjecthkOffsetBitField(void* p)
{
	static_cast<hkOffsetBitField*>(p)->~hkOffsetBitField();
}
extern const hkTypeInfo hkOffsetBitFieldTypeInfo;
const hkTypeInfo hkOffsetBitFieldTypeInfo(
	"hkOffsetBitField",
	"!hkOffsetBitField",
	finishLoadedObjecthkOffsetBitField,
	cleanupLoadedObjecthkOffsetBitField,
	HK_NULL,
	sizeof(hkOffsetBitField)
	);
#endif

//
// Class hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator
//
typedef hkBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename;


// hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator attributes
static const hkInternalClassMember hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members[] =
{
	{ "words", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_words), HK_NULL },
	{ "numBits", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_numBits), HK_NULL }
};
extern const hkClass hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass;
const hkClass hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass(
	"hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	HK_NULL, // parent
	sizeof(::hkBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members),
	HK_COUNT_OF(hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p)
{
	static_cast<hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(p)->~hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename();
}
extern const hkTypeInfo hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo;
const hkTypeInfo hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo(
	"hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	"!hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename",
	finishLoadedObjecthkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	cleanupLoadedObjecthkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	HK_NULL,
	sizeof(hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename)
	);
#endif

//
// Class hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator
//
typedef hkBitFieldBase< struct hkBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > > hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename;



// hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator attributes
template<>
const hkInternalClassMember hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members[] =
{
	{ "storage", &hkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_storage), HK_NULL }
};
const hkClass hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass(
	"hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	HK_NULL, // parent
	sizeof(::hkBitFieldBase< struct hkBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members),
	HK_COUNT_OF(hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p)
{
	static_cast<hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(p)->~hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename();
}
extern const hkTypeInfo hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo;
const hkTypeInfo hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo(
	"hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	"!hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename",
	finishLoadedObjecthkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	cleanupLoadedObjecthkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	HK_NULL,
	sizeof(hkBitFieldBasehkBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename)
	);
#endif

//
// Class hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator
//
typedef hkOffsetBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename;


// hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator attributes
static const hkInternalClassMember hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members[] =
{
	{ "words", HK_NULL, HK_NULL, hkClassMember::TYPE_ARRAY, hkClassMember::TYPE_UINT32, 0, 0, HK_OFFSET_OF(hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_words), HK_NULL },
	{ "offset", HK_NULL, HK_NULL, hkClassMember::TYPE_INT32, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_offset), HK_NULL }
};
extern const hkClass hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass;
const hkClass hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass(
	"hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	HK_NULL, // parent
	sizeof(::hkOffsetBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members),
	HK_COUNT_OF(hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typenameClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p)
{
	static_cast<hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(p)->~hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename();
}
extern const hkTypeInfo hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo;
const hkTypeInfo hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo(
	"hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	"!hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename",
	finishLoadedObjecthkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	cleanupLoadedObjecthkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	HK_NULL,
	sizeof(hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename)
	);
#endif

//
// Class hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator
//
typedef hkBitFieldBase< struct hkOffsetBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > > hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename;



// hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator attributes
template<>
const hkInternalClassMember hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members[] =
{
	{ "storage", &hkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass, HK_NULL, hkClassMember::TYPE_STRUCT, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename,m_storage), HK_NULL }
};
const hkClass hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorClass(
	"hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	HK_NULL, // parent
	sizeof(::hkBitFieldBase< struct hkOffsetBitFieldStorage< hkArray< unsigned int, struct hkContainerHeapAllocator > > >),
	HK_NULL,
	0, // interfaces
	HK_NULL,
	0, // enums
	reinterpret_cast<const hkClassMember*>(hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members),
	HK_COUNT_OF(hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename::Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(0))) == sizeof(hkBool::CompileTimeFalseType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjecthkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename(f);
}
static void HK_CALL cleanupLoadedObjecthkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator(void* p)
{
	static_cast<hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename*>(p)->~hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename();
}
extern const hkTypeInfo hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo;
const hkTypeInfo hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocatorTypeInfo(
	"hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator",
	"!hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename",
	finishLoadedObjecthkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	cleanupLoadedObjecthkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator,
	HK_NULL,
	sizeof(hkBitFieldBasehkOffsetBitFieldStoragehkArrayunsignedinthkContainerHeapAllocator_typename)
	);
#endif

/*
 * Havok SDK - Base file, BUILD(#20130912)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
